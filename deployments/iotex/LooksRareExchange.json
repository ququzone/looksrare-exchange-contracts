{
  "address": "0x7499e71FF8a472D1d82Aa2e68e868B5B92896B0E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currencyManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_executionManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_royaltyFeeManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolFeeRecipient",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newMinNonce",
          "type": "uint256"
        }
      ],
      "name": "CancelAllOrders",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256[]",
          "name": "orderNonces",
          "type": "uint256[]"
        }
      ],
      "name": "CancelMultipleOrders",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "currencyManager",
          "type": "address"
        }
      ],
      "name": "NewCurrencyManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "executionManager",
          "type": "address"
        }
      ],
      "name": "NewExecutionManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "platformNFT",
          "type": "address"
        }
      ],
      "name": "NewPlatformNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "protocolFeeRecipient",
          "type": "address"
        }
      ],
      "name": "NewProtocolFeeRecipient",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyFeeManager",
          "type": "address"
        }
      ],
      "name": "NewRoyaltyFeeManager",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "transferSelectorNFT",
          "type": "address"
        }
      ],
      "name": "NewTransferSelectorNFT",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "royaltyRecipient",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RoyaltyPayment",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderNonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "TakerAsk",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "orderHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "orderNonce",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "taker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "maker",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "TakerBid",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "DOMAIN_SEPARATOR",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minNonce",
          "type": "uint256"
        }
      ],
      "name": "cancelAllOrdersForSender",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "orderNonces",
          "type": "uint256[]"
        }
      ],
      "name": "cancelMultipleMakerOrders",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currencyManager",
      "outputs": [
        {
          "internalType": "contract ICurrencyManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "executionManager",
      "outputs": [
        {
          "internalType": "contract IExecutionManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "orderNonce",
          "type": "uint256"
        }
      ],
      "name": "isUserOrderNonceExecutedOrCancelled",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderTypes.TakerOrder",
          "name": "takerBid",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OrderTypes.MakerOrder",
          "name": "makerAsk",
          "type": "tuple"
        }
      ],
      "name": "matchAskWithTakerBid",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderTypes.TakerOrder",
          "name": "takerBid",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OrderTypes.MakerOrder",
          "name": "makerAsk",
          "type": "tuple"
        }
      ],
      "name": "matchAskWithTakerBidUsingETHAndWETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "taker",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            }
          ],
          "internalType": "struct OrderTypes.TakerOrder",
          "name": "takerAsk",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "bool",
              "name": "isOrderAsk",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minPercentageToAsk",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "params",
              "type": "bytes"
            },
            {
              "internalType": "uint8",
              "name": "v",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "r",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "s",
              "type": "bytes32"
            }
          ],
          "internalType": "struct OrderTypes.MakerOrder",
          "name": "makerBid",
          "type": "tuple"
        }
      ],
      "name": "matchBidWithTakerAsk",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "platformNFT",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolFeeRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyFeeManager",
      "outputs": [
        {
          "internalType": "contract IRoyaltyFeeManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "transferSelectorNFT",
      "outputs": [
        {
          "internalType": "contract ITransferSelectorNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_currencyManager",
          "type": "address"
        }
      ],
      "name": "updateCurrencyManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_executionManager",
          "type": "address"
        }
      ],
      "name": "updateExecutionManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_platformNFT",
          "type": "address"
        }
      ],
      "name": "updatePlatformNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_protocolFeeRecipient",
          "type": "address"
        }
      ],
      "name": "updateProtocolFeeRecipient",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyFeeManager",
          "type": "address"
        }
      ],
      "name": "updateRoyaltyFeeManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_transferSelectorNFT",
          "type": "address"
        }
      ],
      "name": "updateTransferSelectorNFT",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userMinOrderNonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x41caa23e4dfa867977072b848f60a6acc951dde763c0565fb44bb775109819c1",
  "receipt": {
    "to": null,
    "from": "0x0BDf1bc0cdD2E41E62E6BE2F756634FE2b587906",
    "contractAddress": "0x7499e71FF8a472D1d82Aa2e68e868B5B92896B0E",
    "transactionIndex": 0,
    "gasUsed": "5604685",
    "logsBloom": "0x
    "blockHash": "0x1eeaec7c2b584fe07518da69fff513be184b0cae185c042b0403a4fe83e621bb",
    "transactionHash": "0x41caa23e4dfa867977072b848f60a6acc951dde763c0565fb44bb775109819c1",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 24241062,
        "transactionHash": "0x41caa23e4dfa867977072b848f60a6acc951dde763c0565fb44bb775109819c1",
        "address": "0x7499e71FF8a472D1d82Aa2e68e868B5B92896B0E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000bdf1bc0cdd2e41e62e6be2f756634fe2b587906"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1eeaec7c2b584fe07518da69fff513be184b0cae185c042b0403a4fe83e621bb"
      }
    ],
    "blockNumber": 24241062,
    "cumulativeGasUsed": "5604685",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xDa2Aa57c197d113EF36c9C57889a030b5D10754E",
    "0xBB774AE925044F4D066f77762356ff1c16D4e0Ab",
    "0x4D1576198130d24F357246EE39777A7D0a53Df1D",
    "0xa00744882684c3e4747faefd68d283ea44099d03",
    "0x0BDf1bc0cdD2E41E62E6BE2F756634FE2b587906"
  ],
  "numDeployments": 4,
  "solcInputHash": "9099ef5d26ff0339240f102b147ad587",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currencyManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_executionManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_royaltyFeeManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolFeeRecipient\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newMinNonce\",\"type\":\"uint256\"}],\"name\":\"CancelAllOrders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"orderNonces\",\"type\":\"uint256[]\"}],\"name\":\"CancelMultipleOrders\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currencyManager\",\"type\":\"address\"}],\"name\":\"NewCurrencyManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"executionManager\",\"type\":\"address\"}],\"name\":\"NewExecutionManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"platformNFT\",\"type\":\"address\"}],\"name\":\"NewPlatformNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"NewProtocolFeeRecipient\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyFeeManager\",\"type\":\"address\"}],\"name\":\"NewRoyaltyFeeManager\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"transferSelectorNFT\",\"type\":\"address\"}],\"name\":\"NewTransferSelectorNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"royaltyRecipient\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RoyaltyPayment\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TakerAsk\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"orderHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"maker\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"TakerBid\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minNonce\",\"type\":\"uint256\"}],\"name\":\"cancelAllOrdersForSender\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"orderNonces\",\"type\":\"uint256[]\"}],\"name\":\"cancelMultipleMakerOrders\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currencyManager\",\"outputs\":[{\"internalType\":\"contract ICurrencyManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"executionManager\",\"outputs\":[{\"internalType\":\"contract IExecutionManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"orderNonce\",\"type\":\"uint256\"}],\"name\":\"isUserOrderNonceExecutedOrCancelled\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.TakerOrder\",\"name\":\"takerBid\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerAsk\",\"type\":\"tuple\"}],\"name\":\"matchAskWithTakerBid\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.TakerOrder\",\"name\":\"takerBid\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerAsk\",\"type\":\"tuple\"}],\"name\":\"matchAskWithTakerBidUsingETHAndWETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"taker\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"}],\"internalType\":\"struct OrderTypes.TakerOrder\",\"name\":\"takerAsk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"bool\",\"name\":\"isOrderAsk\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPercentageToAsk\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"params\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"internalType\":\"struct OrderTypes.MakerOrder\",\"name\":\"makerBid\",\"type\":\"tuple\"}],\"name\":\"matchBidWithTakerAsk\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"platformNFT\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolFeeRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeManager\",\"outputs\":[{\"internalType\":\"contract IRoyaltyFeeManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"transferSelectorNFT\",\"outputs\":[{\"internalType\":\"contract ITransferSelectorNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_currencyManager\",\"type\":\"address\"}],\"name\":\"updateCurrencyManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_executionManager\",\"type\":\"address\"}],\"name\":\"updateExecutionManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_platformNFT\",\"type\":\"address\"}],\"name\":\"updatePlatformNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_protocolFeeRecipient\",\"type\":\"address\"}],\"name\":\"updateProtocolFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyFeeManager\",\"type\":\"address\"}],\"name\":\"updateRoyaltyFeeManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_transferSelectorNFT\",\"type\":\"address\"}],\"name\":\"updateTransferSelectorNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userMinOrderNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancelAllOrdersForSender(uint256)\":{\"params\":{\"minNonce\":\"minimum user nonce\"}},\"cancelMultipleMakerOrders(uint256[])\":{\"params\":{\"orderNonces\":\"array of order nonces\"}},\"constructor\":{\"params\":{\"_WETH\":\"wrapped ether address (for other chains, use wrapped native asset)\",\"_currencyManager\":\"currency manager address\",\"_executionManager\":\"execution manager address\",\"_protocolFeeRecipient\":\"protocol fee recipient\",\"_royaltyFeeManager\":\"royalty fee manager address\"}},\"isUserOrderNonceExecutedOrCancelled(address,uint256)\":{\"params\":{\"orderNonce\":\"nonce of the order\",\"user\":\"address of user\"}},\"matchAskWithTakerBid((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"params\":{\"makerAsk\":\"maker ask order\",\"takerBid\":\"taker bid order\"}},\"matchAskWithTakerBidUsingETHAndWETH((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"params\":{\"makerAsk\":\"maker ask order\",\"takerBid\":\"taker bid order\"}},\"matchBidWithTakerAsk((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"params\":{\"makerBid\":\"maker bid order\",\"takerAsk\":\"taker ask order\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateCurrencyManager(address)\":{\"params\":{\"_currencyManager\":\"new currency manager address\"}},\"updateExecutionManager(address)\":{\"params\":{\"_executionManager\":\"new execution manager address\"}},\"updatePlatformNFT(address)\":{\"params\":{\"_platformNFT\":\"new nft for platform nft\"}},\"updateProtocolFeeRecipient(address)\":{\"params\":{\"_protocolFeeRecipient\":\"new recipient for protocol fees\"}},\"updateRoyaltyFeeManager(address)\":{\"params\":{\"_royaltyFeeManager\":\"new fee manager address\"}},\"updateTransferSelectorNFT(address)\":{\"params\":{\"_transferSelectorNFT\":\"new transfer selector address\"}}},\"title\":\"LooksRareExchange\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelAllOrdersForSender(uint256)\":{\"notice\":\"Cancel all pending orders for a sender\"},\"cancelMultipleMakerOrders(uint256[])\":{\"notice\":\"Cancel maker orders\"},\"constructor\":{\"notice\":\"Constructor\"},\"isUserOrderNonceExecutedOrCancelled(address,uint256)\":{\"notice\":\"Check whether user order nonce is executed or cancelled\"},\"matchAskWithTakerBid((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"notice\":\"Match a takerBid with a matchAsk\"},\"matchAskWithTakerBidUsingETHAndWETH((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"notice\":\"Match ask with a taker bid order using ETH\"},\"matchBidWithTakerAsk((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))\":{\"notice\":\"Match a takerAsk with a makerBid\"},\"updateCurrencyManager(address)\":{\"notice\":\"Update currency manager\"},\"updateExecutionManager(address)\":{\"notice\":\"Update execution manager\"},\"updatePlatformNFT(address)\":{\"notice\":\"Update platform nft\"},\"updateProtocolFeeRecipient(address)\":{\"notice\":\"Update protocol fee and recipient\"},\"updateRoyaltyFeeManager(address)\":{\"notice\":\"Update royalty fee manager\"},\"updateTransferSelectorNFT(address)\":{\"notice\":\"Update transfer selector NFT\"}},\"notice\":\"It is the core contract of the LooksRare exchange.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LooksRareExchange.sol\":\"LooksRareExchange\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":888888},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1271.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC1271 standard signature validation method for\\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC1271 {\\n    /**\\n     * @dev Should return whether the signature provided is valid for the provided data\\n     * @param hash      Hash of the data to be signed\\n     * @param signature Signature byte array associated with _data\\n     */\\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0x0705a4b1b86d7b0bd8432118f226ba139c44b9dcaba0a6eafba2dd7d0639c544\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/LooksRareExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// OpenZeppelin contracts\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {ReentrancyGuard} from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport {IERC20, SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n\\n// LooksRare interfaces\\nimport {ICurrencyManager} from \\\"./interfaces/ICurrencyManager.sol\\\";\\nimport {IExecutionManager} from \\\"./interfaces/IExecutionManager.sol\\\";\\nimport {IExecutionStrategy} from \\\"./interfaces/IExecutionStrategy.sol\\\";\\nimport {IRoyaltyFeeManager} from \\\"./interfaces/IRoyaltyFeeManager.sol\\\";\\nimport {ILooksRareExchange} from \\\"./interfaces/ILooksRareExchange.sol\\\";\\nimport {ITransferManagerNFT} from \\\"./interfaces/ITransferManagerNFT.sol\\\";\\nimport {ITransferSelectorNFT} from \\\"./interfaces/ITransferSelectorNFT.sol\\\";\\nimport {IWETH} from \\\"./interfaces/IWETH.sol\\\";\\n\\n// LooksRare libraries\\nimport {OrderTypes} from \\\"./libraries/OrderTypes.sol\\\";\\nimport {SignatureChecker} from \\\"./libraries/SignatureChecker.sol\\\";\\n\\n/**\\n * @title LooksRareExchange\\n * @notice It is the core contract of the LooksRare exchange.\\n */\\ncontract LooksRareExchange is ILooksRareExchange, ReentrancyGuard, Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    using OrderTypes for OrderTypes.MakerOrder;\\n    using OrderTypes for OrderTypes.TakerOrder;\\n\\n    address public immutable WETH;\\n    bytes32 public immutable DOMAIN_SEPARATOR;\\n\\n    address public protocolFeeRecipient;\\n\\n    ICurrencyManager public currencyManager;\\n    IExecutionManager public executionManager;\\n    IRoyaltyFeeManager public royaltyFeeManager;\\n    ITransferSelectorNFT public transferSelectorNFT;\\n\\n    IERC721 public platformNFT;\\n\\n    mapping(address => uint256) public userMinOrderNonce;\\n    mapping(address => mapping(uint256 => bool)) private _isUserOrderNonceExecutedOrCancelled;\\n\\n    event CancelAllOrders(address indexed user, uint256 newMinNonce);\\n    event CancelMultipleOrders(address indexed user, uint256[] orderNonces);\\n    event NewCurrencyManager(address indexed currencyManager);\\n    event NewExecutionManager(address indexed executionManager);\\n    event NewProtocolFeeRecipient(address indexed protocolFeeRecipient);\\n    event NewRoyaltyFeeManager(address indexed royaltyFeeManager);\\n    event NewTransferSelectorNFT(address indexed transferSelectorNFT);\\n    event NewPlatformNFT(address indexed platformNFT);\\n\\n    event RoyaltyPayment(\\n        address indexed collection,\\n        uint256 indexed tokenId,\\n        address indexed royaltyRecipient,\\n        address currency,\\n        uint256 amount\\n    );\\n\\n    event TakerAsk(\\n        bytes32 orderHash, // bid hash of the maker order\\n        uint256 orderNonce, // user order nonce\\n        address indexed taker, // sender address for the taker ask order\\n        address indexed maker, // maker address of the initial bid order\\n        address indexed strategy, // strategy that defines the execution\\n        address currency, // currency address\\n        address collection, // collection address\\n        uint256 tokenId, // tokenId transferred\\n        uint256 amount, // amount of tokens transferred\\n        uint256 price // final transacted price\\n    );\\n\\n    event TakerBid(\\n        bytes32 orderHash, // ask hash of the maker order\\n        uint256 orderNonce, // user order nonce\\n        address indexed taker, // sender address for the taker bid order\\n        address indexed maker, // maker address of the initial ask order\\n        address indexed strategy, // strategy that defines the execution\\n        address currency, // currency address\\n        address collection, // collection address\\n        uint256 tokenId, // tokenId transferred\\n        uint256 amount, // amount of tokens transferred\\n        uint256 price // final transacted price\\n    );\\n\\n    /**\\n     * @notice Constructor\\n     * @param _currencyManager currency manager address\\n     * @param _executionManager execution manager address\\n     * @param _royaltyFeeManager royalty fee manager address\\n     * @param _WETH wrapped ether address (for other chains, use wrapped native asset)\\n     * @param _protocolFeeRecipient protocol fee recipient\\n     */\\n    constructor(\\n        address _currencyManager,\\n        address _executionManager,\\n        address _royaltyFeeManager,\\n        address _WETH,\\n        address _protocolFeeRecipient\\n    ) {\\n        // Calculate the domain separator\\n        DOMAIN_SEPARATOR = keccak256(\\n            abi.encode(\\n                0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f, // keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\")\\n                0xda9101ba92939daf4bb2e18cd5f942363b9297fbc3232c9dd964abb1fb70ed71, // keccak256(\\\"LooksRareExchange\\\")\\n                0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6, // keccak256(bytes(\\\"1\\\")) for versionId = 1\\n                block.chainid,\\n                address(this)\\n            )\\n        );\\n\\n        currencyManager = ICurrencyManager(_currencyManager);\\n        executionManager = IExecutionManager(_executionManager);\\n        royaltyFeeManager = IRoyaltyFeeManager(_royaltyFeeManager);\\n        WETH = _WETH;\\n        protocolFeeRecipient = _protocolFeeRecipient;\\n    }\\n\\n    /**\\n     * @notice Cancel all pending orders for a sender\\n     * @param minNonce minimum user nonce\\n     */\\n    function cancelAllOrdersForSender(uint256 minNonce) external {\\n        require(minNonce > userMinOrderNonce[msg.sender], \\\"Cancel: Order nonce lower than current\\\");\\n        require(minNonce < userMinOrderNonce[msg.sender] + 500000, \\\"Cancel: Cannot cancel more orders\\\");\\n        userMinOrderNonce[msg.sender] = minNonce;\\n\\n        emit CancelAllOrders(msg.sender, minNonce);\\n    }\\n\\n    /**\\n     * @notice Cancel maker orders\\n     * @param orderNonces array of order nonces\\n     */\\n    function cancelMultipleMakerOrders(uint256[] calldata orderNonces) external {\\n        require(orderNonces.length > 0, \\\"Cancel: Cannot be empty\\\");\\n\\n        for (uint256 i = 0; i < orderNonces.length; i++) {\\n            require(orderNonces[i] >= userMinOrderNonce[msg.sender], \\\"Cancel: Order nonce lower than current\\\");\\n            _isUserOrderNonceExecutedOrCancelled[msg.sender][orderNonces[i]] = true;\\n        }\\n\\n        emit CancelMultipleOrders(msg.sender, orderNonces);\\n    }\\n\\n    /**\\n     * @notice Match ask with a taker bid order using ETH\\n     * @param takerBid taker bid order\\n     * @param makerAsk maker ask order\\n     */\\n    function matchAskWithTakerBidUsingETHAndWETH(\\n        OrderTypes.TakerOrder calldata takerBid,\\n        OrderTypes.MakerOrder calldata makerAsk\\n    ) external payable override nonReentrant {\\n        require((makerAsk.isOrderAsk) && (!takerBid.isOrderAsk), \\\"Order: Wrong sides\\\");\\n        require(makerAsk.currency == WETH, \\\"Order: Currency must be WETH\\\");\\n        require(msg.sender == takerBid.taker, \\\"Order: Taker must be the sender\\\");\\n\\n        // If not enough ETH to cover the price, use WETH\\n        if (takerBid.price > msg.value) {\\n            IERC20(WETH).safeTransferFrom(msg.sender, address(this), (takerBid.price - msg.value));\\n        } else {\\n            require(takerBid.price == msg.value, \\\"Order: Msg.value too high\\\");\\n        }\\n\\n        // Wrap ETH sent to this contract\\n        IWETH(WETH).deposit{value: msg.value}();\\n\\n        // Check the maker ask order\\n        bytes32 askHash = makerAsk.hash();\\n        _validateOrder(makerAsk, askHash);\\n\\n        // Retrieve execution parameters\\n        (bool isExecutionValid, uint256 tokenId, uint256 amount) = IExecutionStrategy(makerAsk.strategy)\\n            .canExecuteTakerBid(takerBid, makerAsk);\\n\\n        require(isExecutionValid, \\\"Strategy: Execution invalid\\\");\\n\\n        // Update maker ask order status to true (prevents replay)\\n        _isUserOrderNonceExecutedOrCancelled[makerAsk.signer][makerAsk.nonce] = true;\\n\\n        // Execution part 1/2\\n        _transferFeesAndFundsWithWETH(\\n            makerAsk.strategy,\\n            makerAsk.collection,\\n            tokenId,\\n            takerBid.taker,\\n            makerAsk.signer,\\n            takerBid.price,\\n            makerAsk.minPercentageToAsk\\n        );\\n\\n        // Execution part 2/2\\n        _transferNonFungibleToken(makerAsk.collection, makerAsk.signer, takerBid.taker, tokenId, amount);\\n\\n        emit TakerBid(\\n            askHash,\\n            makerAsk.nonce,\\n            takerBid.taker,\\n            makerAsk.signer,\\n            makerAsk.strategy,\\n            makerAsk.currency,\\n            makerAsk.collection,\\n            tokenId,\\n            amount,\\n            takerBid.price\\n        );\\n    }\\n\\n    /**\\n     * @notice Match a takerBid with a matchAsk\\n     * @param takerBid taker bid order\\n     * @param makerAsk maker ask order\\n     */\\n    function matchAskWithTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        require((makerAsk.isOrderAsk) && (!takerBid.isOrderAsk), \\\"Order: Wrong sides\\\");\\n        require(msg.sender == takerBid.taker, \\\"Order: Taker must be the sender\\\");\\n\\n        // Check the maker ask order\\n        bytes32 askHash = makerAsk.hash();\\n        _validateOrder(makerAsk, askHash);\\n\\n        (bool isExecutionValid, uint256 tokenId, uint256 amount) = IExecutionStrategy(makerAsk.strategy)\\n            .canExecuteTakerBid(takerBid, makerAsk);\\n\\n        require(isExecutionValid, \\\"Strategy: Execution invalid\\\");\\n\\n        // Update maker ask order status to true (prevents replay)\\n        _isUserOrderNonceExecutedOrCancelled[makerAsk.signer][makerAsk.nonce] = true;\\n\\n        // Execution part 1/2\\n        _transferFeesAndFunds(\\n            makerAsk.strategy,\\n            makerAsk.collection,\\n            tokenId,\\n            makerAsk.currency,\\n            msg.sender,\\n            makerAsk.signer,\\n            takerBid.price,\\n            makerAsk.minPercentageToAsk\\n        );\\n\\n        // Execution part 2/2\\n        _transferNonFungibleToken(makerAsk.collection, makerAsk.signer, takerBid.taker, tokenId, amount);\\n\\n        emit TakerBid(\\n            askHash,\\n            makerAsk.nonce,\\n            takerBid.taker,\\n            makerAsk.signer,\\n            makerAsk.strategy,\\n            makerAsk.currency,\\n            makerAsk.collection,\\n            tokenId,\\n            amount,\\n            takerBid.price\\n        );\\n    }\\n\\n    /**\\n     * @notice Match a takerAsk with a makerBid\\n     * @param takerAsk taker ask order\\n     * @param makerBid maker bid order\\n     */\\n    function matchBidWithTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\\n        external\\n        override\\n        nonReentrant\\n    {\\n        require((!makerBid.isOrderAsk) && (takerAsk.isOrderAsk), \\\"Order: Wrong sides\\\");\\n        require(msg.sender == takerAsk.taker, \\\"Order: Taker must be the sender\\\");\\n\\n        // Check the maker bid order\\n        bytes32 bidHash = makerBid.hash();\\n        _validateOrder(makerBid, bidHash);\\n\\n        (bool isExecutionValid, uint256 tokenId, uint256 amount) = IExecutionStrategy(makerBid.strategy)\\n            .canExecuteTakerAsk(takerAsk, makerBid);\\n\\n        require(isExecutionValid, \\\"Strategy: Execution invalid\\\");\\n\\n        // Update maker bid order status to true (prevents replay)\\n        _isUserOrderNonceExecutedOrCancelled[makerBid.signer][makerBid.nonce] = true;\\n\\n        // Execution part 1/2\\n        _transferNonFungibleToken(makerBid.collection, msg.sender, makerBid.signer, tokenId, amount);\\n\\n        // Execution part 2/2\\n        _transferFeesAndFunds(\\n            makerBid.strategy,\\n            makerBid.collection,\\n            tokenId,\\n            makerBid.currency,\\n            makerBid.signer,\\n            takerAsk.taker,\\n            takerAsk.price,\\n            takerAsk.minPercentageToAsk\\n        );\\n\\n        emit TakerAsk(\\n            bidHash,\\n            makerBid.nonce,\\n            takerAsk.taker,\\n            makerBid.signer,\\n            makerBid.strategy,\\n            makerBid.currency,\\n            makerBid.collection,\\n            tokenId,\\n            amount,\\n            takerAsk.price\\n        );\\n    }\\n\\n    /**\\n     * @notice Update currency manager\\n     * @param _currencyManager new currency manager address\\n     */\\n    function updateCurrencyManager(address _currencyManager) external onlyOwner {\\n        require(_currencyManager != address(0), \\\"Owner: Cannot be null address\\\");\\n        currencyManager = ICurrencyManager(_currencyManager);\\n        emit NewCurrencyManager(_currencyManager);\\n    }\\n\\n    /**\\n     * @notice Update execution manager\\n     * @param _executionManager new execution manager address\\n     */\\n    function updateExecutionManager(address _executionManager) external onlyOwner {\\n        require(_executionManager != address(0), \\\"Owner: Cannot be null address\\\");\\n        executionManager = IExecutionManager(_executionManager);\\n        emit NewExecutionManager(_executionManager);\\n    }\\n\\n    /**\\n     * @notice Update protocol fee and recipient\\n     * @param _protocolFeeRecipient new recipient for protocol fees\\n     */\\n    function updateProtocolFeeRecipient(address _protocolFeeRecipient) external onlyOwner {\\n        protocolFeeRecipient = _protocolFeeRecipient;\\n        emit NewProtocolFeeRecipient(_protocolFeeRecipient);\\n    }\\n\\n    /**\\n     * @notice Update platform nft\\n     * @param _platformNFT new nft for platform nft\\n     */\\n    function updatePlatformNFT(address _platformNFT) external onlyOwner {\\n        platformNFT = IERC721(_platformNFT);\\n        emit NewPlatformNFT(_platformNFT);\\n    }\\n\\n    /**\\n     * @notice Update royalty fee manager\\n     * @param _royaltyFeeManager new fee manager address\\n     */\\n    function updateRoyaltyFeeManager(address _royaltyFeeManager) external onlyOwner {\\n        require(_royaltyFeeManager != address(0), \\\"Owner: Cannot be null address\\\");\\n        royaltyFeeManager = IRoyaltyFeeManager(_royaltyFeeManager);\\n        emit NewRoyaltyFeeManager(_royaltyFeeManager);\\n    }\\n\\n    /**\\n     * @notice Update transfer selector NFT\\n     * @param _transferSelectorNFT new transfer selector address\\n     */\\n    function updateTransferSelectorNFT(address _transferSelectorNFT) external onlyOwner {\\n        require(_transferSelectorNFT != address(0), \\\"Owner: Cannot be null address\\\");\\n        transferSelectorNFT = ITransferSelectorNFT(_transferSelectorNFT);\\n\\n        emit NewTransferSelectorNFT(_transferSelectorNFT);\\n    }\\n\\n    /**\\n     * @notice Check whether user order nonce is executed or cancelled\\n     * @param user address of user\\n     * @param orderNonce nonce of the order\\n     */\\n    function isUserOrderNonceExecutedOrCancelled(address user, uint256 orderNonce) external view returns (bool) {\\n        return _isUserOrderNonceExecutedOrCancelled[user][orderNonce];\\n    }\\n\\n    /**\\n     * @notice Transfer fees and funds to royalty recipient, protocol, and seller\\n     * @param strategy address of the execution strategy\\n     * @param collection non fungible token address for the transfer\\n     * @param tokenId tokenId\\n     * @param currency currency being used for the purchase (e.g., WETH/USDC)\\n     * @param from sender of the funds\\n     * @param to seller's recipient\\n     * @param amount amount being transferred (in currency)\\n     * @param minPercentageToAsk minimum percentage of the gross amount that goes to ask\\n     */\\n    function _transferFeesAndFunds(\\n        address strategy,\\n        address collection,\\n        uint256 tokenId,\\n        address currency,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 minPercentageToAsk\\n    ) internal {\\n        // Initialize the final amount that is transferred to seller\\n        uint256 finalSellerAmount = amount;\\n\\n        // 1. Protocol fee\\n        if (address(platformNFT) == address(0) \\n                || (platformNFT.balanceOf(from) == 0 && platformNFT.balanceOf(to) == 0)) {\\n            uint256 protocolFeeAmount = _calculateProtocolFee(strategy, amount);\\n\\n            // Check if the protocol fee is different than 0 for this strategy\\n            if ((protocolFeeRecipient != address(0)) && (protocolFeeAmount != 0)) {\\n                IERC20(currency).safeTransferFrom(from, protocolFeeRecipient, protocolFeeAmount);\\n                finalSellerAmount -= protocolFeeAmount;\\n            }\\n        }\\n\\n        // 2. Royalty fee\\n        {\\n            (address royaltyFeeRecipient, uint256 royaltyFeeAmount) = royaltyFeeManager\\n                .calculateRoyaltyFeeAndGetRecipient(collection, tokenId, amount);\\n\\n            // Check if there is a royalty fee and that it is different to 0\\n            if ((royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)) {\\n                IERC20(currency).safeTransferFrom(from, royaltyFeeRecipient, royaltyFeeAmount);\\n                finalSellerAmount -= royaltyFeeAmount;\\n\\n                emit RoyaltyPayment(collection, tokenId, royaltyFeeRecipient, currency, royaltyFeeAmount);\\n            }\\n        }\\n\\n        require((finalSellerAmount * 10000) >= (minPercentageToAsk * amount), \\\"Fees: Higher than expected\\\");\\n\\n        // 3. Transfer final amount (post-fees) to seller\\n        {\\n            IERC20(currency).safeTransferFrom(from, to, finalSellerAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer fees and funds to royalty recipient, protocol, and seller\\n     * @param strategy address of the execution strategy\\n     * @param collection non fungible token address for the transfer\\n     * @param tokenId tokenId\\n     * @param to seller's recipient\\n     * @param amount amount being transferred (in currency)\\n     * @param minPercentageToAsk minimum percentage of the gross amount that goes to ask\\n     */\\n    function _transferFeesAndFundsWithWETH(\\n        address strategy,\\n        address collection,\\n        uint256 tokenId,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        uint256 minPercentageToAsk\\n    ) internal {\\n        // Initialize the final amount that is transferred to seller\\n        uint256 finalSellerAmount = amount;\\n\\n        // 1. Protocol fee\\n        if (address(platformNFT) == address(0) \\n                || (platformNFT.balanceOf(from) == 0 && platformNFT.balanceOf(to) == 0)) {\\n            uint256 protocolFeeAmount = _calculateProtocolFee(strategy, amount);\\n\\n            // Check if the protocol fee is different than 0 for this strategy\\n            if ((protocolFeeRecipient != address(0)) && (protocolFeeAmount != 0)) {\\n                IERC20(WETH).safeTransfer(protocolFeeRecipient, protocolFeeAmount);\\n                finalSellerAmount -= protocolFeeAmount;\\n            }\\n        }\\n\\n        // 2. Royalty fee\\n        {\\n            (address royaltyFeeRecipient, uint256 royaltyFeeAmount) = royaltyFeeManager\\n                .calculateRoyaltyFeeAndGetRecipient(collection, tokenId, amount);\\n\\n            // Check if there is a royalty fee and that it is different to 0\\n            if ((royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)) {\\n                IERC20(WETH).safeTransfer(royaltyFeeRecipient, royaltyFeeAmount);\\n                finalSellerAmount -= royaltyFeeAmount;\\n\\n                emit RoyaltyPayment(collection, tokenId, royaltyFeeRecipient, address(WETH), royaltyFeeAmount);\\n            }\\n        }\\n\\n        require((finalSellerAmount * 10000) >= (minPercentageToAsk * amount), \\\"Fees: Higher than expected\\\");\\n\\n        // 3. Transfer final amount (post-fees) to seller\\n        {\\n            IERC20(WETH).safeTransfer(to, finalSellerAmount);\\n        }\\n    }\\n\\n    /**\\n     * @notice Transfer NFT\\n     * @param collection address of the token collection\\n     * @param from address of the sender\\n     * @param to address of the recipient\\n     * @param tokenId tokenId\\n     * @param amount amount of tokens (1 for ERC721, 1+ for ERC1155)\\n     * @dev For ERC721, amount is not used\\n     */\\n    function _transferNonFungibleToken(\\n        address collection,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal {\\n        // Retrieve the transfer manager address\\n        address transferManager = transferSelectorNFT.checkTransferManagerForToken(collection);\\n\\n        // If no transfer manager found, it returns address(0)\\n        require(transferManager != address(0), \\\"Transfer: No NFT transfer manager available\\\");\\n\\n        // If one is found, transfer the token\\n        ITransferManagerNFT(transferManager).transferNonFungibleToken(collection, from, to, tokenId, amount);\\n    }\\n\\n    /**\\n     * @notice Calculate protocol fee for an execution strategy\\n     * @param executionStrategy strategy\\n     * @param amount amount to transfer\\n     */\\n    function _calculateProtocolFee(address executionStrategy, uint256 amount) internal view returns (uint256) {\\n        uint256 protocolFee = IExecutionStrategy(executionStrategy).viewProtocolFee();\\n        return (protocolFee * amount) / 10000;\\n    }\\n\\n    /**\\n     * @notice Verify the validity of the maker order\\n     * @param makerOrder maker order\\n     * @param orderHash computed hash for the order\\n     */\\n    function _validateOrder(OrderTypes.MakerOrder calldata makerOrder, bytes32 orderHash) internal view {\\n        // Verify whether order nonce has expired\\n        require(\\n            (!_isUserOrderNonceExecutedOrCancelled[makerOrder.signer][makerOrder.nonce]) &&\\n                (makerOrder.nonce >= userMinOrderNonce[makerOrder.signer]),\\n            \\\"Order: Matching order expired\\\"\\n        );\\n\\n        // Verify the signer is not address(0)\\n        require(makerOrder.signer != address(0), \\\"Order: Invalid signer\\\");\\n\\n        // Verify the amount is not 0\\n        require(makerOrder.amount > 0, \\\"Order: Amount cannot be 0\\\");\\n\\n        // Verify the validity of the signature\\n        require(\\n            SignatureChecker.verify(\\n                orderHash,\\n                makerOrder.signer,\\n                makerOrder.v,\\n                makerOrder.r,\\n                makerOrder.s,\\n                DOMAIN_SEPARATOR\\n            ),\\n            \\\"Signature: Invalid\\\"\\n        );\\n\\n        // Verify whether the currency is whitelisted\\n        require(currencyManager.isCurrencyWhitelisted(makerOrder.currency), \\\"Currency: Not whitelisted\\\");\\n\\n        // Verify whether strategy can be executed\\n        require(executionManager.isStrategyWhitelisted(makerOrder.strategy), \\\"Strategy: Not whitelisted\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xa2a9325293de1b0928cc5986b5addb0a999712b8953f145a90229cd381555721\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICurrencyManager {\\n    function addCurrency(address currency) external;\\n\\n    function removeCurrency(address currency) external;\\n\\n    function isCurrencyWhitelisted(address currency) external view returns (bool);\\n\\n    function viewWhitelistedCurrencies(uint256 cursor, uint256 size) external view returns (address[] memory, uint256);\\n\\n    function viewCountWhitelistedCurrencies() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x84efd5a181382b52be6519fedd476a19e97f78a7d526d852fa0c0653a121538f\",\"license\":\"MIT\"},\"contracts/interfaces/IExecutionManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IExecutionManager {\\n    function addStrategy(address strategy) external;\\n\\n    function removeStrategy(address strategy) external;\\n\\n    function isStrategyWhitelisted(address strategy) external view returns (bool);\\n\\n    function viewWhitelistedStrategies(uint256 cursor, uint256 size) external view returns (address[] memory, uint256);\\n\\n    function viewCountWhitelistedStrategies() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x79dbfcddeb540de734f1d722417be03c88800b2fa9195ab4f1a82e380e27fcf3\",\"license\":\"MIT\"},\"contracts/interfaces/IExecutionStrategy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {OrderTypes} from \\\"../libraries/OrderTypes.sol\\\";\\n\\ninterface IExecutionStrategy {\\n    function canExecuteTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        );\\n\\n    function canExecuteTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\\n        external\\n        view\\n        returns (\\n            bool,\\n            uint256,\\n            uint256\\n        );\\n\\n    function viewProtocolFee() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x73358a44547840affea91c5d25cda3eaa86bf4cf3865888b0684137caa74606d\",\"license\":\"MIT\"},\"contracts/interfaces/ILooksRareExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {OrderTypes} from \\\"../libraries/OrderTypes.sol\\\";\\n\\ninterface ILooksRareExchange {\\n    function matchAskWithTakerBidUsingETHAndWETH(\\n        OrderTypes.TakerOrder calldata takerBid,\\n        OrderTypes.MakerOrder calldata makerAsk\\n    ) external payable;\\n\\n    function matchAskWithTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\\n        external;\\n\\n    function matchBidWithTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\\n        external;\\n}\\n\",\"keccak256\":\"0x30782a7bdc524696ee0834a3867474a46f4cc29d266dbd287ad266e48fe0499c\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRoyaltyFeeManager {\\n    function calculateRoyaltyFeeAndGetRecipient(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external view returns (address, uint256);\\n}\\n\",\"keccak256\":\"0xe91c4fa5c0ae8f35521d0853efcb9e617299909032bce6e98981d11c06088bc6\",\"license\":\"MIT\"},\"contracts/interfaces/ITransferManagerNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITransferManagerNFT {\\n    function transferNonFungibleToken(\\n        address collection,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x725f4c4a9b85f34b496d26562c0d9c09aeeeb8275e7ceaac5eb411810cc12301\",\"license\":\"MIT\"},\"contracts/interfaces/ITransferSelectorNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITransferSelectorNFT {\\n    function checkTransferManagerForToken(address collection) external view returns (address);\\n}\\n\",\"keccak256\":\"0xd818a349d84d682d0c841c4b23fdc8f0b9bfb2ee4ffee59775cc3fe92d561c2f\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GNU\\npragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0x54b6f68eca905d0b5c70c2c21a1ce3a5451b65e0771280774af4b72330c19f22\",\"license\":\"GNU\"},\"contracts/libraries/OrderTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OrderTypes\\n * @notice This library contains order types for the LooksRare exchange.\\n */\\nlibrary OrderTypes {\\n    // keccak256(\\\"MakerOrder(bool isOrderAsk,address signer,address collection,uint256 price,uint256 tokenId,uint256 amount,address strategy,address currency,uint256 nonce,uint256 startTime,uint256 endTime,uint256 minPercentageToAsk,bytes params)\\\")\\n    bytes32 internal constant MAKER_ORDER_HASH = 0x40261ade532fa1d2c7293df30aaadb9b3c616fae525a0b56d3d411c841a85028;\\n\\n    struct MakerOrder {\\n        bool isOrderAsk; // true --> ask / false --> bid\\n        address signer; // signer of the maker order\\n        address collection; // collection address\\n        uint256 price; // price (used as )\\n        uint256 tokenId; // id of the token\\n        uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\\n        address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\\n        address currency; // currency (e.g., WETH)\\n        uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\\n        uint256 startTime; // startTime in timestamp\\n        uint256 endTime; // endTime in timestamp\\n        uint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\\n        bytes params; // additional parameters\\n        uint8 v; // v: parameter (27 or 28)\\n        bytes32 r; // r: parameter\\n        bytes32 s; // s: parameter\\n    }\\n\\n    struct TakerOrder {\\n        bool isOrderAsk; // true --> ask / false --> bid\\n        address taker; // msg.sender\\n        uint256 price; // final price for the purchase\\n        uint256 tokenId;\\n        uint256 minPercentageToAsk; // // slippage protection (9000 --> 90% of the final price must return to ask)\\n        bytes params; // other params (e.g., tokenId)\\n    }\\n\\n    function hash(MakerOrder memory makerOrder) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    MAKER_ORDER_HASH,\\n                    makerOrder.isOrderAsk,\\n                    makerOrder.signer,\\n                    makerOrder.collection,\\n                    makerOrder.price,\\n                    makerOrder.tokenId,\\n                    makerOrder.amount,\\n                    makerOrder.strategy,\\n                    makerOrder.currency,\\n                    makerOrder.nonce,\\n                    makerOrder.startTime,\\n                    makerOrder.endTime,\\n                    makerOrder.minPercentageToAsk,\\n                    keccak256(makerOrder.params)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xc298cc330a3b38fbc02d80d6561ef6245f050a89301190738211bd4d0721dd93\",\"license\":\"MIT\"},\"contracts/libraries/SignatureChecker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {IERC1271} from \\\"@openzeppelin/contracts/interfaces/IERC1271.sol\\\";\\n\\n/**\\n * @title SignatureChecker\\n * @notice This library allows verification of signatures for both EOAs and contracts.\\n */\\nlibrary SignatureChecker {\\n    /**\\n     * @notice Recovers the signer of a signature (for EOA)\\n     * @param hash the hash containing the signed mesage\\n     * @param v parameter (27 or 28). This prevents maleability since the public key recovery equation has two possible solutions.\\n     * @param r parameter\\n     * @param s parameter\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        // https://ethereum.stackexchange.com/questions/83174/is-it-best-practice-to-check-signature-malleability-in-ecrecover\\n        // https://crypto.iacr.org/2019/affevents/wac/medias/Heninger-BiasedNonceSense.pdf\\n        require(\\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\\n            \\\"Signature: Invalid s parameter\\\"\\n        );\\n\\n        require(v == 27 || v == 28, \\\"Signature: Invalid v parameter\\\");\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        require(signer != address(0), \\\"Signature: Invalid signer\\\");\\n\\n        return signer;\\n    }\\n\\n    /**\\n     * @notice Returns whether the signer matches the signed message\\n     * @param hash the hash containing the signed mesage\\n     * @param signer the signer address to confirm message validity\\n     * @param v parameter (27 or 28)\\n     * @param r parameter\\n     * @param s parameter\\n     * @param domainSeparator paramer to prevent signature being executed in other chains and environments\\n     * @return true --> if valid // false --> if invalid\\n     */\\n    function verify(\\n        bytes32 hash,\\n        address signer,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s,\\n        bytes32 domainSeparator\\n    ) internal view returns (bool) {\\n        // \\\\x19\\\\x01 is the standardized encoding prefix\\n        // https://eips.ethereum.org/EIPS/eip-712#specification\\n        bytes32 digest = keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, hash));\\n        if (Address.isContract(signer)) {\\n            // 0x1626ba7e is the interfaceId for signature contracts (see IERC1271)\\n            return IERC1271(signer).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e;\\n        } else {\\n            return recover(digest, v, r, s) == signer;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x87fa4809c36ac19a4d98136139350ce21adc4394ef574f710b62c6297741ce26\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162004884380380620048848339810160408190526200003491620001b9565b600160005562000044336200014a565b604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527fda9101ba92939daf4bb2e18cd5f942363b9297fbc3232c9dd964abb1fb70ed71918101919091527fc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc660608201524660808201523060a082015260c00160408051808303601f19018152919052805160209091012060a052600380546001600160a01b03199081166001600160a01b0397881617909155600480548216958716959095179094556005805485169386169390931790925560601b6001600160601b03191660805260028054909216921691909117905562000229565b600180546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b80516001600160a01b0381168114620001b457600080fd5b919050565b600080600080600060a08688031215620001d257600080fd5b620001dd866200019c565b9450620001ed602087016200019c565b9350620001fd604087016200019c565b92506200020d606087016200019c565b91506200021d608087016200019c565b90509295509295909350565b60805160601c60a0516145fa6200028a6000396000818161027e015261244a01526000818161048e015281816115b40152818161173c015281816117d801528181613082015281816131b60152818161323b015261332e01526145fa6000f3fe60806040526004361061018b5760003560e01c8063715018a6116100d6578063b4e4b2961161007f578063d4ff41dc11610059578063d4ff41dc14610523578063f2fde38b14610543578063f75ff53f1461056357600080fd5b8063b4e4b296146104d0578063c5498769146104e3578063cbd2ec651461050357600080fd5b80639e53a69a116100b05780639e53a69a1461045c578063ad5c46481461047c578063b24cc301146104b057600080fd5b8063715018a6146103ef57806387e4401f146104045780638da5cb5b1461043157600080fd5b80634266581e116101385780635ce052d7116101125780635ce052d7146103755780635e14f68e1461039557806364df049e146103c257600080fd5b80634266581e146102ee578063483abb9f1461031b57806353d9b3a01461034857600080fd5b80633644e515116101695780633644e5151461026c57806338e29209146102ae5780633b6d032e146102ce57600080fd5b80630f747d74146101905780631df47f80146101e757806331e27e2714610209575b600080fd5b34801561019c57600080fd5b506003546101bd9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156101f357600080fd5b50610207610202366004613c04565b610583565b005b34801561021557600080fd5b5061025c610224366004613c3e565b73ffffffffffffffffffffffffffffffffffffffff919091166000908152600960209081526040808320938352929052205460ff1690565b60405190151581526020016101de565b34801561027857600080fd5b506102a07f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016101de565b3480156102ba57600080fd5b506102076102c9366004613dc0565b610678565b3480156102da57600080fd5b506102076102e9366004613dc0565b610b64565b3480156102fa57600080fd5b506102a0610309366004613c04565b60086020526000908152604090205481565b34801561032757600080fd5b506004546101bd9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561035457600080fd5b506007546101bd9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561038157600080fd5b50610207610390366004613c04565b610fd7565b3480156103a157600080fd5b506006546101bd9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156103ce57600080fd5b506002546101bd9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156103fb57600080fd5b50610207611144565b34801561041057600080fd5b506005546101bd9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561043d57600080fd5b5060015473ffffffffffffffffffffffffffffffffffffffff166101bd565b34801561046857600080fd5b50610207610477366004613c98565b6111d1565b34801561048857600080fd5b506101bd7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104bc57600080fd5b506102076104cb366004613c04565b6113b2565b6102076104de366004613dc0565b6114a2565b3480156104ef57600080fd5b506102076104fe366004613c04565b611a4c565b34801561050f57600080fd5b5061020761051e366004613e34565b611bb9565b34801561052f57600080fd5b5061020761053e366004613c04565b611d51565b34801561054f57600080fd5b5061020761055e366004613c04565b611ebe565b34801561056f57600080fd5b5061020761057e366004613c04565b611fee565b60015473ffffffffffffffffffffffffffffffffffffffff163314610609576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f8cffb07faa2874440346743bdc0a86b06c3335cc47dc49b327d10e77b73ceb1090600090a250565b600260005414156106e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610600565b60026000556106f76020820182613d0d565b801561070d575061070b6020830183613d0d565b155b610773576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4f726465723a2057726f6e6720736964657300000000000000000000000000006044820152606401610600565b6107836040830160208401613c04565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f726465723a2054616b6572206d757374206265207468652073656e646572006044820152606401610600565b600061082a61082583614391565b61215b565b90506108368282612202565b6000808061084a60e0860160c08701613c04565b73ffffffffffffffffffffffffffffffffffffffff1663865781ca87876040518363ffffffff1660e01b815260040161088492919061406b565b60606040518083038186803b15801561089c57600080fd5b505afa1580156108b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d49190613d47565b92509250925082610941576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f53747261746567793a20457865637574696f6e20696e76616c696400000000006044820152606401610600565b6001600960006109576040890160208a01613c04565b73ffffffffffffffffffffffffffffffffffffffff168152602080820192909252604090810160009081206101008a01358252909252902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055610a126109cf60e0870160c08801613c04565b6109df6060880160408901613c04565b846109f16101008a0160e08b01613c04565b33610a0260408c0160208d01613c04565b8c604001358c6101600135612739565b610a4c610a256060870160408801613c04565b610a356040880160208901613c04565b610a4560408a0160208b01613c04565b8585612b6a565b610a5c60e0860160c08701613c04565b73ffffffffffffffffffffffffffffffffffffffff16610a826040870160208801613c04565b73ffffffffffffffffffffffffffffffffffffffff16610aa86040890160208a01613c04565b73ffffffffffffffffffffffffffffffffffffffff167f95fb6205e23ff6bda16a2d1dba56b9ad7c783f67c96fa149785052f47696f2be876101008a01803590610af59060e08d01613c04565b610b0560608d0160408e01613c04565b60408051948552602085019390935273ffffffffffffffffffffffffffffffffffffffff918216848401521660608301526080820188905260a082018790528b013560c082015260e00160405180910390a45050600160005550505050565b60026000541415610bd1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610600565b6002600055610be36020820182613d0d565b158015610bf85750610bf86020830183613d0d565b610c5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4f726465723a2057726f6e6720736964657300000000000000000000000000006044820152606401610600565b610c6e6040830160208401613c04565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f726465723a2054616b6572206d757374206265207468652073656e646572006044820152606401610600565b6000610d1061082583614391565b9050610d1c8282612202565b60008080610d3060e0860160c08701613c04565b73ffffffffffffffffffffffffffffffffffffffff1663ad2390ac87876040518363ffffffff1660e01b8152600401610d6a92919061406b565b60606040518083038186803b158015610d8257600080fd5b505afa158015610d96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dba9190613d47565b92509250925082610e27576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f53747261746567793a20457865637574696f6e20696e76616c696400000000006044820152606401610600565b600160096000610e3d6040890160208a01613c04565b73ffffffffffffffffffffffffffffffffffffffff168152602080820192909252604090810160009081206101008a013582529092529081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001692151592909217909155610eca90610eb99060608801908801613c04565b33610a456040890160208a01613c04565b610f2e610edd60e0870160c08801613c04565b610eed6060880160408901613c04565b84610eff6101008a0160e08b01613c04565b610f0f60408b0160208c01613c04565b610f1f60408d0160208e01613c04565b8c604001358d60800135612739565b610f3e60e0860160c08701613c04565b73ffffffffffffffffffffffffffffffffffffffff16610f646040870160208801613c04565b73ffffffffffffffffffffffffffffffffffffffff16610f8a6040890160208a01613c04565b73ffffffffffffffffffffffffffffffffffffffff167f68cd251d4d267c6e2034ff0088b990352b97b2002c0476587d0c4da889c11330876101008a01803590610af59060e08d01613c04565b60015473ffffffffffffffffffffffffffffffffffffffff163314611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610600565b73ffffffffffffffffffffffffffffffffffffffff81166110d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f776e65723a2043616e6e6f74206265206e756c6c20616464726573730000006044820152606401610600565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fb4f5db40df3aced29e88a4babbc3b46e305e07d34098525d18b1497056e6383890600090a250565b60015473ffffffffffffffffffffffffffffffffffffffff1633146111c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610600565b6111cf6000612d5a565b565b80611238576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e63656c3a2043616e6e6f7420626520656d7074790000000000000000006044820152606401610600565b60005b8181101561135d573360009081526008602052604090205483838381811061126557611265614536565b9050602002013510156112fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f43616e63656c3a204f72646572206e6f6e6365206c6f776572207468616e206360448201527f757272656e7400000000000000000000000000000000000000000000000000006064820152608401610600565b33600090815260096020526040812060019185858581811061131e5761131e614536565b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611355906144ce565b91505061123b565b503373ffffffffffffffffffffffffffffffffffffffff167ffa0ae5d80fe3763c880a3839fab0294171a6f730d1f82c4cd5392c6f67b4173283836040516113a6929190613f30565b60405180910390a25050565b60015473ffffffffffffffffffffffffffffffffffffffff163314611433576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610600565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fe58cd35d27b99ff4118a59d2bb828e4000e9b2998202d1ea939591895136e3f490600090a250565b6002600054141561150f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610600565b60026000556115216020820182613d0d565b801561153757506115356020830183613d0d565b155b61159d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4f726465723a2057726f6e6720736964657300000000000000000000000000006044820152606401610600565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166115e5610100830160e08401613c04565b73ffffffffffffffffffffffffffffffffffffffff1614611662576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4f726465723a2043757272656e6379206d7573742062652057455448000000006044820152606401610600565b6116726040830160208401613c04565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611706576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f726465723a2054616b6572206d757374206265207468652073656e646572006044820152606401610600565b348260400135111561176957611764333061172534604087013561437a565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016929190612dd1565b6117d6565b348260400135146117d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4f726465723a204d73672e76616c756520746f6f2068696768000000000000006044820152606401610600565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561183e57600080fd5b505af1158015611852573d6000803e3d6000fd5b505050505060006118668261082590614391565b90506118728282612202565b6000808061188660e0860160c08701613c04565b73ffffffffffffffffffffffffffffffffffffffff1663865781ca87876040518363ffffffff1660e01b81526004016118c092919061406b565b60606040518083038186803b1580156118d857600080fd5b505afa1580156118ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119109190613d47565b9250925092508261197d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f53747261746567793a20457865637574696f6e20696e76616c696400000000006044820152606401610600565b6001600960006119936040890160208a01613c04565b73ffffffffffffffffffffffffffffffffffffffff168152602080820192909252604090810160009081206101008a01358252909252902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055610a12611a0b60e0870160c08801613c04565b611a1b6060880160408901613c04565b84611a2c60408b0160208c01613c04565b611a3c60408b0160208c01613c04565b8b604001358b6101600135612eb3565b60015473ffffffffffffffffffffffffffffffffffffffff163314611acd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610600565b73ffffffffffffffffffffffffffffffffffffffff8116611b4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f776e65723a2043616e6e6f74206265206e756c6c20616464726573730000006044820152606401610600565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f80e3874461ebbd918ac3e81da0a92e5e51387d70f337237c9123e48d20e5a50890600090a250565b336000908152600860205260409020548111611c57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f43616e63656c3a204f72646572206e6f6e6365206c6f776572207468616e206360448201527f757272656e7400000000000000000000000000000000000000000000000000006064820152608401610600565b33600090815260086020526040902054611c74906207a1206142ea565b8110611d02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f43616e63656c3a2043616e6e6f742063616e63656c206d6f7265206f7264657260448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610600565b3360008181526008602052604090819020839055517f1e7178d84f0b0825c65795cd62e7972809ad3aac6917843aaec596161b2c0a9790611d469084815260200190565b60405180910390a250565b60015473ffffffffffffffffffffffffffffffffffffffff163314611dd2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610600565b73ffffffffffffffffffffffffffffffffffffffff8116611e4f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f776e65723a2043616e6e6f74206265206e756c6c20616464726573730000006044820152606401610600565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f36e2a376eabc3bc60cb88f29c288f53e36874a95a7f407330ab4f166b090569890600090a250565b60015473ffffffffffffffffffffffffffffffffffffffff163314611f3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610600565b73ffffffffffffffffffffffffffffffffffffffff8116611fe2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610600565b611feb81612d5a565b50565b60015473ffffffffffffffffffffffffffffffffffffffff16331461206f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610600565b73ffffffffffffffffffffffffffffffffffffffff81166120ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f776e65723a2043616e6e6f74206265206e756c6c20616464726573730000006044820152606401610600565b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f205d78ab41afe80bd6b6aaa5d7599d5300ff8690da3ab1302c1b552f7baf7d8c90600090a250565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01516101208c01516101408d01516101608e01516101808f01518051908e01209a5160009e6121e59e7f40261ade532fa1d2c7293df30aaadb9b3c616fae525a0b56d3d411c841a850289e919d919c9b9a999897969594939201613f85565b604051602081830303815290604052805190602001209050919050565b600960006122166040850160208601613c04565b73ffffffffffffffffffffffffffffffffffffffff16815260208082019290925260409081016000908120610100860135825290925290205460ff161580156122b257506008600061226e6040850160208601613c04565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482610100013510155b612318576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f726465723a204d61746368696e67206f7264657220657870697265640000006044820152606401610600565b600061232a6040840160208501613c04565b73ffffffffffffffffffffffffffffffffffffffff1614156123a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4f726465723a20496e76616c6964207369676e657200000000000000000000006044820152606401610600565b60008260a0013511612416576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4f726465723a20416d6f756e742063616e6e6f742062652030000000000000006044820152606401610600565b61246e8161242a6040850160208601613c04565b61243c6101c086016101a08701613e66565b856101c00135866101e001357f000000000000000000000000000000000000000000000000000000000000000061335f565b6124d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f5369676e61747572653a20496e76616c696400000000000000000000000000006044820152606401610600565b60035473ffffffffffffffffffffffffffffffffffffffff166343b938c5612503610100850160e08601613c04565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260240160206040518083038186803b15801561256757600080fd5b505afa15801561257b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259f9190613d2a565b612605576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f43757272656e63793a204e6f742077686974656c6973746564000000000000006044820152606401610600565b60045473ffffffffffffffffffffffffffffffffffffffff1663999ba27c61263360e0850160c08601613c04565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260240160206040518083038186803b15801561269757600080fd5b505afa1580156126ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126cf9190613d2a565b612735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f53747261746567793a204e6f742077686974656c6973746564000000000000006044820152606401610600565b5050565b600754829073ffffffffffffffffffffffffffffffffffffffff1615806128ab57506007546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152909116906370a082319060240160206040518083038186803b1580156127c657600080fd5b505afa1580156127da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127fe9190613e4d565b1580156128ab57506007546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152909116906370a082319060240160206040518083038186803b15801561287157600080fd5b505afa158015612885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128a99190613e4d565b155b156129225760006128bc8a8561352c565b60025490915073ffffffffffffffffffffffffffffffffffffffff16158015906128e557508015155b15612920576002546129139073ffffffffffffffffffffffffffffffffffffffff8981169189911684612dd1565b61291d818361437a565b91505b505b6005546040517ff4f635fa00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152602482018a905260448201869052600092839291169063f4f635fa90606401604080518083038186803b15801561299e57600080fd5b505afa1580156129b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d69190613c6a565b909250905073ffffffffffffffffffffffffffffffffffffffff8216158015906129ff57508015155b15612abc57612a2673ffffffffffffffffffffffffffffffffffffffff8916888484612dd1565b612a30818461437a565b92508173ffffffffffffffffffffffffffffffffffffffff16898b73ffffffffffffffffffffffffffffffffffffffff167f27c4f0403323142b599832f26acd21c74a9e5b809f2215726e244a4ac588cd7d8b85604051612ab392919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b60405180910390a45b50612ac99050838361433d565b612ad58261271061433d565b1015612b3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f466565733a20486967686572207468616e2065787065637465640000000000006044820152606401610600565b612b5f73ffffffffffffffffffffffffffffffffffffffff8716868684612dd1565b505050505050505050565b6006546040517fcc15949300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152600092169063cc1594939060240160206040518083038186803b158015612bd657600080fd5b505afa158015612bea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0e9190613c21565b905073ffffffffffffffffffffffffffffffffffffffff8116612cb3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f5472616e736665723a204e6f204e4654207472616e73666572206d616e61676560448201527f7220617661696c61626c650000000000000000000000000000000000000000006064820152608401610600565b6040517f33f2fa9f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528681166024830152858116604483015260648201859052608482018490528216906333f2fa9f9060a401600060405180830381600087803b158015612d3a57600080fd5b505af1158015612d4e573d6000803e3d6000fd5b50505050505050505050565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052612ead9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526135ce565b50505050565b600754829073ffffffffffffffffffffffffffffffffffffffff16158061302557506007546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152909116906370a082319060240160206040518083038186803b158015612f4057600080fd5b505afa158015612f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f789190613e4d565b15801561302557506007546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152909116906370a082319060240160206040518083038186803b158015612feb57600080fd5b505afa158015612fff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130239190613e4d565b155b156130ba576000613036898561352c565b60025490915073ffffffffffffffffffffffffffffffffffffffff161580159061305f57508015155b156130b8576002546130ab9073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081169116836136df565b6130b5818361437a565b91505b505b6005546040517ff4f635fa00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301526024820189905260448201869052600092839291169063f4f635fa90606401604080518083038186803b15801561313657600080fd5b505afa15801561314a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316e9190613c6a565b909250905073ffffffffffffffffffffffffffffffffffffffff82161580159061319757508015155b15613293576131dd73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001683836136df565b6131e7818461437a565b92508173ffffffffffffffffffffffffffffffffffffffff16888a73ffffffffffffffffffffffffffffffffffffffff167f27c4f0403323142b599832f26acd21c74a9e5b809f2215726e244a4ac588cd7d7f00000000000000000000000000000000000000000000000000000000000000008560405161328a92919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b60405180910390a45b506132a09050838361433d565b6132ac8261271061433d565b1015613314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f466565733a20486967686572207468616e2065787065637465640000000000006044820152606401610600565b61335573ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001685836136df565b5050505050505050565b6040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018290526042810187905260009081906062016040516020818303038152906040528051906020012090506133c0873b151590565b156134e457604080516020810187905280820186905260f888901b7fff000000000000000000000000000000000000000000000000000000000000001660608201528151604181830301815260618201928390527f1626ba7e0000000000000000000000000000000000000000000000000000000090925273ffffffffffffffffffffffffffffffffffffffff891691631626ba7e9161346491859160650161403f565b60206040518083038186803b15801561347c57600080fd5b505afa158015613490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134b49190613d7e565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916631626ba7e60e01b14915050613522565b8673ffffffffffffffffffffffffffffffffffffffff1661350782888888613735565b73ffffffffffffffffffffffffffffffffffffffff16149150505b9695505050505050565b6000808373ffffffffffffffffffffffffffffffffffffffff16639dd1cda66040518163ffffffff1660e01b815260040160206040518083038186803b15801561357557600080fd5b505afa158015613589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135ad9190613e4d565b90506127106135bc848361433d565b6135c69190614302565b949350505050565b6000613630826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166139419092919063ffffffff16565b8051909150156136da578080602001905181019061364e9190613d2a565b6136da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610600565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526136da9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612e2b565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156137c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5369676e61747572653a20496e76616c6964207320706172616d6574657200006044820152606401610600565b8360ff16601b14806137d657508360ff16601c145b61383c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5369676e61747572653a20496e76616c6964207620706172616d6574657200006044820152606401610600565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015613890573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116613938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5369676e61747572653a20496e76616c6964207369676e6572000000000000006044820152606401610600565b95945050505050565b6060613950848460008561395a565b90505b9392505050565b6060824710156139ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610600565b843b613a54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610600565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613a7d9190613f14565b60006040518083038185875af1925050503d8060008114613aba576040519150601f19603f3d011682016040523d82523d6000602084013e613abf565b606091505b5091509150613acf828286613ada565b979650505050505050565b60608315613ae9575081613953565b825115613af95782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106009190614058565b8035613b3881614594565b919050565b8035613b38816145b6565b600082601f830112613b5957600080fd5b813567ffffffffffffffff80821115613b7457613b74614565565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715613bba57613bba614565565b81604052838152866020858801011115613bd357600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff81168114613b3857600080fd5b600060208284031215613c1657600080fd5b813561395381614594565b600060208284031215613c3357600080fd5b815161395381614594565b60008060408385031215613c5157600080fd5b8235613c5c81614594565b946020939093013593505050565b60008060408385031215613c7d57600080fd5b8251613c8881614594565b6020939093015192949293505050565b60008060208385031215613cab57600080fd5b823567ffffffffffffffff80821115613cc357600080fd5b818501915085601f830112613cd757600080fd5b813581811115613ce657600080fd5b8660208260051b8501011115613cfb57600080fd5b60209290920196919550909350505050565b600060208284031215613d1f57600080fd5b8135613953816145b6565b600060208284031215613d3c57600080fd5b8151613953816145b6565b600080600060608486031215613d5c57600080fd5b8351613d67816145b6565b602085015160409095015190969495509392505050565b600060208284031215613d9057600080fd5b81517fffffffff000000000000000000000000000000000000000000000000000000008116811461395357600080fd5b60008060408385031215613dd357600080fd5b823567ffffffffffffffff80821115613deb57600080fd5b9084019060c08287031215613dff57600080fd5b90925060208401359080821115613e1557600080fd5b5083016102008186031215613e2957600080fd5b809150509250929050565b600060208284031215613e4657600080fd5b5035919050565b600060208284031215613e5f57600080fd5b5051919050565b600060208284031215613e7857600080fd5b61395382613bf3565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60008151808452613ee28160208601602086016144a2565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251613f268184602087016144a2565b9190910192915050565b6020815281602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115613f6957600080fd5b8260051b80856040850137600092016040019182525092915050565b8e81528d1515602082015273ffffffffffffffffffffffffffffffffffffffff8d811660408301528c1660608201526101c081018b60808301528a60a08301528960c0830152613fed60e083018a73ffffffffffffffffffffffffffffffffffffffff169052565b73ffffffffffffffffffffffffffffffffffffffff88166101008301526101208201969096526101408101949094526101608401929092526101808301526101a0909101529998505050505050505050565b8281526040602082015260006139506040830184613eca565b6020815260006139536020830184613eca565b604081526000610100843561407f816145b6565b15156040840152602085013561409481614594565b73ffffffffffffffffffffffffffffffffffffffff811660608501525060408501356080840152606085013560a0840152608085013560c08401526140dc60a086018661427f565b60c060e08601526140f08386018284613e81565b91505083810360208501526102006141118261410b88613b3d565b15159052565b61411d60208701613b2d565b73ffffffffffffffffffffffffffffffffffffffff16602083015261414460408701613b2d565b73ffffffffffffffffffffffffffffffffffffffff8116604084015250606086013560608301526080860135608083015260a086013560a083015261418b60c08701613b2d565b73ffffffffffffffffffffffffffffffffffffffff1660c08301526141b260e08701613b2d565b73ffffffffffffffffffffffffffffffffffffffff1660e08301528286013592820192909252610120808601359082015261014080860135908201526101608086013590820152610180916142098387018761427f565b828585015261421b8385018284613e81565b94505050506101a061422e818701613bf3565b60ff16908201526101c085810135908201526101e094850135940193909352509092915050565b604051610200810167ffffffffffffffff8111828210171561427957614279614565565b60405290565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126142b457600080fd5b830160208101925035905067ffffffffffffffff8111156142d457600080fd5b8036038313156142e357600080fd5b9250929050565b600082198211156142fd576142fd614507565b500190565b600082614338577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561437557614375614507565b500290565b60008282101561438c5761438c614507565b500390565b600061020082360312156143a457600080fd5b6143ac614255565b6143b583613b3d565b81526143c360208401613b2d565b60208201526143d460408401613b2d565b6040820152606083013560608201526080830135608082015260a083013560a082015261440360c08401613b2d565b60c082015261441460e08401613b2d565b60e082015261010083810135908201526101208084013590820152610140808401359082015261016080840135908201526101808084013567ffffffffffffffff81111561446157600080fd5b61446d36828701613b48565b8284015250506101a0614481818501613bf3565b908201526101c083810135908201526101e092830135928101929092525090565b60005b838110156144bd5781810151838201526020016144a5565b83811115612ead5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561450057614500614507565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114611feb57600080fd5b8015158114611feb57600080fdfea2646970667358221220a308a3e1165dffc4c43900388e0a6d4d29cde512e58509261fe6eb65dc6454d064736f6c63430008070033",
  "deployedBytecode": "0x60806040526004361061018b5760003560e01c8063715018a6116100d6578063b4e4b2961161007f578063d4ff41dc11610059578063d4ff41dc14610523578063f2fde38b14610543578063f75ff53f1461056357600080fd5b8063b4e4b296146104d0578063c5498769146104e3578063cbd2ec651461050357600080fd5b80639e53a69a116100b05780639e53a69a1461045c578063ad5c46481461047c578063b24cc301146104b057600080fd5b8063715018a6146103ef57806387e4401f146104045780638da5cb5b1461043157600080fd5b80634266581e116101385780635ce052d7116101125780635ce052d7146103755780635e14f68e1461039557806364df049e146103c257600080fd5b80634266581e146102ee578063483abb9f1461031b57806353d9b3a01461034857600080fd5b80633644e515116101695780633644e5151461026c57806338e29209146102ae5780633b6d032e146102ce57600080fd5b80630f747d74146101905780631df47f80146101e757806331e27e2714610209575b600080fd5b34801561019c57600080fd5b506003546101bd9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156101f357600080fd5b50610207610202366004613c04565b610583565b005b34801561021557600080fd5b5061025c610224366004613c3e565b73ffffffffffffffffffffffffffffffffffffffff919091166000908152600960209081526040808320938352929052205460ff1690565b60405190151581526020016101de565b34801561027857600080fd5b506102a07f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020016101de565b3480156102ba57600080fd5b506102076102c9366004613dc0565b610678565b3480156102da57600080fd5b506102076102e9366004613dc0565b610b64565b3480156102fa57600080fd5b506102a0610309366004613c04565b60086020526000908152604090205481565b34801561032757600080fd5b506004546101bd9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561035457600080fd5b506007546101bd9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561038157600080fd5b50610207610390366004613c04565b610fd7565b3480156103a157600080fd5b506006546101bd9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156103ce57600080fd5b506002546101bd9073ffffffffffffffffffffffffffffffffffffffff1681565b3480156103fb57600080fd5b50610207611144565b34801561041057600080fd5b506005546101bd9073ffffffffffffffffffffffffffffffffffffffff1681565b34801561043d57600080fd5b5060015473ffffffffffffffffffffffffffffffffffffffff166101bd565b34801561046857600080fd5b50610207610477366004613c98565b6111d1565b34801561048857600080fd5b506101bd7f000000000000000000000000000000000000000000000000000000000000000081565b3480156104bc57600080fd5b506102076104cb366004613c04565b6113b2565b6102076104de366004613dc0565b6114a2565b3480156104ef57600080fd5b506102076104fe366004613c04565b611a4c565b34801561050f57600080fd5b5061020761051e366004613e34565b611bb9565b34801561052f57600080fd5b5061020761053e366004613c04565b611d51565b34801561054f57600080fd5b5061020761055e366004613c04565b611ebe565b34801561056f57600080fd5b5061020761057e366004613c04565b611fee565b60015473ffffffffffffffffffffffffffffffffffffffff163314610609576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f8cffb07faa2874440346743bdc0a86b06c3335cc47dc49b327d10e77b73ceb1090600090a250565b600260005414156106e5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610600565b60026000556106f76020820182613d0d565b801561070d575061070b6020830183613d0d565b155b610773576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4f726465723a2057726f6e6720736964657300000000000000000000000000006044820152606401610600565b6107836040830160208401613c04565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610817576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f726465723a2054616b6572206d757374206265207468652073656e646572006044820152606401610600565b600061082a61082583614391565b61215b565b90506108368282612202565b6000808061084a60e0860160c08701613c04565b73ffffffffffffffffffffffffffffffffffffffff1663865781ca87876040518363ffffffff1660e01b815260040161088492919061406b565b60606040518083038186803b15801561089c57600080fd5b505afa1580156108b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d49190613d47565b92509250925082610941576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f53747261746567793a20457865637574696f6e20696e76616c696400000000006044820152606401610600565b6001600960006109576040890160208a01613c04565b73ffffffffffffffffffffffffffffffffffffffff168152602080820192909252604090810160009081206101008a01358252909252902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055610a126109cf60e0870160c08801613c04565b6109df6060880160408901613c04565b846109f16101008a0160e08b01613c04565b33610a0260408c0160208d01613c04565b8c604001358c6101600135612739565b610a4c610a256060870160408801613c04565b610a356040880160208901613c04565b610a4560408a0160208b01613c04565b8585612b6a565b610a5c60e0860160c08701613c04565b73ffffffffffffffffffffffffffffffffffffffff16610a826040870160208801613c04565b73ffffffffffffffffffffffffffffffffffffffff16610aa86040890160208a01613c04565b73ffffffffffffffffffffffffffffffffffffffff167f95fb6205e23ff6bda16a2d1dba56b9ad7c783f67c96fa149785052f47696f2be876101008a01803590610af59060e08d01613c04565b610b0560608d0160408e01613c04565b60408051948552602085019390935273ffffffffffffffffffffffffffffffffffffffff918216848401521660608301526080820188905260a082018790528b013560c082015260e00160405180910390a45050600160005550505050565b60026000541415610bd1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610600565b6002600055610be36020820182613d0d565b158015610bf85750610bf86020830183613d0d565b610c5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4f726465723a2057726f6e6720736964657300000000000000000000000000006044820152606401610600565b610c6e6040830160208401613c04565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f726465723a2054616b6572206d757374206265207468652073656e646572006044820152606401610600565b6000610d1061082583614391565b9050610d1c8282612202565b60008080610d3060e0860160c08701613c04565b73ffffffffffffffffffffffffffffffffffffffff1663ad2390ac87876040518363ffffffff1660e01b8152600401610d6a92919061406b565b60606040518083038186803b158015610d8257600080fd5b505afa158015610d96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dba9190613d47565b92509250925082610e27576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f53747261746567793a20457865637574696f6e20696e76616c696400000000006044820152606401610600565b600160096000610e3d6040890160208a01613c04565b73ffffffffffffffffffffffffffffffffffffffff168152602080820192909252604090810160009081206101008a013582529092529081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001692151592909217909155610eca90610eb99060608801908801613c04565b33610a456040890160208a01613c04565b610f2e610edd60e0870160c08801613c04565b610eed6060880160408901613c04565b84610eff6101008a0160e08b01613c04565b610f0f60408b0160208c01613c04565b610f1f60408d0160208e01613c04565b8c604001358d60800135612739565b610f3e60e0860160c08701613c04565b73ffffffffffffffffffffffffffffffffffffffff16610f646040870160208801613c04565b73ffffffffffffffffffffffffffffffffffffffff16610f8a6040890160208a01613c04565b73ffffffffffffffffffffffffffffffffffffffff167f68cd251d4d267c6e2034ff0088b990352b97b2002c0476587d0c4da889c11330876101008a01803590610af59060e08d01613c04565b60015473ffffffffffffffffffffffffffffffffffffffff163314611058576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610600565b73ffffffffffffffffffffffffffffffffffffffff81166110d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f776e65723a2043616e6e6f74206265206e756c6c20616464726573730000006044820152606401610600565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fb4f5db40df3aced29e88a4babbc3b46e305e07d34098525d18b1497056e6383890600090a250565b60015473ffffffffffffffffffffffffffffffffffffffff1633146111c5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610600565b6111cf6000612d5a565b565b80611238576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f43616e63656c3a2043616e6e6f7420626520656d7074790000000000000000006044820152606401610600565b60005b8181101561135d573360009081526008602052604090205483838381811061126557611265614536565b9050602002013510156112fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f43616e63656c3a204f72646572206e6f6e6365206c6f776572207468616e206360448201527f757272656e7400000000000000000000000000000000000000000000000000006064820152608401610600565b33600090815260096020526040812060019185858581811061131e5761131e614536565b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055508080611355906144ce565b91505061123b565b503373ffffffffffffffffffffffffffffffffffffffff167ffa0ae5d80fe3763c880a3839fab0294171a6f730d1f82c4cd5392c6f67b4173283836040516113a6929190613f30565b60405180910390a25050565b60015473ffffffffffffffffffffffffffffffffffffffff163314611433576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610600565b600780547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517fe58cd35d27b99ff4118a59d2bb828e4000e9b2998202d1ea939591895136e3f490600090a250565b6002600054141561150f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610600565b60026000556115216020820182613d0d565b801561153757506115356020830183613d0d565b155b61159d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f4f726465723a2057726f6e6720736964657300000000000000000000000000006044820152606401610600565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000166115e5610100830160e08401613c04565b73ffffffffffffffffffffffffffffffffffffffff1614611662576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f4f726465723a2043757272656e6379206d7573742062652057455448000000006044820152606401610600565b6116726040830160208401613c04565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611706576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f4f726465723a2054616b6572206d757374206265207468652073656e646572006044820152606401610600565b348260400135111561176957611764333061172534604087013561437a565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016929190612dd1565b6117d6565b348260400135146117d6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4f726465723a204d73672e76616c756520746f6f2068696768000000000000006044820152606401610600565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561183e57600080fd5b505af1158015611852573d6000803e3d6000fd5b505050505060006118668261082590614391565b90506118728282612202565b6000808061188660e0860160c08701613c04565b73ffffffffffffffffffffffffffffffffffffffff1663865781ca87876040518363ffffffff1660e01b81526004016118c092919061406b565b60606040518083038186803b1580156118d857600080fd5b505afa1580156118ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119109190613d47565b9250925092508261197d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f53747261746567793a20457865637574696f6e20696e76616c696400000000006044820152606401610600565b6001600960006119936040890160208a01613c04565b73ffffffffffffffffffffffffffffffffffffffff168152602080820192909252604090810160009081206101008a01358252909252902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055610a12611a0b60e0870160c08801613c04565b611a1b6060880160408901613c04565b84611a2c60408b0160208c01613c04565b611a3c60408b0160208c01613c04565b8b604001358b6101600135612eb3565b60015473ffffffffffffffffffffffffffffffffffffffff163314611acd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610600565b73ffffffffffffffffffffffffffffffffffffffff8116611b4a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f776e65723a2043616e6e6f74206265206e756c6c20616464726573730000006044820152606401610600565b600580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f80e3874461ebbd918ac3e81da0a92e5e51387d70f337237c9123e48d20e5a50890600090a250565b336000908152600860205260409020548111611c57576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f43616e63656c3a204f72646572206e6f6e6365206c6f776572207468616e206360448201527f757272656e7400000000000000000000000000000000000000000000000000006064820152608401610600565b33600090815260086020526040902054611c74906207a1206142ea565b8110611d02576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f43616e63656c3a2043616e6e6f742063616e63656c206d6f7265206f7264657260448201527f73000000000000000000000000000000000000000000000000000000000000006064820152608401610600565b3360008181526008602052604090819020839055517f1e7178d84f0b0825c65795cd62e7972809ad3aac6917843aaec596161b2c0a9790611d469084815260200190565b60405180910390a250565b60015473ffffffffffffffffffffffffffffffffffffffff163314611dd2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610600565b73ffffffffffffffffffffffffffffffffffffffff8116611e4f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f776e65723a2043616e6e6f74206265206e756c6c20616464726573730000006044820152606401610600565b600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f36e2a376eabc3bc60cb88f29c288f53e36874a95a7f407330ab4f166b090569890600090a250565b60015473ffffffffffffffffffffffffffffffffffffffff163314611f3f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610600565b73ffffffffffffffffffffffffffffffffffffffff8116611fe2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610600565b611feb81612d5a565b50565b60015473ffffffffffffffffffffffffffffffffffffffff16331461206f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610600565b73ffffffffffffffffffffffffffffffffffffffff81166120ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f776e65723a2043616e6e6f74206265206e756c6c20616464726573730000006044820152606401610600565b600680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081179091556040517f205d78ab41afe80bd6b6aaa5d7599d5300ff8690da3ab1302c1b552f7baf7d8c90600090a250565b80516020808301516040808501516060860151608087015160a088015160c089015160e08a01516101008b01516101208c01516101408d01516101608e01516101808f01518051908e01209a5160009e6121e59e7f40261ade532fa1d2c7293df30aaadb9b3c616fae525a0b56d3d411c841a850289e919d919c9b9a999897969594939201613f85565b604051602081830303815290604052805190602001209050919050565b600960006122166040850160208601613c04565b73ffffffffffffffffffffffffffffffffffffffff16815260208082019290925260409081016000908120610100860135825290925290205460ff161580156122b257506008600061226e6040850160208601613c04565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482610100013510155b612318576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f726465723a204d61746368696e67206f7264657220657870697265640000006044820152606401610600565b600061232a6040840160208501613c04565b73ffffffffffffffffffffffffffffffffffffffff1614156123a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4f726465723a20496e76616c6964207369676e657200000000000000000000006044820152606401610600565b60008260a0013511612416576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f4f726465723a20416d6f756e742063616e6e6f742062652030000000000000006044820152606401610600565b61246e8161242a6040850160208601613c04565b61243c6101c086016101a08701613e66565b856101c00135866101e001357f000000000000000000000000000000000000000000000000000000000000000061335f565b6124d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f5369676e61747572653a20496e76616c696400000000000000000000000000006044820152606401610600565b60035473ffffffffffffffffffffffffffffffffffffffff166343b938c5612503610100850160e08601613c04565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260240160206040518083038186803b15801561256757600080fd5b505afa15801561257b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259f9190613d2a565b612605576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f43757272656e63793a204e6f742077686974656c6973746564000000000000006044820152606401610600565b60045473ffffffffffffffffffffffffffffffffffffffff1663999ba27c61263360e0850160c08601613c04565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff909116600482015260240160206040518083038186803b15801561269757600080fd5b505afa1580156126ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126cf9190613d2a565b612735576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f53747261746567793a204e6f742077686974656c6973746564000000000000006044820152606401610600565b5050565b600754829073ffffffffffffffffffffffffffffffffffffffff1615806128ab57506007546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152909116906370a082319060240160206040518083038186803b1580156127c657600080fd5b505afa1580156127da573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127fe9190613e4d565b1580156128ab57506007546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152909116906370a082319060240160206040518083038186803b15801561287157600080fd5b505afa158015612885573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128a99190613e4d565b155b156129225760006128bc8a8561352c565b60025490915073ffffffffffffffffffffffffffffffffffffffff16158015906128e557508015155b15612920576002546129139073ffffffffffffffffffffffffffffffffffffffff8981169189911684612dd1565b61291d818361437a565b91505b505b6005546040517ff4f635fa00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a81166004830152602482018a905260448201869052600092839291169063f4f635fa90606401604080518083038186803b15801561299e57600080fd5b505afa1580156129b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d69190613c6a565b909250905073ffffffffffffffffffffffffffffffffffffffff8216158015906129ff57508015155b15612abc57612a2673ffffffffffffffffffffffffffffffffffffffff8916888484612dd1565b612a30818461437a565b92508173ffffffffffffffffffffffffffffffffffffffff16898b73ffffffffffffffffffffffffffffffffffffffff167f27c4f0403323142b599832f26acd21c74a9e5b809f2215726e244a4ac588cd7d8b85604051612ab392919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b60405180910390a45b50612ac99050838361433d565b612ad58261271061433d565b1015612b3d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f466565733a20486967686572207468616e2065787065637465640000000000006044820152606401610600565b612b5f73ffffffffffffffffffffffffffffffffffffffff8716868684612dd1565b505050505050505050565b6006546040517fcc15949300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152600092169063cc1594939060240160206040518083038186803b158015612bd657600080fd5b505afa158015612bea573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c0e9190613c21565b905073ffffffffffffffffffffffffffffffffffffffff8116612cb3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f5472616e736665723a204e6f204e4654207472616e73666572206d616e61676560448201527f7220617661696c61626c650000000000000000000000000000000000000000006064820152608401610600565b6040517f33f2fa9f00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff87811660048301528681166024830152858116604483015260648201859052608482018490528216906333f2fa9f9060a401600060405180830381600087803b158015612d3a57600080fd5b505af1158015612d4e573d6000803e3d6000fd5b50505050505050505050565b6001805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052612ead9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526135ce565b50505050565b600754829073ffffffffffffffffffffffffffffffffffffffff16158061302557506007546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8781166004830152909116906370a082319060240160206040518083038186803b158015612f4057600080fd5b505afa158015612f54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f789190613e4d565b15801561302557506007546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152909116906370a082319060240160206040518083038186803b158015612feb57600080fd5b505afa158015612fff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130239190613e4d565b155b156130ba576000613036898561352c565b60025490915073ffffffffffffffffffffffffffffffffffffffff161580159061305f57508015155b156130b8576002546130ab9073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081169116836136df565b6130b5818361437a565b91505b505b6005546040517ff4f635fa00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff89811660048301526024820189905260448201869052600092839291169063f4f635fa90606401604080518083038186803b15801561313657600080fd5b505afa15801561314a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316e9190613c6a565b909250905073ffffffffffffffffffffffffffffffffffffffff82161580159061319757508015155b15613293576131dd73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001683836136df565b6131e7818461437a565b92508173ffffffffffffffffffffffffffffffffffffffff16888a73ffffffffffffffffffffffffffffffffffffffff167f27c4f0403323142b599832f26acd21c74a9e5b809f2215726e244a4ac588cd7d7f00000000000000000000000000000000000000000000000000000000000000008560405161328a92919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b60405180910390a45b506132a09050838361433d565b6132ac8261271061433d565b1015613314576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f466565733a20486967686572207468616e2065787065637465640000000000006044820152606401610600565b61335573ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001685836136df565b5050505050505050565b6040517f19010000000000000000000000000000000000000000000000000000000000006020820152602281018290526042810187905260009081906062016040516020818303038152906040528051906020012090506133c0873b151590565b156134e457604080516020810187905280820186905260f888901b7fff000000000000000000000000000000000000000000000000000000000000001660608201528151604181830301815260618201928390527f1626ba7e0000000000000000000000000000000000000000000000000000000090925273ffffffffffffffffffffffffffffffffffffffff891691631626ba7e9161346491859160650161403f565b60206040518083038186803b15801561347c57600080fd5b505afa158015613490573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134b49190613d7e565b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916631626ba7e60e01b14915050613522565b8673ffffffffffffffffffffffffffffffffffffffff1661350782888888613735565b73ffffffffffffffffffffffffffffffffffffffff16149150505b9695505050505050565b6000808373ffffffffffffffffffffffffffffffffffffffff16639dd1cda66040518163ffffffff1660e01b815260040160206040518083038186803b15801561357557600080fd5b505afa158015613589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135ad9190613e4d565b90506127106135bc848361433d565b6135c69190614302565b949350505050565b6000613630826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166139419092919063ffffffff16565b8051909150156136da578080602001905181019061364e9190613d2a565b6136da576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610600565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526136da9084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612e2b565b60007f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08211156137c1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5369676e61747572653a20496e76616c6964207320706172616d6574657200006044820152606401610600565b8360ff16601b14806137d657508360ff16601c145b61383c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f5369676e61747572653a20496e76616c6964207620706172616d6574657200006044820152606401610600565b6040805160008082526020820180845288905260ff871692820192909252606081018590526080810184905260019060a0016020604051602081039080840390855afa158015613890573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116613938576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f5369676e61747572653a20496e76616c6964207369676e6572000000000000006044820152606401610600565b95945050505050565b6060613950848460008561395a565b90505b9392505050565b6060824710156139ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610600565b843b613a54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610600565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613a7d9190613f14565b60006040518083038185875af1925050503d8060008114613aba576040519150601f19603f3d011682016040523d82523d6000602084013e613abf565b606091505b5091509150613acf828286613ada565b979650505050505050565b60608315613ae9575081613953565b825115613af95782518084602001fd5b816040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106009190614058565b8035613b3881614594565b919050565b8035613b38816145b6565b600082601f830112613b5957600080fd5b813567ffffffffffffffff80821115613b7457613b74614565565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715613bba57613bba614565565b81604052838152866020858801011115613bd357600080fd5b836020870160208301376000602085830101528094505050505092915050565b803560ff81168114613b3857600080fd5b600060208284031215613c1657600080fd5b813561395381614594565b600060208284031215613c3357600080fd5b815161395381614594565b60008060408385031215613c5157600080fd5b8235613c5c81614594565b946020939093013593505050565b60008060408385031215613c7d57600080fd5b8251613c8881614594565b6020939093015192949293505050565b60008060208385031215613cab57600080fd5b823567ffffffffffffffff80821115613cc357600080fd5b818501915085601f830112613cd757600080fd5b813581811115613ce657600080fd5b8660208260051b8501011115613cfb57600080fd5b60209290920196919550909350505050565b600060208284031215613d1f57600080fd5b8135613953816145b6565b600060208284031215613d3c57600080fd5b8151613953816145b6565b600080600060608486031215613d5c57600080fd5b8351613d67816145b6565b602085015160409095015190969495509392505050565b600060208284031215613d9057600080fd5b81517fffffffff000000000000000000000000000000000000000000000000000000008116811461395357600080fd5b60008060408385031215613dd357600080fd5b823567ffffffffffffffff80821115613deb57600080fd5b9084019060c08287031215613dff57600080fd5b90925060208401359080821115613e1557600080fd5b5083016102008186031215613e2957600080fd5b809150509250929050565b600060208284031215613e4657600080fd5b5035919050565b600060208284031215613e5f57600080fd5b5051919050565b600060208284031215613e7857600080fd5b61395382613bf3565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60008151808452613ee28160208601602086016144a2565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251613f268184602087016144a2565b9190910192915050565b6020815281602082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115613f6957600080fd5b8260051b80856040850137600092016040019182525092915050565b8e81528d1515602082015273ffffffffffffffffffffffffffffffffffffffff8d811660408301528c1660608201526101c081018b60808301528a60a08301528960c0830152613fed60e083018a73ffffffffffffffffffffffffffffffffffffffff169052565b73ffffffffffffffffffffffffffffffffffffffff88166101008301526101208201969096526101408101949094526101608401929092526101808301526101a0909101529998505050505050505050565b8281526040602082015260006139506040830184613eca565b6020815260006139536020830184613eca565b604081526000610100843561407f816145b6565b15156040840152602085013561409481614594565b73ffffffffffffffffffffffffffffffffffffffff811660608501525060408501356080840152606085013560a0840152608085013560c08401526140dc60a086018661427f565b60c060e08601526140f08386018284613e81565b91505083810360208501526102006141118261410b88613b3d565b15159052565b61411d60208701613b2d565b73ffffffffffffffffffffffffffffffffffffffff16602083015261414460408701613b2d565b73ffffffffffffffffffffffffffffffffffffffff8116604084015250606086013560608301526080860135608083015260a086013560a083015261418b60c08701613b2d565b73ffffffffffffffffffffffffffffffffffffffff1660c08301526141b260e08701613b2d565b73ffffffffffffffffffffffffffffffffffffffff1660e08301528286013592820192909252610120808601359082015261014080860135908201526101608086013590820152610180916142098387018761427f565b828585015261421b8385018284613e81565b94505050506101a061422e818701613bf3565b60ff16908201526101c085810135908201526101e094850135940193909352509092915050565b604051610200810167ffffffffffffffff8111828210171561427957614279614565565b60405290565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126142b457600080fd5b830160208101925035905067ffffffffffffffff8111156142d457600080fd5b8036038313156142e357600080fd5b9250929050565b600082198211156142fd576142fd614507565b500190565b600082614338577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561437557614375614507565b500290565b60008282101561438c5761438c614507565b500390565b600061020082360312156143a457600080fd5b6143ac614255565b6143b583613b3d565b81526143c360208401613b2d565b60208201526143d460408401613b2d565b6040820152606083013560608201526080830135608082015260a083013560a082015261440360c08401613b2d565b60c082015261441460e08401613b2d565b60e082015261010083810135908201526101208084013590820152610140808401359082015261016080840135908201526101808084013567ffffffffffffffff81111561446157600080fd5b61446d36828701613b48565b8284015250506101a0614481818501613bf3565b908201526101c083810135908201526101e092830135928101929092525090565b60005b838110156144bd5781810151838201526020016144a5565b83811115612ead5750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561450057614500614507565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114611feb57600080fd5b8015158114611feb57600080fdfea2646970667358221220a308a3e1165dffc4c43900388e0a6d4d29cde512e58509261fe6eb65dc6454d064736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cancelAllOrdersForSender(uint256)": {
        "params": {
          "minNonce": "minimum user nonce"
        }
      },
      "cancelMultipleMakerOrders(uint256[])": {
        "params": {
          "orderNonces": "array of order nonces"
        }
      },
      "constructor": {
        "params": {
          "_WETH": "wrapped ether address (for other chains, use wrapped native asset)",
          "_currencyManager": "currency manager address",
          "_executionManager": "execution manager address",
          "_protocolFeeRecipient": "protocol fee recipient",
          "_royaltyFeeManager": "royalty fee manager address"
        }
      },
      "isUserOrderNonceExecutedOrCancelled(address,uint256)": {
        "params": {
          "orderNonce": "nonce of the order",
          "user": "address of user"
        }
      },
      "matchAskWithTakerBid((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "params": {
          "makerAsk": "maker ask order",
          "takerBid": "taker bid order"
        }
      },
      "matchAskWithTakerBidUsingETHAndWETH((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "params": {
          "makerAsk": "maker ask order",
          "takerBid": "taker bid order"
        }
      },
      "matchBidWithTakerAsk((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "params": {
          "makerBid": "maker bid order",
          "takerAsk": "taker ask order"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateCurrencyManager(address)": {
        "params": {
          "_currencyManager": "new currency manager address"
        }
      },
      "updateExecutionManager(address)": {
        "params": {
          "_executionManager": "new execution manager address"
        }
      },
      "updatePlatformNFT(address)": {
        "params": {
          "_platformNFT": "new nft for platform nft"
        }
      },
      "updateProtocolFeeRecipient(address)": {
        "params": {
          "_protocolFeeRecipient": "new recipient for protocol fees"
        }
      },
      "updateRoyaltyFeeManager(address)": {
        "params": {
          "_royaltyFeeManager": "new fee manager address"
        }
      },
      "updateTransferSelectorNFT(address)": {
        "params": {
          "_transferSelectorNFT": "new transfer selector address"
        }
      }
    },
    "title": "LooksRareExchange",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelAllOrdersForSender(uint256)": {
        "notice": "Cancel all pending orders for a sender"
      },
      "cancelMultipleMakerOrders(uint256[])": {
        "notice": "Cancel maker orders"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "isUserOrderNonceExecutedOrCancelled(address,uint256)": {
        "notice": "Check whether user order nonce is executed or cancelled"
      },
      "matchAskWithTakerBid((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "notice": "Match a takerBid with a matchAsk"
      },
      "matchAskWithTakerBidUsingETHAndWETH((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "notice": "Match ask with a taker bid order using ETH"
      },
      "matchBidWithTakerAsk((bool,address,uint256,uint256,uint256,bytes),(bool,address,address,uint256,uint256,uint256,address,address,uint256,uint256,uint256,uint256,bytes,uint8,bytes32,bytes32))": {
        "notice": "Match a takerAsk with a makerBid"
      },
      "updateCurrencyManager(address)": {
        "notice": "Update currency manager"
      },
      "updateExecutionManager(address)": {
        "notice": "Update execution manager"
      },
      "updatePlatformNFT(address)": {
        "notice": "Update platform nft"
      },
      "updateProtocolFeeRecipient(address)": {
        "notice": "Update protocol fee and recipient"
      },
      "updateRoyaltyFeeManager(address)": {
        "notice": "Update royalty fee manager"
      },
      "updateTransferSelectorNFT(address)": {
        "notice": "Update transfer selector NFT"
      }
    },
    "notice": "It is the core contract of the LooksRare exchange.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 151,
        "contract": "contracts/LooksRareExchange.sol:LooksRareExchange",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 7,
        "contract": "contracts/LooksRareExchange.sol:LooksRareExchange",
        "label": "_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5025,
        "contract": "contracts/LooksRareExchange.sol:LooksRareExchange",
        "label": "protocolFeeRecipient",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 5028,
        "contract": "contracts/LooksRareExchange.sol:LooksRareExchange",
        "label": "currencyManager",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(ICurrencyManager)7988"
      },
      {
        "astId": 5031,
        "contract": "contracts/LooksRareExchange.sol:LooksRareExchange",
        "label": "executionManager",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IExecutionManager)8025"
      },
      {
        "astId": 5034,
        "contract": "contracts/LooksRareExchange.sol:LooksRareExchange",
        "label": "royaltyFeeManager",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IRoyaltyFeeManager)8131"
      },
      {
        "astId": 5037,
        "contract": "contracts/LooksRareExchange.sol:LooksRareExchange",
        "label": "transferSelectorNFT",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ITransferSelectorNFT)8198"
      },
      {
        "astId": 5040,
        "contract": "contracts/LooksRareExchange.sol:LooksRareExchange",
        "label": "platformNFT",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IERC721)3274"
      },
      {
        "astId": 5044,
        "contract": "contracts/LooksRareExchange.sol:LooksRareExchange",
        "label": "userMinOrderNonce",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5050,
        "contract": "contracts/LooksRareExchange.sol:LooksRareExchange",
        "label": "_isUserOrderNonceExecutedOrCancelled",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ICurrencyManager)7988": {
        "encoding": "inplace",
        "label": "contract ICurrencyManager",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)3274": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_contract(IExecutionManager)8025": {
        "encoding": "inplace",
        "label": "contract IExecutionManager",
        "numberOfBytes": "20"
      },
      "t_contract(IRoyaltyFeeManager)8131": {
        "encoding": "inplace",
        "label": "contract IRoyaltyFeeManager",
        "numberOfBytes": "20"
      },
      "t_contract(ITransferSelectorNFT)8198": {
        "encoding": "inplace",
        "label": "contract ITransferSelectorNFT",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
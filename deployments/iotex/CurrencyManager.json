{
  "address": "0xDa2Aa57c197d113EF36c9C57889a030b5D10754E",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "CurrencyRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "CurrencyWhitelisted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "addCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "isCurrencyWhitelisted",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "currency",
          "type": "address"
        }
      ],
      "name": "removeCurrency",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "viewCountWhitelistedCurrencies",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cursor",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "viewWhitelistedCurrencies",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x3e60e4b6c06582c47963cca871b13d03b2ab07a48e0f282cb2419329d3463bd5",
  "receipt": {
    "to": null,
    "from": "0x0BDf1bc0cdD2E41E62E6BE2F756634FE2b587906",
    "contractAddress": "0xDa2Aa57c197d113EF36c9C57889a030b5D10754E",
    "transactionIndex": 1,
    "gasUsed": "911254",
    "logsBloom": "0x
    "blockHash": "0x12fd3224383a74f655d09825bb5274a40dd62d98f1602a454709c03f062f44a3",
    "transactionHash": "0x3e60e4b6c06582c47963cca871b13d03b2ab07a48e0f282cb2419329d3463bd5",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 22514386,
        "transactionHash": "0x3e60e4b6c06582c47963cca871b13d03b2ab07a48e0f282cb2419329d3463bd5",
        "address": "0xDa2Aa57c197d113EF36c9C57889a030b5D10754E",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000bdf1bc0cdd2e41e62e6be2f756634fe2b587906"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x12fd3224383a74f655d09825bb5274a40dd62d98f1602a454709c03f062f44a3"
      }
    ],
    "blockNumber": 22514386,
    "cumulativeGasUsed": "911254",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9b1f25f60f25cdea13c82d221bb53b0c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"CurrencyRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"CurrencyWhitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"addCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"isCurrencyWhitelisted\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"}],\"name\":\"removeCurrency\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"viewCountWhitelistedCurrencies\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cursor\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"viewWhitelistedCurrencies\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addCurrency(address)\":{\"params\":{\"currency\":\"address of the currency to add\"}},\"isCurrencyWhitelisted(address)\":{\"params\":{\"currency\":\"address of the currency\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeCurrency(address)\":{\"params\":{\"currency\":\"address of the currency to remove\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"viewWhitelistedCurrencies(uint256,uint256)\":{\"params\":{\"cursor\":\"cursor (should start at 0 for first request)\",\"size\":\"size of the response (e.g., 50)\"}}},\"title\":\"CurrencyManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addCurrency(address)\":{\"notice\":\"Add a currency in the system\"},\"isCurrencyWhitelisted(address)\":{\"notice\":\"Returns if a currency is in the system\"},\"removeCurrency(address)\":{\"notice\":\"Remove a currency from the system\"},\"viewCountWhitelistedCurrencies()\":{\"notice\":\"View number of whitelisted currencies\"},\"viewWhitelistedCurrencies(uint256,uint256)\":{\"notice\":\"See whitelisted currencies in the system\"}},\"notice\":\"It allows adding/removing currencies for trading on the LooksRare exchange.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CurrencyManager.sol\":\"CurrencyManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":888888},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastvalue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastvalue;\\n                // Update the index for the moved value\\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        return _values(set._inner);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x9772845c886f87a3aab315f8d6b68aa599027c20f441b131cd4afaf65b588900\",\"license\":\"MIT\"},\"contracts/CurrencyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\nimport {ICurrencyManager} from \\\"./interfaces/ICurrencyManager.sol\\\";\\n\\n/**\\n * @title CurrencyManager\\n * @notice It allows adding/removing currencies for trading on the LooksRare exchange.\\n */\\ncontract CurrencyManager is ICurrencyManager, Ownable {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet private _whitelistedCurrencies;\\n\\n    event CurrencyRemoved(address indexed currency);\\n    event CurrencyWhitelisted(address indexed currency);\\n\\n    /**\\n     * @notice Add a currency in the system\\n     * @param currency address of the currency to add\\n     */\\n    function addCurrency(address currency) external override onlyOwner {\\n        require(!_whitelistedCurrencies.contains(currency), \\\"Currency: Already whitelisted\\\");\\n        _whitelistedCurrencies.add(currency);\\n\\n        emit CurrencyWhitelisted(currency);\\n    }\\n\\n    /**\\n     * @notice Remove a currency from the system\\n     * @param currency address of the currency to remove\\n     */\\n    function removeCurrency(address currency) external override onlyOwner {\\n        require(_whitelistedCurrencies.contains(currency), \\\"Currency: Not whitelisted\\\");\\n        _whitelistedCurrencies.remove(currency);\\n\\n        emit CurrencyRemoved(currency);\\n    }\\n\\n    /**\\n     * @notice Returns if a currency is in the system\\n     * @param currency address of the currency\\n     */\\n    function isCurrencyWhitelisted(address currency) external view override returns (bool) {\\n        return _whitelistedCurrencies.contains(currency);\\n    }\\n\\n    /**\\n     * @notice View number of whitelisted currencies\\n     */\\n    function viewCountWhitelistedCurrencies() external view override returns (uint256) {\\n        return _whitelistedCurrencies.length();\\n    }\\n\\n    /**\\n     * @notice See whitelisted currencies in the system\\n     * @param cursor cursor (should start at 0 for first request)\\n     * @param size size of the response (e.g., 50)\\n     */\\n    function viewWhitelistedCurrencies(uint256 cursor, uint256 size)\\n        external\\n        view\\n        override\\n        returns (address[] memory, uint256)\\n    {\\n        uint256 length = size;\\n\\n        if (length > _whitelistedCurrencies.length() - cursor) {\\n            length = _whitelistedCurrencies.length() - cursor;\\n        }\\n\\n        address[] memory whitelistedCurrencies = new address[](length);\\n\\n        for (uint256 i = 0; i < length; i++) {\\n            whitelistedCurrencies[i] = _whitelistedCurrencies.at(cursor + i);\\n        }\\n\\n        return (whitelistedCurrencies, cursor + length);\\n    }\\n}\\n\",\"keccak256\":\"0x848c1cf384f3355b8351980741169af605d3b7149ed5acbc2c85e16c73dcc200\",\"license\":\"MIT\"},\"contracts/interfaces/ICurrencyManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ICurrencyManager {\\n    function addCurrency(address currency) external;\\n\\n    function removeCurrency(address currency) external;\\n\\n    function isCurrencyWhitelisted(address currency) external view returns (bool);\\n\\n    function viewWhitelistedCurrencies(uint256 cursor, uint256 size) external view returns (address[] memory, uint256);\\n\\n    function viewCountWhitelistedCurrencies() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x84efd5a181382b52be6519fedd476a19e97f78a7d526d852fa0c0653a121538f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610b418061007e6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638ab234b61161005b5780638ab234b6146100f65780638da5cb5b14610109578063c5d3a10714610131578063f2fde38b1461014457600080fd5b80631facfd9c1461008d57806343b938c5146100a8578063715018a6146100cb57806385f39b0a146100d5575b600080fd5b610095610157565b6040519081526020015b60405180910390f35b6100bb6100b6366004610931565b610168565b604051901515815260200161009f565b6100d361017b565b005b6100e86100e3366004610967565b61020d565b60405161009f929190610989565b6100d3610104366004610931565b61030f565b60005460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161009f565b6100d361013f366004610931565b610452565b6100d3610152366004610931565b610594565b600061016360016106c4565b905090565b60006101756001836106ce565b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610201576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61020b6000610700565b565b60606000828461021d60016106c4565b61022791906109ff565b811115610246578461023960016106c4565b61024391906109ff565b90505b60008167ffffffffffffffff81111561026157610261610adc565b60405190808252806020026020018201604052801561028a578160200160208202803683370190505b50905060005b828110156102f6576102ad6102a582896109e7565b600190610775565b8282815181106102bf576102bf610aad565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152806102ee81610a16565b915050610290565b508061030283886109e7565b9350935050509250929050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610390576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101f8565b61039b6001826106ce565b15610402576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f43757272656e63793a20416c72656164792077686974656c697374656400000060448201526064016101f8565b61040d600182610781565b5060405173ffffffffffffffffffffffffffffffffffffffff8216907f3cbf62b327efb2d06d36e16c10a2f5c00cf0568e2b805bd56969b15d2736107890600090a250565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101f8565b6104de6001826106ce565b610544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f43757272656e63793a204e6f742077686974656c69737465640000000000000060448201526064016101f8565b61054f6001826107a3565b5060405173ffffffffffffffffffffffffffffffffffffffff8216907fa40d69111be14f29022626d38310e47cc2d7f4cb728961509c2f65a4bee08c5b90600090a250565b60005473ffffffffffffffffffffffffffffffffffffffff163314610615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101f8565b73ffffffffffffffffffffffffffffffffffffffff81166106b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101f8565b6106c181610700565b50565b6000610175825490565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260018301602052604081205415155b9392505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006106f983836107c5565b60006106f98373ffffffffffffffffffffffffffffffffffffffff84166107ef565b60006106f98373ffffffffffffffffffffffffffffffffffffffff841661083e565b60008260000182815481106107dc576107dc610aad565b9060005260206000200154905092915050565b600081815260018301602052604081205461083657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610175565b506000610175565b600081815260018301602052604081205480156109275760006108626001836109ff565b8554909150600090610876906001906109ff565b90508181146108db57600086600001828154811061089657610896610aad565b90600052602060002001549050808760000184815481106108b9576108b9610aad565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806108ec576108ec610a7e565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610175565b6000915050610175565b60006020828403121561094357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146106f957600080fd5b6000806040838503121561097a57600080fd5b50508035926020909101359150565b604080825283519082018190526000906020906060840190828701845b828110156109d857815173ffffffffffffffffffffffffffffffffffffffff16845292840192908401906001016109a6565b50505092019290925292915050565b600082198211156109fa576109fa610a4f565b500190565b600082821015610a1157610a11610a4f565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a4857610a48610a4f565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212205b42e5eb5a1742b1622a0fc57e133e0ebc130c2c93fb0ae5e6aceb7de3c425da64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638ab234b61161005b5780638ab234b6146100f65780638da5cb5b14610109578063c5d3a10714610131578063f2fde38b1461014457600080fd5b80631facfd9c1461008d57806343b938c5146100a8578063715018a6146100cb57806385f39b0a146100d5575b600080fd5b610095610157565b6040519081526020015b60405180910390f35b6100bb6100b6366004610931565b610168565b604051901515815260200161009f565b6100d361017b565b005b6100e86100e3366004610967565b61020d565b60405161009f929190610989565b6100d3610104366004610931565b61030f565b60005460405173ffffffffffffffffffffffffffffffffffffffff909116815260200161009f565b6100d361013f366004610931565b610452565b6100d3610152366004610931565b610594565b600061016360016106c4565b905090565b60006101756001836106ce565b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610201576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61020b6000610700565b565b60606000828461021d60016106c4565b61022791906109ff565b811115610246578461023960016106c4565b61024391906109ff565b90505b60008167ffffffffffffffff81111561026157610261610adc565b60405190808252806020026020018201604052801561028a578160200160208202803683370190505b50905060005b828110156102f6576102ad6102a582896109e7565b600190610775565b8282815181106102bf576102bf610aad565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152806102ee81610a16565b915050610290565b508061030283886109e7565b9350935050509250929050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610390576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101f8565b61039b6001826106ce565b15610402576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f43757272656e63793a20416c72656164792077686974656c697374656400000060448201526064016101f8565b61040d600182610781565b5060405173ffffffffffffffffffffffffffffffffffffffff8216907f3cbf62b327efb2d06d36e16c10a2f5c00cf0568e2b805bd56969b15d2736107890600090a250565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101f8565b6104de6001826106ce565b610544576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601960248201527f43757272656e63793a204e6f742077686974656c69737465640000000000000060448201526064016101f8565b61054f6001826107a3565b5060405173ffffffffffffffffffffffffffffffffffffffff8216907fa40d69111be14f29022626d38310e47cc2d7f4cb728961509c2f65a4bee08c5b90600090a250565b60005473ffffffffffffffffffffffffffffffffffffffff163314610615576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101f8565b73ffffffffffffffffffffffffffffffffffffffff81166106b8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101f8565b6106c181610700565b50565b6000610175825490565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260018301602052604081205415155b9392505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006106f983836107c5565b60006106f98373ffffffffffffffffffffffffffffffffffffffff84166107ef565b60006106f98373ffffffffffffffffffffffffffffffffffffffff841661083e565b60008260000182815481106107dc576107dc610aad565b9060005260206000200154905092915050565b600081815260018301602052604081205461083657508154600181810184556000848152602080822090930184905584548482528286019093526040902091909155610175565b506000610175565b600081815260018301602052604081205480156109275760006108626001836109ff565b8554909150600090610876906001906109ff565b90508181146108db57600086600001828154811061089657610896610aad565b90600052602060002001549050808760000184815481106108b9576108b9610aad565b6000918252602080832090910192909255918252600188019052604090208390555b85548690806108ec576108ec610a7e565b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610175565b6000915050610175565b60006020828403121561094357600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146106f957600080fd5b6000806040838503121561097a57600080fd5b50508035926020909101359150565b604080825283519082018190526000906020906060840190828701845b828110156109d857815173ffffffffffffffffffffffffffffffffffffffff16845292840192908401906001016109a6565b50505092019290925292915050565b600082198211156109fa576109fa610a4f565b500190565b600082821015610a1157610a11610a4f565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610a4857610a48610a4f565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212205b42e5eb5a1742b1622a0fc57e133e0ebc130c2c93fb0ae5e6aceb7de3c425da64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addCurrency(address)": {
        "params": {
          "currency": "address of the currency to add"
        }
      },
      "isCurrencyWhitelisted(address)": {
        "params": {
          "currency": "address of the currency"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeCurrency(address)": {
        "params": {
          "currency": "address of the currency to remove"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "viewWhitelistedCurrencies(uint256,uint256)": {
        "params": {
          "cursor": "cursor (should start at 0 for first request)",
          "size": "size of the response (e.g., 50)"
        }
      }
    },
    "title": "CurrencyManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addCurrency(address)": {
        "notice": "Add a currency in the system"
      },
      "isCurrencyWhitelisted(address)": {
        "notice": "Returns if a currency is in the system"
      },
      "removeCurrency(address)": {
        "notice": "Remove a currency from the system"
      },
      "viewCountWhitelistedCurrencies()": {
        "notice": "View number of whitelisted currencies"
      },
      "viewWhitelistedCurrencies(uint256,uint256)": {
        "notice": "See whitelisted currencies in the system"
      }
    },
    "notice": "It allows adding/removing currencies for trading on the LooksRare exchange.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/CurrencyManager.sol:CurrencyManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4611,
        "contract": "contracts/CurrencyManager.sol:CurrencyManager",
        "label": "_whitelistedCurrencies",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(AddressSet)4304_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)4304_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 4303,
            "contract": "contracts/CurrencyManager.sol:CurrencyManager",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)4003_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)4003_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3998,
            "contract": "contracts/CurrencyManager.sol:CurrencyManager",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 4002,
            "contract": "contracts/CurrencyManager.sol:CurrencyManager",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
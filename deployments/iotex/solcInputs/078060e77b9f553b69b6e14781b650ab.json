{
  "language": "Solidity",
  "sources": {
    "contracts/CurrencyManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport {ICurrencyManager} from \"./interfaces/ICurrencyManager.sol\";\n\n/**\n * @title CurrencyManager\n * @notice It allows adding/removing currencies for trading on the LooksRare exchange.\n */\ncontract CurrencyManager is ICurrencyManager, Ownable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    EnumerableSet.AddressSet private _whitelistedCurrencies;\n\n    event CurrencyRemoved(address indexed currency);\n    event CurrencyWhitelisted(address indexed currency);\n\n    /**\n     * @notice Add a currency in the system\n     * @param currency address of the currency to add\n     */\n    function addCurrency(address currency) external override onlyOwner {\n        require(!_whitelistedCurrencies.contains(currency), \"Currency: Already whitelisted\");\n        _whitelistedCurrencies.add(currency);\n\n        emit CurrencyWhitelisted(currency);\n    }\n\n    /**\n     * @notice Remove a currency from the system\n     * @param currency address of the currency to remove\n     */\n    function removeCurrency(address currency) external override onlyOwner {\n        require(_whitelistedCurrencies.contains(currency), \"Currency: Not whitelisted\");\n        _whitelistedCurrencies.remove(currency);\n\n        emit CurrencyRemoved(currency);\n    }\n\n    /**\n     * @notice Returns if a currency is in the system\n     * @param currency address of the currency\n     */\n    function isCurrencyWhitelisted(address currency) external view override returns (bool) {\n        return _whitelistedCurrencies.contains(currency);\n    }\n\n    /**\n     * @notice View number of whitelisted currencies\n     */\n    function viewCountWhitelistedCurrencies() external view override returns (uint256) {\n        return _whitelistedCurrencies.length();\n    }\n\n    /**\n     * @notice See whitelisted currencies in the system\n     * @param cursor cursor (should start at 0 for first request)\n     * @param size size of the response (e.g., 50)\n     */\n    function viewWhitelistedCurrencies(uint256 cursor, uint256 size)\n        external\n        view\n        override\n        returns (address[] memory, uint256)\n    {\n        uint256 length = size;\n\n        if (length > _whitelistedCurrencies.length() - cursor) {\n            length = _whitelistedCurrencies.length() - cursor;\n        }\n\n        address[] memory whitelistedCurrencies = new address[](length);\n\n        for (uint256 i = 0; i < length; i++) {\n            whitelistedCurrencies[i] = _whitelistedCurrencies.at(cursor + i);\n        }\n\n        return (whitelistedCurrencies, cursor + length);\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/structs/EnumerableSet.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for managing\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\n * types.\n *\n * Sets have the following properties:\n *\n * - Elements are added, removed, and checked for existence in constant time\n * (O(1)).\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\n *\n * ```\n * contract Example {\n *     // Add the library methods\n *     using EnumerableSet for EnumerableSet.AddressSet;\n *\n *     // Declare a set state variable\n *     EnumerableSet.AddressSet private mySet;\n * }\n * ```\n *\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\n * and `uint256` (`UintSet`) are supported.\n */\nlibrary EnumerableSet {\n    // To implement this library for multiple types with as little code\n    // repetition as possible, we write it in terms of a generic Set type with\n    // bytes32 values.\n    // The Set implementation uses private functions, and user-facing\n    // implementations (such as AddressSet) are just wrappers around the\n    // underlying Set.\n    // This means that we can only create new EnumerableSets for types that fit\n    // in bytes32.\n\n    struct Set {\n        // Storage of set values\n        bytes32[] _values;\n        // Position of the value in the `values` array, plus 1 because index 0\n        // means a value is not in the set.\n        mapping(bytes32 => uint256) _indexes;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function _add(Set storage set, bytes32 value) private returns (bool) {\n        if (!_contains(set, value)) {\n            set._values.push(value);\n            // The value is stored at length-1, but we add 1 to all indexes\n            // and use 0 as a sentinel value\n            set._indexes[value] = set._values.length;\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\n        // We read and store the value's index to prevent multiple reads from the same storage slot\n        uint256 valueIndex = set._indexes[value];\n\n        if (valueIndex != 0) {\n            // Equivalent to contains(set, value)\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\n            // This modifies the order of the array, as noted in {at}.\n\n            uint256 toDeleteIndex = valueIndex - 1;\n            uint256 lastIndex = set._values.length - 1;\n\n            if (lastIndex != toDeleteIndex) {\n                bytes32 lastvalue = set._values[lastIndex];\n\n                // Move the last value to the index where the value to delete is\n                set._values[toDeleteIndex] = lastvalue;\n                // Update the index for the moved value\n                set._indexes[lastvalue] = valueIndex; // Replace lastvalue's index to valueIndex\n            }\n\n            // Delete the slot where the moved value was stored\n            set._values.pop();\n\n            // Delete the index for the deleted slot\n            delete set._indexes[value];\n\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\n        return set._indexes[value] != 0;\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function _length(Set storage set) private view returns (uint256) {\n        return set._values.length;\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\n        return set._values[index];\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function _values(Set storage set) private view returns (bytes32[] memory) {\n        return set._values;\n    }\n\n    // Bytes32Set\n\n    struct Bytes32Set {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _add(set._inner, value);\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\n        return _remove(set._inner, value);\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\n        return _contains(set._inner, value);\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(Bytes32Set storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\n        return _at(set._inner, index);\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\n        return _values(set._inner);\n    }\n\n    // AddressSet\n\n    struct AddressSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(AddressSet storage set, address value) internal returns (bool) {\n        return _add(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(AddressSet storage set, address value) internal returns (bool) {\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\n    }\n\n    /**\n     * @dev Returns the number of values in the set. O(1).\n     */\n    function length(AddressSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\n        return address(uint160(uint256(_at(set._inner, index))));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(AddressSet storage set) internal view returns (address[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        address[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n\n    // UintSet\n\n    struct UintSet {\n        Set _inner;\n    }\n\n    /**\n     * @dev Add a value to a set. O(1).\n     *\n     * Returns true if the value was added to the set, that is if it was not\n     * already present.\n     */\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\n        return _add(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Removes a value from a set. O(1).\n     *\n     * Returns true if the value was removed from the set, that is if it was\n     * present.\n     */\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\n        return _remove(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns true if the value is in the set. O(1).\n     */\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\n        return _contains(set._inner, bytes32(value));\n    }\n\n    /**\n     * @dev Returns the number of values on the set. O(1).\n     */\n    function length(UintSet storage set) internal view returns (uint256) {\n        return _length(set._inner);\n    }\n\n    /**\n     * @dev Returns the value stored at position `index` in the set. O(1).\n     *\n     * Note that there are no guarantees on the ordering of values inside the\n     * array, and it may change when more values are added or removed.\n     *\n     * Requirements:\n     *\n     * - `index` must be strictly less than {length}.\n     */\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\n        return uint256(_at(set._inner, index));\n    }\n\n    /**\n     * @dev Return the entire set in an array\n     *\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\n     */\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\n        bytes32[] memory store = _values(set._inner);\n        uint256[] memory result;\n\n        assembly {\n            result := store\n        }\n\n        return result;\n    }\n}\n"
    },
    "contracts/interfaces/ICurrencyManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICurrencyManager {\n    function addCurrency(address currency) external;\n\n    function removeCurrency(address currency) external;\n\n    function isCurrencyWhitelisted(address currency) external view returns (bool);\n\n    function viewWhitelistedCurrencies(uint256 cursor, uint256 size) external view returns (address[] memory, uint256);\n\n    function viewCountWhitelistedCurrencies() external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/orderValidation/OrderValidatorV1B.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// OZ dependencies\nimport {IERC1271} from \"@openzeppelin/contracts/interfaces/IERC1271.sol\";\nimport {IERC2981} from \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC165, IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\n// LooksRare libraries and validation code constants\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\nimport \"./ValidationCodeConstants.sol\";\n\n// LooksRare interfaces\nimport {ICurrencyManager} from \"../interfaces/ICurrencyManager.sol\";\nimport {IExecutionManager} from \"../interfaces/IExecutionManager.sol\";\nimport {IExecutionStrategy} from \"../interfaces/IExecutionStrategy.sol\";\nimport {IRoyaltyFeeRegistry} from \"../interfaces/IRoyaltyFeeRegistry.sol\";\nimport {ITransferManagerNFT} from \"../interfaces/ITransferManagerNFT.sol\";\nimport {ITransferSelectorNFTExtended, IRoyaltyFeeManagerV1BExtended} from \"./ExtendedInterfaces.sol\";\n\n// LooksRareExchange\nimport {LooksRareExchange} from \"../LooksRareExchange.sol\";\n\n/**\n * @title OrderValidatorV1B\n * @notice This contract is used to check the validity of a maker order in the LooksRareProtocol (v1).\n *         It performs checks for:\n *         1. Nonce-related issues (e.g., nonce executed or cancelled)\n *         2. Amount-related issues (e.g. order amount being 0)\n *         3. Signature-related issues\n *         4. Whitelist-related issues (i.e., currency or strategy not whitelisted)\n *         5. Fee-related issues (e.g., minPercentageToAsk too high due to changes in royalties)\n *         6. Timestamp-related issues (e.g., order expired)\n *         7. Transfer-related issues for ERC20/ERC721/ERC1155 (approvals and balances)\n */\ncontract OrderValidatorV1B {\n    using OrderTypes for OrderTypes.MakerOrder;\n\n    // Number of distinct criteria groups checked to evaluate the validity\n    uint256 public constant CRITERIA_GROUPS = 7;\n\n    // ERC721 interfaceID\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    // ERC1155 interfaceID\n    bytes4 public constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\n\n    // ERC2981 interfaceId\n    bytes4 public constant INTERFACE_ID_ERC2981 = 0x2a55205a;\n\n    // EIP1271 magic value\n    bytes4 public constant MAGIC_VALUE_EIP1271 = 0x1626ba7e;\n\n    // TransferManager ERC721\n    address public immutable TRANSFER_MANAGER_ERC721;\n\n    // TransferManager ERC1155\n    address public immutable TRANSFER_MANAGER_ERC1155;\n\n    // Domain separator from LooksRare Exchange\n    bytes32 public immutable DOMAIN_SEPARATOR;\n\n    // Standard royalty fee\n    uint256 public immutable STANDARD_ROYALTY_FEE;\n\n    // Currency Manager\n    ICurrencyManager public immutable currencyManager;\n\n    // Execution Manager\n    IExecutionManager public immutable executionManager;\n\n    // Royalty Fee Registry\n    IRoyaltyFeeRegistry public immutable royaltyFeeRegistry;\n\n    // Transfer Selector\n    ITransferSelectorNFTExtended public immutable transferSelectorNFT;\n\n    // LooksRare Exchange\n    LooksRareExchange public immutable looksRareExchange;\n\n    /**\n     * @notice Constructor\n     * @param _looksRareExchange address of the LooksRare exchange (v1)\n     */\n    constructor(address _looksRareExchange) {\n        looksRareExchange = LooksRareExchange(_looksRareExchange);\n        DOMAIN_SEPARATOR = LooksRareExchange(_looksRareExchange).DOMAIN_SEPARATOR();\n\n        TRANSFER_MANAGER_ERC721 = ITransferSelectorNFTExtended(\n            address(LooksRareExchange(_looksRareExchange).transferSelectorNFT())\n        ).TRANSFER_MANAGER_ERC721();\n\n        TRANSFER_MANAGER_ERC1155 = ITransferSelectorNFTExtended(\n            address(LooksRareExchange(_looksRareExchange).transferSelectorNFT())\n        ).TRANSFER_MANAGER_ERC1155();\n\n        currencyManager = LooksRareExchange(_looksRareExchange).currencyManager();\n        executionManager = LooksRareExchange(_looksRareExchange).executionManager();\n        transferSelectorNFT = ITransferSelectorNFTExtended(\n            address(LooksRareExchange(_looksRareExchange).transferSelectorNFT())\n        );\n\n        royaltyFeeRegistry = IRoyaltyFeeManagerV1BExtended(\n            address(LooksRareExchange(_looksRareExchange).royaltyFeeManager())\n        ).royaltyFeeRegistry();\n\n        STANDARD_ROYALTY_FEE = IRoyaltyFeeManagerV1BExtended(\n            address(LooksRareExchange(_looksRareExchange).royaltyFeeManager())\n        ).STANDARD_ROYALTY_FEE();\n    }\n\n    /**\n     * @notice Check the validities for an array of maker orders\n     * @param makerOrders Array of maker order structs\n     * @return validationCodes Array of validation code arrays for the maker orders\n     */\n    function checkMultipleOrderValidities(OrderTypes.MakerOrder[] calldata makerOrders)\n        public\n        view\n        returns (uint256[][] memory validationCodes)\n    {\n        validationCodes = new uint256[][](makerOrders.length);\n\n        for (uint256 i; i < makerOrders.length; ) {\n            validationCodes[i] = checkOrderValidity(makerOrders[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Check the validity of a maker order\n     * @param makerOrder Maker order struct\n     * @return validationCodes Array of validations code for each group\n     */\n    function checkOrderValidity(OrderTypes.MakerOrder calldata makerOrder)\n        public\n        view\n        returns (uint256[] memory validationCodes)\n    {\n        validationCodes = new uint256[](CRITERIA_GROUPS);\n        validationCodes[0] = checkValidityNonces(makerOrder);\n        validationCodes[1] = checkValidityAmounts(makerOrder);\n        validationCodes[2] = checkValiditySignature(makerOrder);\n        validationCodes[3] = checkValidityWhitelists(makerOrder);\n        validationCodes[4] = checkValidityMinPercentageToAsk(makerOrder);\n        validationCodes[5] = checkValidityTimestamps(makerOrder);\n        validationCodes[6] = checkValidityApprovalsAndBalances(makerOrder);\n    }\n\n    /**\n     * @notice Check the validity for user nonces\n     * @param makerOrder Maker order struct\n     * @return validationCode Validation code\n     */\n    function checkValidityNonces(OrderTypes.MakerOrder calldata makerOrder)\n        public\n        view\n        returns (uint256 validationCode)\n    {\n        if (looksRareExchange.isUserOrderNonceExecutedOrCancelled(makerOrder.signer, makerOrder.nonce))\n            return NONCE_EXECUTED_OR_CANCELLED;\n        if (makerOrder.nonce < looksRareExchange.userMinOrderNonce(makerOrder.signer))\n            return NONCE_BELOW_MIN_ORDER_NONCE;\n    }\n\n    /**\n     * @notice Check the validity of amounts\n     * @param makerOrder Maker order struct\n     * @return validationCode Validation code\n     */\n    function checkValidityAmounts(OrderTypes.MakerOrder calldata makerOrder)\n        public\n        pure\n        returns (uint256 validationCode)\n    {\n        if (makerOrder.amount == 0) return ORDER_AMOUNT_CANNOT_BE_ZERO;\n    }\n\n    /**\n     * @notice Check the validity of a signature\n     * @param makerOrder Maker order struct\n     * @return validationCode Validation code\n     */\n    function checkValiditySignature(OrderTypes.MakerOrder calldata makerOrder)\n        public\n        view\n        returns (uint256 validationCode)\n    {\n        if (makerOrder.signer == address(0)) return MAKER_SIGNER_IS_NULL_SIGNER;\n\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR, makerOrder.hash()));\n\n        if (!Address.isContract(makerOrder.signer)) {\n            return _validateEOA(digest, makerOrder.signer, makerOrder.v, makerOrder.r, makerOrder.s);\n        } else {\n            return _validateERC1271(digest, makerOrder.signer, makerOrder.v, makerOrder.r, makerOrder.s);\n        }\n    }\n\n    /**\n     * @notice Check the validity for currency/strategy whitelists\n     * @param makerOrder Maker order struct\n     * @return validationCode Validation code\n     */\n    function checkValidityWhitelists(OrderTypes.MakerOrder calldata makerOrder)\n        public\n        view\n        returns (uint256 validationCode)\n    {\n        // Verify whether the currency is whitelisted\n        if (!currencyManager.isCurrencyWhitelisted(makerOrder.currency)) return CURRENCY_NOT_WHITELISTED;\n\n        // Verify whether the strategy is whitelisted\n        if (!executionManager.isStrategyWhitelisted(makerOrder.strategy)) return STRATEGY_NOT_WHITELISTED;\n    }\n\n    /**\n     * @notice Check the validity of min percentage to ask\n     * @param makerOrder Maker order struct\n     * @return validationCode Validation code\n     */\n    function checkValidityMinPercentageToAsk(OrderTypes.MakerOrder calldata makerOrder)\n        public\n        view\n        returns (uint256 validationCode)\n    {\n        // Return if order is bid since there is no protection for minPercentageToAsk\n        if (!makerOrder.isOrderAsk) return ORDER_EXPECTED_TO_BE_VALID;\n\n        uint256 minNetPriceToAsk = (makerOrder.minPercentageToAsk * makerOrder.price);\n\n        uint256 finalSellerAmount = makerOrder.price;\n        uint256 protocolFee = (makerOrder.price * IExecutionStrategy(makerOrder.strategy).viewProtocolFee()) / 10000;\n        finalSellerAmount -= protocolFee;\n\n        if ((finalSellerAmount * 10000) < minNetPriceToAsk) return MIN_NET_RATIO_ABOVE_PROTOCOL_FEE;\n\n        uint256 royaltyFeeAmount = (makerOrder.price * STANDARD_ROYALTY_FEE) / 10000;\n\n        (address receiver, ) = royaltyFeeRegistry.royaltyInfo(makerOrder.collection, makerOrder.price);\n\n        if (receiver != address(0)) {\n            // Royalty registry logic\n            finalSellerAmount -= royaltyFeeAmount;\n            if ((finalSellerAmount * 10000) < minNetPriceToAsk)\n                return MIN_NET_RATIO_ABOVE_ROYALTY_FEE_REGISTRY_AND_PROTOCOL_FEE;\n        } else {\n            // ERC2981 logic\n            if (IERC165(makerOrder.collection).supportsInterface(INTERFACE_ID_ERC2981)) {\n                (bool success, bytes memory data) = makerOrder.collection.staticcall(\n                    abi.encodeWithSelector(IERC2981.royaltyInfo.selector, makerOrder.tokenId, makerOrder.price)\n                );\n\n                if (!success) {\n                    return MISSING_ROYALTY_INFO_FUNCTION_ERC2981;\n                } else {\n                    (receiver, ) = abi.decode(data, (address, uint256));\n                }\n\n                if (receiver != address(0)) {\n                    finalSellerAmount -= royaltyFeeAmount;\n                    if ((finalSellerAmount * 10000) < minNetPriceToAsk)\n                        return MIN_NET_RATIO_ABOVE_ROYALTY_FEE_ERC2981_AND_PROTOCOL_FEE;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Check the validity of order timestamps\n     * @param makerOrder Maker order struct\n     * @return validationCode Validation code\n     */\n    function checkValidityTimestamps(OrderTypes.MakerOrder calldata makerOrder)\n        public\n        view\n        returns (uint256 validationCode)\n    {\n        if (makerOrder.startTime > block.timestamp) return TOO_EARLY_TO_EXECUTE_ORDER;\n        if (makerOrder.endTime < block.timestamp) return TOO_LATE_TO_EXECUTE_ORDER;\n    }\n\n    /**\n     * @notice Check the validity of approvals and balances\n     * @param makerOrder Maker order struct\n     * @return validationCode Validation code\n     */\n    function checkValidityApprovalsAndBalances(OrderTypes.MakerOrder calldata makerOrder)\n        public\n        view\n        returns (uint256 validationCode)\n    {\n        if (makerOrder.isOrderAsk) {\n            return\n                _validateNFTApprovals(makerOrder.collection, makerOrder.signer, makerOrder.tokenId, makerOrder.amount);\n        } else {\n            return _validateERC20(makerOrder.currency, makerOrder.signer, makerOrder.price);\n        }\n    }\n\n    /**\n     * @notice Check the validity of NFT approvals and balances\n     * @param collection Collection address\n     * @param user User address\n     * @param tokenId TokenId\n     * @param amount Amount\n     */\n    function _validateNFTApprovals(\n        address collection,\n        address user,\n        uint256 tokenId,\n        uint256 amount\n    ) internal view returns (uint256 validationCode) {\n        address transferManager;\n\n        if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721)) {\n            transferManager = TRANSFER_MANAGER_ERC721;\n        } else if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC1155)) {\n            transferManager = TRANSFER_MANAGER_ERC1155;\n        } else {\n            transferManager = transferSelectorNFT.transferManagerSelectorForCollection(collection);\n        }\n\n        if (transferManager == address(0)) return NO_TRANSFER_MANAGER_AVAILABLE_FOR_COLLECTION;\n\n        if (transferManager == TRANSFER_MANAGER_ERC721) {\n            return _validateERC721AndEquivalents(collection, user, transferManager, tokenId);\n        } else if (transferManager == TRANSFER_MANAGER_ERC1155) {\n            return _validateERC1155(collection, user, transferManager, tokenId, amount);\n        } else {\n            return CUSTOM_TRANSFER_MANAGER;\n        }\n    }\n\n    /**\n     * @notice Check the validity of ERC20 approvals and balances that are required to process the maker bid order\n     * @param currency Currency address\n     * @param user User address\n     * @param price Price (defined by the maker order)\n     */\n    function _validateERC20(\n        address currency,\n        address user,\n        uint256 price\n    ) internal view returns (uint256 validationCode) {\n        if (IERC20(currency).balanceOf(user) < price) return ERC20_BALANCE_INFERIOR_TO_PRICE;\n        if (IERC20(currency).allowance(user, address(looksRareExchange)) < price)\n            return ERC20_APPROVAL_INFERIOR_TO_PRICE;\n    }\n\n    /**\n     * @notice Check the validity of ERC721 approvals and balances required to process the maker ask order\n     * @param collection Collection address\n     * @param user User address\n     * @param transferManager Transfer manager address\n     * @param tokenId TokenId\n     */\n    function _validateERC721AndEquivalents(\n        address collection,\n        address user,\n        address transferManager,\n        uint256 tokenId\n    ) internal view returns (uint256 validationCode) {\n        // 1. Verify tokenId is owned by user and catch revertion if ERC721 ownerOf fails\n        (bool success, bytes memory data) = collection.staticcall(\n            abi.encodeWithSelector(IERC721.ownerOf.selector, tokenId)\n        );\n\n        if (!success) return ERC721_TOKEN_ID_DOES_NOT_EXIST;\n        if (abi.decode(data, (address)) != user) return ERC721_TOKEN_ID_NOT_IN_BALANCE;\n\n        // 2. Verify if collection is approved by transfer manager\n        (success, data) = collection.staticcall(\n            abi.encodeWithSelector(IERC721.isApprovedForAll.selector, user, transferManager)\n        );\n\n        bool isApprovedAll;\n        if (success) {\n            isApprovedAll = abi.decode(data, (bool));\n        }\n\n        if (!isApprovedAll) {\n            // 3. If collection is not approved by transfer manager, try to see if it is approved individually\n            (success, data) = collection.staticcall(abi.encodeWithSelector(IERC721.getApproved.selector, tokenId));\n\n            address approvedAddress;\n            if (success) {\n                approvedAddress = abi.decode(data, (address));\n            }\n\n            if (approvedAddress != transferManager) return ERC721_NO_APPROVAL_FOR_ALL_OR_TOKEN_ID;\n        }\n    }\n\n    /**\n     * @notice Check the validity of ERC1155 approvals and balances required to process the maker ask order\n     * @param collection Collection address\n     * @param user User address\n     * @param transferManager Transfer manager address\n     * @param tokenId TokenId\n     * @param amount Amount\n     */\n    function _validateERC1155(\n        address collection,\n        address user,\n        address transferManager,\n        uint256 tokenId,\n        uint256 amount\n    ) internal view returns (uint256 validationCode) {\n        (bool success, bytes memory data) = collection.staticcall(\n            abi.encodeWithSelector(IERC1155.balanceOf.selector, user, tokenId)\n        );\n\n        if (!success) return ERC1155_BALANCE_OF_DOES_NOT_EXIST;\n        if (abi.decode(data, (uint256)) < amount) return ERC1155_BALANCE_OF_TOKEN_ID_INFERIOR_TO_AMOUNT;\n\n        (success, data) = collection.staticcall(\n            abi.encodeWithSelector(IERC1155.isApprovedForAll.selector, user, transferManager)\n        );\n\n        if (!success) return ERC1155_IS_APPROVED_FOR_ALL_DOES_NOT_EXIST;\n        if (!abi.decode(data, (bool))) return ERC1155_NO_APPROVAL_FOR_ALL;\n    }\n\n    /**\n     * @notice Check the validity of EOA maker order\n     * @param digest Digest\n     * @param targetSigner Expected signer address to confirm message validity\n     * @param v V parameter (27 or 28)\n     * @param r R parameter\n     * @param s S parameter\n     */\n    function _validateEOA(\n        bytes32 digest,\n        address targetSigner,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (uint256 validationCode) {\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0)\n            return INVALID_S_PARAMETER_EOA;\n\n        if (v != 27 && v != 28) return INVALID_V_PARAMETER_EOA;\n\n        address signer = ecrecover(digest, v, r, s);\n        if (signer == address(0)) return NULL_SIGNER_EOA;\n        if (signer != targetSigner) return WRONG_SIGNER_EOA;\n    }\n\n    /**\n     * @notice Check the validity for EIP1271 maker order\n     * @param digest Digest\n     * @param targetSigner Expected signer address to confirm message validity\n     * @param v V parameter (27 or 28)\n     * @param r R parameter\n     * @param s S parameter\n     */\n    function _validateERC1271(\n        bytes32 digest,\n        address targetSigner,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal view returns (uint256 validationCode) {\n        (bool success, bytes memory data) = targetSigner.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, digest, abi.encodePacked(r, s, v))\n        );\n\n        if (!success) return MISSING_IS_VALID_SIGNATURE_FUNCTION_EIP1271;\n        bytes4 magicValue = abi.decode(data, (bytes4));\n\n        if (magicValue != MAGIC_VALUE_EIP1271) return SIGNATURE_INVALID_EIP1271;\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC1271.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC1271.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC1271 standard signature validation method for\n * contracts as defined in https://eips.ethereum.org/EIPS/eip-1271[ERC-1271].\n *\n * _Available since v4.1._\n */\ninterface IERC1271 {\n    /**\n     * @dev Should return whether the signature provided is valid for the provided data\n     * @param hash      Hash of the data to be signed\n     * @param signature Signature byte array associated with _data\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view returns (bytes4 magicValue);\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC2981.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC2981.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Interface for the NFT Royalty Standard\n */\ninterface IERC2981 is IERC165 {\n    /**\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\n     * @param tokenId - the NFT asset queried for royalty information\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\n     * @return receiver - address of who should be sent the royalty payment\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\n     */\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\n        external\n        view\n        returns (address receiver, uint256 royaltyAmount);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\n        external\n        view\n        returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata amounts,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "contracts/libraries/OrderTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/**\n * @title OrderTypes\n * @notice This library contains order types for the LooksRare exchange.\n */\nlibrary OrderTypes {\n    // keccak256(\"MakerOrder(bool isOrderAsk,address signer,address collection,uint256 price,uint256 tokenId,uint256 amount,address strategy,address currency,uint256 nonce,uint256 startTime,uint256 endTime,uint256 minPercentageToAsk,bytes params)\")\n    bytes32 internal constant MAKER_ORDER_HASH = 0x40261ade532fa1d2c7293df30aaadb9b3c616fae525a0b56d3d411c841a85028;\n\n    struct MakerOrder {\n        bool isOrderAsk; // true --> ask / false --> bid\n        address signer; // signer of the maker order\n        address collection; // collection address\n        uint256 price; // price (used as )\n        uint256 tokenId; // id of the token\n        uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\n        address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\n        address currency; // currency (e.g., WETH)\n        uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\n        uint256 startTime; // startTime in timestamp\n        uint256 endTime; // endTime in timestamp\n        uint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\n        bytes params; // additional parameters\n        uint8 v; // v: parameter (27 or 28)\n        bytes32 r; // r: parameter\n        bytes32 s; // s: parameter\n    }\n\n    struct TakerOrder {\n        bool isOrderAsk; // true --> ask / false --> bid\n        address taker; // msg.sender\n        uint256 price; // final price for the purchase\n        uint256 tokenId;\n        uint256 minPercentageToAsk; // // slippage protection (9000 --> 90% of the final price must return to ask)\n        bytes params; // other params (e.g., tokenId)\n    }\n\n    function hash(MakerOrder memory makerOrder) internal pure returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    MAKER_ORDER_HASH,\n                    makerOrder.isOrderAsk,\n                    makerOrder.signer,\n                    makerOrder.collection,\n                    makerOrder.price,\n                    makerOrder.tokenId,\n                    makerOrder.amount,\n                    makerOrder.strategy,\n                    makerOrder.currency,\n                    makerOrder.nonce,\n                    makerOrder.startTime,\n                    makerOrder.endTime,\n                    makerOrder.minPercentageToAsk,\n                    keccak256(makerOrder.params)\n                )\n            );\n    }\n}\n"
    },
    "contracts/orderValidation/ValidationCodeConstants.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nuint256 constant ORDER_EXPECTED_TO_BE_VALID = 0;\nuint256 constant NONCE_EXECUTED_OR_CANCELLED = 101;\nuint256 constant NONCE_BELOW_MIN_ORDER_NONCE = 102;\nuint256 constant ORDER_AMOUNT_CANNOT_BE_ZERO = 201;\nuint256 constant MAKER_SIGNER_IS_NULL_SIGNER = 301;\nuint256 constant INVALID_S_PARAMETER_EOA = 302;\nuint256 constant INVALID_V_PARAMETER_EOA = 303;\nuint256 constant NULL_SIGNER_EOA = 304;\nuint256 constant WRONG_SIGNER_EOA = 305;\nuint256 constant SIGNATURE_INVALID_EIP1271 = 311;\nuint256 constant MISSING_IS_VALID_SIGNATURE_FUNCTION_EIP1271 = 312;\nuint256 constant CURRENCY_NOT_WHITELISTED = 401;\nuint256 constant STRATEGY_NOT_WHITELISTED = 402;\nuint256 constant MIN_NET_RATIO_ABOVE_PROTOCOL_FEE = 501;\nuint256 constant MIN_NET_RATIO_ABOVE_ROYALTY_FEE_REGISTRY_AND_PROTOCOL_FEE = 502;\nuint256 constant MIN_NET_RATIO_ABOVE_ROYALTY_FEE_ERC2981_AND_PROTOCOL_FEE = 503;\nuint256 constant MISSING_ROYALTY_INFO_FUNCTION_ERC2981 = 504;\nuint256 constant TOO_EARLY_TO_EXECUTE_ORDER = 601;\nuint256 constant TOO_LATE_TO_EXECUTE_ORDER = 602;\nuint256 constant NO_TRANSFER_MANAGER_AVAILABLE_FOR_COLLECTION = 701;\nuint256 constant CUSTOM_TRANSFER_MANAGER = 702;\nuint256 constant ERC20_BALANCE_INFERIOR_TO_PRICE = 711;\nuint256 constant ERC20_APPROVAL_INFERIOR_TO_PRICE = 712;\nuint256 constant ERC721_TOKEN_ID_DOES_NOT_EXIST = 721;\nuint256 constant ERC721_TOKEN_ID_NOT_IN_BALANCE = 722;\nuint256 constant ERC721_NO_APPROVAL_FOR_ALL_OR_TOKEN_ID = 723;\nuint256 constant ERC1155_BALANCE_OF_DOES_NOT_EXIST = 731;\nuint256 constant ERC1155_BALANCE_OF_TOKEN_ID_INFERIOR_TO_AMOUNT = 732;\nuint256 constant ERC1155_IS_APPROVED_FOR_ALL_DOES_NOT_EXIST = 733;\nuint256 constant ERC1155_NO_APPROVAL_FOR_ALL = 734;\n"
    },
    "contracts/interfaces/IExecutionManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IExecutionManager {\n    function addStrategy(address strategy) external;\n\n    function removeStrategy(address strategy) external;\n\n    function isStrategyWhitelisted(address strategy) external view returns (bool);\n\n    function viewWhitelistedStrategies(uint256 cursor, uint256 size) external view returns (address[] memory, uint256);\n\n    function viewCountWhitelistedStrategies() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IExecutionStrategy.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\n\ninterface IExecutionStrategy {\n    function canExecuteTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\n        external\n        view\n        returns (\n            bool,\n            uint256,\n            uint256\n        );\n\n    function canExecuteTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\n        external\n        view\n        returns (\n            bool,\n            uint256,\n            uint256\n        );\n\n    function viewProtocolFee() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IRoyaltyFeeRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IRoyaltyFeeRegistry {\n    function updateRoyaltyInfoForCollection(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external;\n\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external;\n\n    function royaltyInfo(address collection, uint256 amount) external view returns (address, uint256);\n\n    function royaltyFeeInfoCollection(address collection)\n        external\n        view\n        returns (\n            address,\n            address,\n            uint256\n        );\n}\n"
    },
    "contracts/interfaces/ITransferManagerNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ITransferManagerNFT {\n    function transferNonFungibleToken(\n        address collection,\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 amount\n    ) external;\n}\n"
    },
    "contracts/orderValidation/ExtendedInterfaces.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IRoyaltyFeeRegistry} from \"../interfaces/IRoyaltyFeeRegistry.sol\";\nimport {IRoyaltyFeeManager} from \"../interfaces/IRoyaltyFeeManager.sol\";\nimport {ITransferSelectorNFT} from \"../interfaces/ITransferSelectorNFT.sol\";\n\ninterface IRoyaltyFeeManagerExtended is IRoyaltyFeeManager {\n    function royaltyFeeRegistry() external view returns (IRoyaltyFeeRegistry);\n}\n\ninterface IRoyaltyFeeManagerV1BExtended is IRoyaltyFeeManager {\n    function STANDARD_ROYALTY_FEE() external view returns (uint256);\n\n    function royaltyFeeRegistry() external view returns (IRoyaltyFeeRegistry);\n}\n\ninterface ITransferSelectorNFTExtended is ITransferSelectorNFT {\n    function TRANSFER_MANAGER_ERC721() external view returns (address);\n\n    function TRANSFER_MANAGER_ERC1155() external view returns (address);\n\n    function transferManagerSelectorForCollection(address collection) external view returns (address);\n}\n"
    },
    "contracts/LooksRareExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// OpenZeppelin contracts\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ReentrancyGuard} from \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport {IERC20, SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\n// LooksRare interfaces\nimport {ICurrencyManager} from \"./interfaces/ICurrencyManager.sol\";\nimport {IExecutionManager} from \"./interfaces/IExecutionManager.sol\";\nimport {IExecutionStrategy} from \"./interfaces/IExecutionStrategy.sol\";\nimport {IRoyaltyFeeManager} from \"./interfaces/IRoyaltyFeeManager.sol\";\nimport {ILooksRareExchange} from \"./interfaces/ILooksRareExchange.sol\";\nimport {ITransferManagerNFT} from \"./interfaces/ITransferManagerNFT.sol\";\nimport {ITransferSelectorNFT} from \"./interfaces/ITransferSelectorNFT.sol\";\nimport {IWETH} from \"./interfaces/IWETH.sol\";\n\n// LooksRare libraries\nimport {OrderTypes} from \"./libraries/OrderTypes.sol\";\nimport {SignatureChecker} from \"./libraries/SignatureChecker.sol\";\n\n/**\n * @title LooksRareExchange\n * @notice It is the core contract of the LooksRare exchange.\nLOOKSRARELOOKSRARELOOKSRLOOKSRARELOOKSRARELOOKSRARELOOKSRARELOOKSRLOOKSRARELOOKSRARELOOKSR\nLOOKSRARELOOKSRARELOOKSRAR'''''''''''''''''''''''''''''''''''OOKSRLOOKSRARELOOKSRARELOOKSR\nLOOKSRARELOOKSRARELOOKS:.                                        .;OOKSRARELOOKSRARELOOKSR\nLOOKSRARELOOKSRARELOO,.                                            .,KSRARELOOKSRARELOOKSR\nLOOKSRARELOOKSRAREL'                ..',;:LOOKS::;,'..                'RARELOOKSRARELOOKSR\nLOOKSRARELOOKSRAR.              .,:LOOKSRARELOOKSRARELO:,.              .RELOOKSRARELOOKSR\nLOOKSRARELOOKS:.             .;RARELOOKSRARELOOKSRARELOOKSl;.             .:OOKSRARELOOKSR\nLOOKSRARELOO;.            .'OKSRARELOOKSRARELOOKSRARELOOKSRARE'.            .;KSRARELOOKSR\nLOOKSRAREL,.            .,LOOKSRARELOOK:;;:\"\"\"\":;;;lELOOKSRARELO,.            .,RARELOOKSR\nLOOKSRAR.             .;okLOOKSRAREx:.              .;OOKSRARELOOK;.             .RELOOKSR\nLOOKS:.             .:dOOOLOOKSRARE'      .''''..     .OKSRARELOOKSR:.             .LOOKSR\nLOx;.             .cKSRARELOOKSRAR'     'LOOKSRAR'     .KSRARELOOKSRARc..            .OKSR\nL;.             .cxOKSRARELOOKSRAR.    .LOOKS.RARE'     ;kRARELOOKSRARExc.             .;R\nLO'             .;oOKSRARELOOKSRAl.    .LOOKS.RARE.     :kRARELOOKSRAREo;.             'SR\nLOOK;.            .,KSRARELOOKSRAx,     .;LOOKSR;.     .oSRARELOOKSRAo,.            .;OKSR\nLOOKSk:.            .'RARELOOKSRARd;.      ....       'oOOOOOOOOOOxc'.            .:LOOKSR\nLOOKSRARc.             .:dLOOKSRAREko;.            .,lxOOOOOOOOOd:.             .ARELOOKSR\nLOOKSRARELo'             .;oOKSRARELOOxoc;,....,;:ldkOOOOOOOOkd;.             'SRARELOOKSR\nLOOKSRARELOOd,.            .,lSRARELOOKSRARELOOKSRARELOOKSRkl,.            .,OKSRARELOOKSR\nLOOKSRARELOOKSx;.            ..;oxELOOKSRARELOOKSRARELOkxl:..            .:LOOKSRARELOOKSR\nLOOKSRARELOOKSRARc.              .':cOKSRARELOOKSRALOc;'.              .ARELOOKSRARELOOKSR\nLOOKSRARELOOKSRARELl'                 ...'',,,,''...                 'SRARELOOKSRARELOOKSR\nLOOKSRARELOOKSRARELOOo,.                                          .,OKSRARELOOKSRARELOOKSR\nLOOKSRARELOOKSRARELOOKSx;.                                      .;xOOKSRARELOOKSRARELOOKSR\nLOOKSRARELOOKSRARELOOKSRLO:.                                  .:SRLOOKSRARELOOKSRARELOOKSR\nLOOKSRARELOOKSRARELOOKSRLOOKl.                              .lOKSRLOOKSRARELOOKSRARELOOKSR\nLOOKSRARELOOKSRARELOOKSRLOOKSRo'.                        .'oLOOKSRLOOKSRARELOOKSRARELOOKSR\nLOOKSRARELOOKSRARELOOKSRLOOKSRARd;.                    .;xRELOOKSRLOOKSRARELOOKSRARELOOKSR\nLOOKSRARELOOKSRARELOOKSRLOOKSRARELO:.                .:kRARELOOKSRLOOKSRARELOOKSRARELOOKSR\nLOOKSRARELOOKSRARELOOKSRLOOKSRARELOOKl.            .cOKSRARELOOKSRLOOKSRARELOOKSRARELOOKSR\nLOOKSRARELOOKSRARELOOKSRLOOKSRARELOOKSRo'        'oLOOKSRARELOOKSRLOOKSRARELOOKSRARELOOKSR\nLOOKSRARELOOKSRARELOOKSRLOOKSRARELOOKSRARE,.  .,dRELOOKSRARELOOKSRLOOKSRARELOOKSRARELOOKSR\nLOOKSRARELOOKSRARELOOKSRLOOKSRARELOOKSRARELOOKSRARELOOKSRARELOOKSRLOOKSRARELOOKSRARELOOKSR\n */\ncontract LooksRareExchange is ILooksRareExchange, ReentrancyGuard, Ownable {\n    using SafeERC20 for IERC20;\n\n    using OrderTypes for OrderTypes.MakerOrder;\n    using OrderTypes for OrderTypes.TakerOrder;\n\n    address public immutable WETH;\n    bytes32 public immutable DOMAIN_SEPARATOR;\n\n    address public protocolFeeRecipient;\n\n    ICurrencyManager public currencyManager;\n    IExecutionManager public executionManager;\n    IRoyaltyFeeManager public royaltyFeeManager;\n    ITransferSelectorNFT public transferSelectorNFT;\n\n    IERC721 public immutable platformNFT;\n\n    mapping(address => uint256) public userMinOrderNonce;\n    mapping(address => mapping(uint256 => bool)) private _isUserOrderNonceExecutedOrCancelled;\n\n    event CancelAllOrders(address indexed user, uint256 newMinNonce);\n    event CancelMultipleOrders(address indexed user, uint256[] orderNonces);\n    event NewCurrencyManager(address indexed currencyManager);\n    event NewExecutionManager(address indexed executionManager);\n    event NewProtocolFeeRecipient(address indexed protocolFeeRecipient);\n    event NewRoyaltyFeeManager(address indexed royaltyFeeManager);\n    event NewTransferSelectorNFT(address indexed transferSelectorNFT);\n\n    event RoyaltyPayment(\n        address indexed collection,\n        uint256 indexed tokenId,\n        address indexed royaltyRecipient,\n        address currency,\n        uint256 amount\n    );\n\n    event TakerAsk(\n        bytes32 orderHash, // bid hash of the maker order\n        uint256 orderNonce, // user order nonce\n        address indexed taker, // sender address for the taker ask order\n        address indexed maker, // maker address of the initial bid order\n        address indexed strategy, // strategy that defines the execution\n        address currency, // currency address\n        address collection, // collection address\n        uint256 tokenId, // tokenId transferred\n        uint256 amount, // amount of tokens transferred\n        uint256 price // final transacted price\n    );\n\n    event TakerBid(\n        bytes32 orderHash, // ask hash of the maker order\n        uint256 orderNonce, // user order nonce\n        address indexed taker, // sender address for the taker bid order\n        address indexed maker, // maker address of the initial ask order\n        address indexed strategy, // strategy that defines the execution\n        address currency, // currency address\n        address collection, // collection address\n        uint256 tokenId, // tokenId transferred\n        uint256 amount, // amount of tokens transferred\n        uint256 price // final transacted price\n    );\n\n    /**\n     * @notice Constructor\n     * @param _currencyManager currency manager address\n     * @param _executionManager execution manager address\n     * @param _royaltyFeeManager royalty fee manager address\n     * @param _WETH wrapped ether address (for other chains, use wrapped native asset)\n     * @param _protocolFeeRecipient protocol fee recipient\n     */\n    constructor(\n        address _currencyManager,\n        address _executionManager,\n        address _royaltyFeeManager,\n        address _WETH,\n        address _protocolFeeRecipient,\n        address _platformNFT\n    ) {\n        // Calculate the domain separator\n        DOMAIN_SEPARATOR = keccak256(\n            abi.encode(\n                0x8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f, // keccak256(\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\")\n                0xda9101ba92939daf4bb2e18cd5f942363b9297fbc3232c9dd964abb1fb70ed71, // keccak256(\"LooksRareExchange\")\n                0xc89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6, // keccak256(bytes(\"1\")) for versionId = 1\n                block.chainid,\n                address(this)\n            )\n        );\n\n        currencyManager = ICurrencyManager(_currencyManager);\n        executionManager = IExecutionManager(_executionManager);\n        royaltyFeeManager = IRoyaltyFeeManager(_royaltyFeeManager);\n        WETH = _WETH;\n        protocolFeeRecipient = _protocolFeeRecipient;\n        platformNFT = IERC721(_platformNFT);\n    }\n\n    /**\n     * @notice Cancel all pending orders for a sender\n     * @param minNonce minimum user nonce\n     */\n    function cancelAllOrdersForSender(uint256 minNonce) external {\n        require(minNonce > userMinOrderNonce[msg.sender], \"Cancel: Order nonce lower than current\");\n        require(minNonce < userMinOrderNonce[msg.sender] + 500000, \"Cancel: Cannot cancel more orders\");\n        userMinOrderNonce[msg.sender] = minNonce;\n\n        emit CancelAllOrders(msg.sender, minNonce);\n    }\n\n    /**\n     * @notice Cancel maker orders\n     * @param orderNonces array of order nonces\n     */\n    function cancelMultipleMakerOrders(uint256[] calldata orderNonces) external {\n        require(orderNonces.length > 0, \"Cancel: Cannot be empty\");\n\n        for (uint256 i = 0; i < orderNonces.length; i++) {\n            require(orderNonces[i] >= userMinOrderNonce[msg.sender], \"Cancel: Order nonce lower than current\");\n            _isUserOrderNonceExecutedOrCancelled[msg.sender][orderNonces[i]] = true;\n        }\n\n        emit CancelMultipleOrders(msg.sender, orderNonces);\n    }\n\n    /**\n     * @notice Match ask with a taker bid order using ETH\n     * @param takerBid taker bid order\n     * @param makerAsk maker ask order\n     */\n    function matchAskWithTakerBidUsingETHAndWETH(\n        OrderTypes.TakerOrder calldata takerBid,\n        OrderTypes.MakerOrder calldata makerAsk\n    ) external payable override nonReentrant {\n        require((makerAsk.isOrderAsk) && (!takerBid.isOrderAsk), \"Order: Wrong sides\");\n        require(makerAsk.currency == WETH, \"Order: Currency must be WETH\");\n        require(msg.sender == takerBid.taker, \"Order: Taker must be the sender\");\n\n        // If not enough ETH to cover the price, use WETH\n        if (takerBid.price > msg.value) {\n            IERC20(WETH).safeTransferFrom(msg.sender, address(this), (takerBid.price - msg.value));\n        } else {\n            require(takerBid.price == msg.value, \"Order: Msg.value too high\");\n        }\n\n        // Wrap ETH sent to this contract\n        IWETH(WETH).deposit{value: msg.value}();\n\n        // Check the maker ask order\n        bytes32 askHash = makerAsk.hash();\n        _validateOrder(makerAsk, askHash);\n\n        // Retrieve execution parameters\n        (bool isExecutionValid, uint256 tokenId, uint256 amount) = IExecutionStrategy(makerAsk.strategy)\n            .canExecuteTakerBid(takerBid, makerAsk);\n\n        require(isExecutionValid, \"Strategy: Execution invalid\");\n\n        // Update maker ask order status to true (prevents replay)\n        _isUserOrderNonceExecutedOrCancelled[makerAsk.signer][makerAsk.nonce] = true;\n\n        // Execution part 1/2\n        _transferFeesAndFundsWithWETH(\n            makerAsk.strategy,\n            makerAsk.collection,\n            tokenId,\n            takerBid.taker,\n            makerAsk.signer,\n            takerBid.price,\n            makerAsk.minPercentageToAsk\n        );\n\n        // Execution part 2/2\n        _transferNonFungibleToken(makerAsk.collection, makerAsk.signer, takerBid.taker, tokenId, amount);\n\n        emit TakerBid(\n            askHash,\n            makerAsk.nonce,\n            takerBid.taker,\n            makerAsk.signer,\n            makerAsk.strategy,\n            makerAsk.currency,\n            makerAsk.collection,\n            tokenId,\n            amount,\n            takerBid.price\n        );\n    }\n\n    /**\n     * @notice Match a takerBid with a matchAsk\n     * @param takerBid taker bid order\n     * @param makerAsk maker ask order\n     */\n    function matchAskWithTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\n        external\n        override\n        nonReentrant\n    {\n        require((makerAsk.isOrderAsk) && (!takerBid.isOrderAsk), \"Order: Wrong sides\");\n        require(msg.sender == takerBid.taker, \"Order: Taker must be the sender\");\n\n        // Check the maker ask order\n        bytes32 askHash = makerAsk.hash();\n        _validateOrder(makerAsk, askHash);\n\n        (bool isExecutionValid, uint256 tokenId, uint256 amount) = IExecutionStrategy(makerAsk.strategy)\n            .canExecuteTakerBid(takerBid, makerAsk);\n\n        require(isExecutionValid, \"Strategy: Execution invalid\");\n\n        // Update maker ask order status to true (prevents replay)\n        _isUserOrderNonceExecutedOrCancelled[makerAsk.signer][makerAsk.nonce] = true;\n\n        // Execution part 1/2\n        _transferFeesAndFunds(\n            makerAsk.strategy,\n            makerAsk.collection,\n            tokenId,\n            makerAsk.currency,\n            msg.sender,\n            makerAsk.signer,\n            takerBid.price,\n            makerAsk.minPercentageToAsk\n        );\n\n        // Execution part 2/2\n        _transferNonFungibleToken(makerAsk.collection, makerAsk.signer, takerBid.taker, tokenId, amount);\n\n        emit TakerBid(\n            askHash,\n            makerAsk.nonce,\n            takerBid.taker,\n            makerAsk.signer,\n            makerAsk.strategy,\n            makerAsk.currency,\n            makerAsk.collection,\n            tokenId,\n            amount,\n            takerBid.price\n        );\n    }\n\n    /**\n     * @notice Match a takerAsk with a makerBid\n     * @param takerAsk taker ask order\n     * @param makerBid maker bid order\n     */\n    function matchBidWithTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\n        external\n        override\n        nonReentrant\n    {\n        require((!makerBid.isOrderAsk) && (takerAsk.isOrderAsk), \"Order: Wrong sides\");\n        require(msg.sender == takerAsk.taker, \"Order: Taker must be the sender\");\n\n        // Check the maker bid order\n        bytes32 bidHash = makerBid.hash();\n        _validateOrder(makerBid, bidHash);\n\n        (bool isExecutionValid, uint256 tokenId, uint256 amount) = IExecutionStrategy(makerBid.strategy)\n            .canExecuteTakerAsk(takerAsk, makerBid);\n\n        require(isExecutionValid, \"Strategy: Execution invalid\");\n\n        // Update maker bid order status to true (prevents replay)\n        _isUserOrderNonceExecutedOrCancelled[makerBid.signer][makerBid.nonce] = true;\n\n        // Execution part 1/2\n        _transferNonFungibleToken(makerBid.collection, msg.sender, makerBid.signer, tokenId, amount);\n\n        // Execution part 2/2\n        _transferFeesAndFunds(\n            makerBid.strategy,\n            makerBid.collection,\n            tokenId,\n            makerBid.currency,\n            makerBid.signer,\n            takerAsk.taker,\n            takerAsk.price,\n            takerAsk.minPercentageToAsk\n        );\n\n        emit TakerAsk(\n            bidHash,\n            makerBid.nonce,\n            takerAsk.taker,\n            makerBid.signer,\n            makerBid.strategy,\n            makerBid.currency,\n            makerBid.collection,\n            tokenId,\n            amount,\n            takerAsk.price\n        );\n    }\n\n    /**\n     * @notice Update currency manager\n     * @param _currencyManager new currency manager address\n     */\n    function updateCurrencyManager(address _currencyManager) external onlyOwner {\n        require(_currencyManager != address(0), \"Owner: Cannot be null address\");\n        currencyManager = ICurrencyManager(_currencyManager);\n        emit NewCurrencyManager(_currencyManager);\n    }\n\n    /**\n     * @notice Update execution manager\n     * @param _executionManager new execution manager address\n     */\n    function updateExecutionManager(address _executionManager) external onlyOwner {\n        require(_executionManager != address(0), \"Owner: Cannot be null address\");\n        executionManager = IExecutionManager(_executionManager);\n        emit NewExecutionManager(_executionManager);\n    }\n\n    /**\n     * @notice Update protocol fee and recipient\n     * @param _protocolFeeRecipient new recipient for protocol fees\n     */\n    function updateProtocolFeeRecipient(address _protocolFeeRecipient) external onlyOwner {\n        protocolFeeRecipient = _protocolFeeRecipient;\n        emit NewProtocolFeeRecipient(_protocolFeeRecipient);\n    }\n\n    /**\n     * @notice Update royalty fee manager\n     * @param _royaltyFeeManager new fee manager address\n     */\n    function updateRoyaltyFeeManager(address _royaltyFeeManager) external onlyOwner {\n        require(_royaltyFeeManager != address(0), \"Owner: Cannot be null address\");\n        royaltyFeeManager = IRoyaltyFeeManager(_royaltyFeeManager);\n        emit NewRoyaltyFeeManager(_royaltyFeeManager);\n    }\n\n    /**\n     * @notice Update transfer selector NFT\n     * @param _transferSelectorNFT new transfer selector address\n     */\n    function updateTransferSelectorNFT(address _transferSelectorNFT) external onlyOwner {\n        require(_transferSelectorNFT != address(0), \"Owner: Cannot be null address\");\n        transferSelectorNFT = ITransferSelectorNFT(_transferSelectorNFT);\n\n        emit NewTransferSelectorNFT(_transferSelectorNFT);\n    }\n\n    /**\n     * @notice Check whether user order nonce is executed or cancelled\n     * @param user address of user\n     * @param orderNonce nonce of the order\n     */\n    function isUserOrderNonceExecutedOrCancelled(address user, uint256 orderNonce) external view returns (bool) {\n        return _isUserOrderNonceExecutedOrCancelled[user][orderNonce];\n    }\n\n    /**\n     * @notice Transfer fees and funds to royalty recipient, protocol, and seller\n     * @param strategy address of the execution strategy\n     * @param collection non fungible token address for the transfer\n     * @param tokenId tokenId\n     * @param currency currency being used for the purchase (e.g., WETH/USDC)\n     * @param from sender of the funds\n     * @param to seller's recipient\n     * @param amount amount being transferred (in currency)\n     * @param minPercentageToAsk minimum percentage of the gross amount that goes to ask\n     */\n    function _transferFeesAndFunds(\n        address strategy,\n        address collection,\n        uint256 tokenId,\n        address currency,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 minPercentageToAsk\n    ) internal {\n        // Initialize the final amount that is transferred to seller\n        uint256 finalSellerAmount = amount;\n\n        // 1. Protocol fee\n        if (platformNFT.balanceOf(from) == 0 && platformNFT.balanceOf(to) == 0) {\n            uint256 protocolFeeAmount = _calculateProtocolFee(strategy, amount);\n\n            // Check if the protocol fee is different than 0 for this strategy\n            if ((protocolFeeRecipient != address(0)) && (protocolFeeAmount != 0)) {\n                IERC20(currency).safeTransferFrom(from, protocolFeeRecipient, protocolFeeAmount);\n                finalSellerAmount -= protocolFeeAmount;\n            }\n        }\n\n        // 2. Royalty fee\n        {\n            (address royaltyFeeRecipient, uint256 royaltyFeeAmount) = royaltyFeeManager\n                .calculateRoyaltyFeeAndGetRecipient(collection, tokenId, amount);\n\n            // Check if there is a royalty fee and that it is different to 0\n            if ((royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)) {\n                IERC20(currency).safeTransferFrom(from, royaltyFeeRecipient, royaltyFeeAmount);\n                finalSellerAmount -= royaltyFeeAmount;\n\n                emit RoyaltyPayment(collection, tokenId, royaltyFeeRecipient, currency, royaltyFeeAmount);\n            }\n        }\n\n        require((finalSellerAmount * 10000) >= (minPercentageToAsk * amount), \"Fees: Higher than expected\");\n\n        // 3. Transfer final amount (post-fees) to seller\n        {\n            IERC20(currency).safeTransferFrom(from, to, finalSellerAmount);\n        }\n    }\n\n    /**\n     * @notice Transfer fees and funds to royalty recipient, protocol, and seller\n     * @param strategy address of the execution strategy\n     * @param collection non fungible token address for the transfer\n     * @param tokenId tokenId\n     * @param to seller's recipient\n     * @param amount amount being transferred (in currency)\n     * @param minPercentageToAsk minimum percentage of the gross amount that goes to ask\n     */\n    function _transferFeesAndFundsWithWETH(\n        address strategy,\n        address collection,\n        uint256 tokenId,\n        address from,\n        address to,\n        uint256 amount,\n        uint256 minPercentageToAsk\n    ) internal {\n        // Initialize the final amount that is transferred to seller\n        uint256 finalSellerAmount = amount;\n\n        // 1. Protocol fee\n        if (platformNFT.balanceOf(from) == 0 && platformNFT.balanceOf(to) == 0) {\n            uint256 protocolFeeAmount = _calculateProtocolFee(strategy, amount);\n\n            // Check if the protocol fee is different than 0 for this strategy\n            if ((protocolFeeRecipient != address(0)) && (protocolFeeAmount != 0)) {\n                IERC20(WETH).safeTransfer(protocolFeeRecipient, protocolFeeAmount);\n                finalSellerAmount -= protocolFeeAmount;\n            }\n        }\n\n        // 2. Royalty fee\n        {\n            (address royaltyFeeRecipient, uint256 royaltyFeeAmount) = royaltyFeeManager\n                .calculateRoyaltyFeeAndGetRecipient(collection, tokenId, amount);\n\n            // Check if there is a royalty fee and that it is different to 0\n            if ((royaltyFeeRecipient != address(0)) && (royaltyFeeAmount != 0)) {\n                IERC20(WETH).safeTransfer(royaltyFeeRecipient, royaltyFeeAmount);\n                finalSellerAmount -= royaltyFeeAmount;\n\n                emit RoyaltyPayment(collection, tokenId, royaltyFeeRecipient, address(WETH), royaltyFeeAmount);\n            }\n        }\n\n        require((finalSellerAmount * 10000) >= (minPercentageToAsk * amount), \"Fees: Higher than expected\");\n\n        // 3. Transfer final amount (post-fees) to seller\n        {\n            IERC20(WETH).safeTransfer(to, finalSellerAmount);\n        }\n    }\n\n    /**\n     * @notice Transfer NFT\n     * @param collection address of the token collection\n     * @param from address of the sender\n     * @param to address of the recipient\n     * @param tokenId tokenId\n     * @param amount amount of tokens (1 for ERC721, 1+ for ERC1155)\n     * @dev For ERC721, amount is not used\n     */\n    function _transferNonFungibleToken(\n        address collection,\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 amount\n    ) internal {\n        // Retrieve the transfer manager address\n        address transferManager = transferSelectorNFT.checkTransferManagerForToken(collection);\n\n        // If no transfer manager found, it returns address(0)\n        require(transferManager != address(0), \"Transfer: No NFT transfer manager available\");\n\n        // If one is found, transfer the token\n        ITransferManagerNFT(transferManager).transferNonFungibleToken(collection, from, to, tokenId, amount);\n    }\n\n    /**\n     * @notice Calculate protocol fee for an execution strategy\n     * @param executionStrategy strategy\n     * @param amount amount to transfer\n     */\n    function _calculateProtocolFee(address executionStrategy, uint256 amount) internal view returns (uint256) {\n        uint256 protocolFee = IExecutionStrategy(executionStrategy).viewProtocolFee();\n        return (protocolFee * amount) / 10000;\n    }\n\n    /**\n     * @notice Verify the validity of the maker order\n     * @param makerOrder maker order\n     * @param orderHash computed hash for the order\n     */\n    function _validateOrder(OrderTypes.MakerOrder calldata makerOrder, bytes32 orderHash) internal view {\n        // Verify whether order nonce has expired\n        require(\n            (!_isUserOrderNonceExecutedOrCancelled[makerOrder.signer][makerOrder.nonce]) &&\n                (makerOrder.nonce >= userMinOrderNonce[makerOrder.signer]),\n            \"Order: Matching order expired\"\n        );\n\n        // Verify the signer is not address(0)\n        require(makerOrder.signer != address(0), \"Order: Invalid signer\");\n\n        // Verify the amount is not 0\n        require(makerOrder.amount > 0, \"Order: Amount cannot be 0\");\n\n        // Verify the validity of the signature\n        require(\n            SignatureChecker.verify(\n                orderHash,\n                makerOrder.signer,\n                makerOrder.v,\n                makerOrder.r,\n                makerOrder.s,\n                DOMAIN_SEPARATOR\n            ),\n            \"Signature: Invalid\"\n        );\n\n        // Verify whether the currency is whitelisted\n        require(currencyManager.isCurrencyWhitelisted(makerOrder.currency), \"Currency: Not whitelisted\");\n\n        // Verify whether strategy can be executed\n        require(executionManager.isStrategyWhitelisted(makerOrder.strategy), \"Strategy: Not whitelisted\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/introspection/IERC165.sol\";\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "contracts/interfaces/IRoyaltyFeeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IRoyaltyFeeManager {\n    function calculateRoyaltyFeeAndGetRecipient(\n        address collection,\n        uint256 tokenId,\n        uint256 amount\n    ) external view returns (address, uint256);\n}\n"
    },
    "contracts/interfaces/ITransferSelectorNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ITransferSelectorNFT {\n    function checkTransferManagerForToken(address collection) external view returns (address);\n}\n"
    },
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        // On the first call to nonReentrant, _notEntered will be true\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n\n        _;\n\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "contracts/interfaces/ILooksRareExchange.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\n\ninterface ILooksRareExchange {\n    function matchAskWithTakerBidUsingETHAndWETH(\n        OrderTypes.TakerOrder calldata takerBid,\n        OrderTypes.MakerOrder calldata makerAsk\n    ) external payable;\n\n    function matchAskWithTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\n        external;\n\n    function matchBidWithTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\n        external;\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: GNU\npragma solidity >=0.5.0;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function withdraw(uint256) external;\n}\n"
    },
    "contracts/libraries/SignatureChecker.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {IERC1271} from \"@openzeppelin/contracts/interfaces/IERC1271.sol\";\n\n/**\n * @title SignatureChecker\n * @notice This library allows verification of signatures for both EOAs and contracts.\n */\nlibrary SignatureChecker {\n    /**\n     * @notice Recovers the signer of a signature (for EOA)\n     * @param hash the hash containing the signed mesage\n     * @param v parameter (27 or 28). This prevents maleability since the public key recovery equation has two possible solutions.\n     * @param r parameter\n     * @param s parameter\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        // https://ethereum.stackexchange.com/questions/83174/is-it-best-practice-to-check-signature-malleability-in-ecrecover\n        // https://crypto.iacr.org/2019/affevents/wac/medias/Heninger-BiasedNonceSense.pdf\n        require(\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n            \"Signature: Invalid s parameter\"\n        );\n\n        require(v == 27 || v == 28, \"Signature: Invalid v parameter\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"Signature: Invalid signer\");\n\n        return signer;\n    }\n\n    /**\n     * @notice Returns whether the signer matches the signed message\n     * @param hash the hash containing the signed mesage\n     * @param signer the signer address to confirm message validity\n     * @param v parameter (27 or 28)\n     * @param r parameter\n     * @param s parameter\n     * @param domainSeparator paramer to prevent signature being executed in other chains and environments\n     * @return true --> if valid // false --> if invalid\n     */\n    function verify(\n        bytes32 hash,\n        address signer,\n        uint8 v,\n        bytes32 r,\n        bytes32 s,\n        bytes32 domainSeparator\n    ) internal view returns (bool) {\n        // \\x19\\x01 is the standardized encoding prefix\n        // https://eips.ethereum.org/EIPS/eip-712#specification\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, hash));\n        if (Address.isContract(signer)) {\n            // 0x1626ba7e is the interfaceId for signature contracts (see IERC1271)\n            return IERC1271(signer).isValidSignature(digest, abi.encodePacked(r, s, v)) == 0x1626ba7e;\n        } else {\n            return recover(digest, v, r, s) == signer;\n        }\n    }\n}\n"
    },
    "contracts/orderValidation/OrderValidatorV1.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// OZ dependencies\nimport {IERC1271} from \"@openzeppelin/contracts/interfaces/IERC1271.sol\";\nimport {IERC2981} from \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC165, IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\n// LooksRare libraries and validation code constants\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\nimport \"./ValidationCodeConstants.sol\";\n\n// LooksRare interfaces\nimport {ICurrencyManager} from \"../interfaces/ICurrencyManager.sol\";\nimport {IExecutionManager} from \"../interfaces/IExecutionManager.sol\";\nimport {IExecutionStrategy} from \"../interfaces/IExecutionStrategy.sol\";\nimport {IRoyaltyFeeRegistry} from \"../interfaces/IRoyaltyFeeRegistry.sol\";\nimport {ITransferManagerNFT} from \"../interfaces/ITransferManagerNFT.sol\";\nimport {ITransferSelectorNFTExtended, IRoyaltyFeeManagerExtended} from \"./ExtendedInterfaces.sol\";\n\n// LooksRareExchange\nimport {LooksRareExchange} from \"../LooksRareExchange.sol\";\n\n/**\n * @title OrderValidatorV1\n * @notice This contract is used to check the validity of a maker order in the LooksRareProtocol (v1).\n *         It performs checks for:\n *         1. Nonce-related issues (e.g., nonce executed or cancelled)\n *         2. Amount-related issues (e.g. order amount being 0)\n *         3. Signature-related issues\n *         4. Whitelist-related issues (i.e., currency or strategy not whitelisted)\n *         5. Fee-related issues (e.g., minPercentageToAsk too high due to changes in royalties)\n *         6. Timestamp-related issues (e.g., order expired)\n *         7. Transfer-related issues for ERC20/ERC721/ERC1155 (approvals and balances)\n */\ncontract OrderValidatorV1 {\n    using OrderTypes for OrderTypes.MakerOrder;\n\n    // Number of distinct criteria groups checked to evaluate the validity\n    uint256 public constant CRITERIA_GROUPS = 7;\n\n    // ERC721 interfaceID\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    // ERC1155 interfaceID\n    bytes4 public constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\n\n    // ERC2981 interfaceId\n    bytes4 public constant INTERFACE_ID_ERC2981 = 0x2a55205a;\n\n    // EIP1271 magic value\n    bytes4 public constant MAGIC_VALUE_EIP1271 = 0x1626ba7e;\n\n    // TransferManager ERC721\n    address public immutable TRANSFER_MANAGER_ERC721;\n\n    // TransferManager ERC1155\n    address public immutable TRANSFER_MANAGER_ERC1155;\n\n    // Domain separator from LooksRare Exchange\n    bytes32 public immutable _DOMAIN_SEPARATOR;\n\n    // Currency Manager\n    ICurrencyManager public immutable currencyManager;\n\n    // Execution Manager\n    IExecutionManager public immutable executionManager;\n\n    // Royalty Fee Registry\n    IRoyaltyFeeRegistry public immutable royaltyFeeRegistry;\n\n    // Transfer Selector\n    ITransferSelectorNFTExtended public immutable transferSelectorNFT;\n\n    // LooksRare Exchange\n    LooksRareExchange public immutable looksRareExchange;\n\n    /**\n     * @notice Constructor\n     * @param _looksRareExchange address of the LooksRare exchange (v1)\n     */\n    constructor(address _looksRareExchange) {\n        looksRareExchange = LooksRareExchange(_looksRareExchange);\n        _DOMAIN_SEPARATOR = LooksRareExchange(_looksRareExchange).DOMAIN_SEPARATOR();\n\n        TRANSFER_MANAGER_ERC721 = ITransferSelectorNFTExtended(\n            address(LooksRareExchange(_looksRareExchange).transferSelectorNFT())\n        ).TRANSFER_MANAGER_ERC721();\n\n        TRANSFER_MANAGER_ERC1155 = ITransferSelectorNFTExtended(\n            address(LooksRareExchange(_looksRareExchange).transferSelectorNFT())\n        ).TRANSFER_MANAGER_ERC1155();\n\n        currencyManager = LooksRareExchange(_looksRareExchange).currencyManager();\n        executionManager = LooksRareExchange(_looksRareExchange).executionManager();\n        transferSelectorNFT = ITransferSelectorNFTExtended(\n            address(LooksRareExchange(_looksRareExchange).transferSelectorNFT())\n        );\n        IRoyaltyFeeManagerExtended royaltyFeeManager = IRoyaltyFeeManagerExtended(\n            address(LooksRareExchange(_looksRareExchange).royaltyFeeManager())\n        );\n        royaltyFeeRegistry = royaltyFeeManager.royaltyFeeRegistry();\n    }\n\n    /**\n     * @notice Check the validities for an array of maker orders\n     * @param makerOrders Array of maker order structs\n     * @return validationCodes Array of validation code arrays for the maker orders\n     */\n    function checkMultipleOrderValidities(OrderTypes.MakerOrder[] calldata makerOrders)\n        public\n        view\n        returns (uint256[][] memory validationCodes)\n    {\n        validationCodes = new uint256[][](makerOrders.length);\n\n        for (uint256 i; i < makerOrders.length; ) {\n            validationCodes[i] = checkOrderValidity(makerOrders[i]);\n            unchecked {\n                ++i;\n            }\n        }\n    }\n\n    /**\n     * @notice Check the validity of a maker order\n     * @param makerOrder Maker order struct\n     * @return validationCodes Array of validations code for each group\n     */\n    function checkOrderValidity(OrderTypes.MakerOrder calldata makerOrder)\n        public\n        view\n        returns (uint256[] memory validationCodes)\n    {\n        validationCodes = new uint256[](CRITERIA_GROUPS);\n        validationCodes[0] = checkValidityNonces(makerOrder);\n        validationCodes[1] = checkValidityAmounts(makerOrder);\n        validationCodes[2] = checkValiditySignature(makerOrder);\n        validationCodes[3] = checkValidityWhitelists(makerOrder);\n        validationCodes[4] = checkValidityMinPercentageToAsk(makerOrder);\n        validationCodes[5] = checkValidityTimestamps(makerOrder);\n        validationCodes[6] = checkValidityApprovalsAndBalances(makerOrder);\n    }\n\n    /**\n     * @notice Check the validity for user nonces\n     * @param makerOrder Maker order struct\n     * @return validationCode Validation code\n     */\n    function checkValidityNonces(OrderTypes.MakerOrder calldata makerOrder)\n        public\n        view\n        returns (uint256 validationCode)\n    {\n        if (looksRareExchange.isUserOrderNonceExecutedOrCancelled(makerOrder.signer, makerOrder.nonce))\n            return NONCE_EXECUTED_OR_CANCELLED;\n        if (makerOrder.nonce < looksRareExchange.userMinOrderNonce(makerOrder.signer))\n            return NONCE_BELOW_MIN_ORDER_NONCE;\n    }\n\n    /**\n     * @notice Check the validity of amounts\n     * @param makerOrder Maker order struct\n     * @return validationCode Validation code\n     */\n    function checkValidityAmounts(OrderTypes.MakerOrder calldata makerOrder)\n        public\n        pure\n        returns (uint256 validationCode)\n    {\n        if (makerOrder.amount == 0) return ORDER_AMOUNT_CANNOT_BE_ZERO;\n    }\n\n    /**\n     * @notice Check the validity of a signature\n     * @param makerOrder Maker order struct\n     * @return validationCode Validation code\n     */\n    function checkValiditySignature(OrderTypes.MakerOrder calldata makerOrder)\n        public\n        view\n        returns (uint256 validationCode)\n    {\n        if (makerOrder.signer == address(0)) return MAKER_SIGNER_IS_NULL_SIGNER;\n\n        bytes32 digest = keccak256(abi.encodePacked(\"\\x19\\x01\", _DOMAIN_SEPARATOR, makerOrder.hash()));\n\n        if (!Address.isContract(makerOrder.signer)) {\n            return _validateEOA(digest, makerOrder.signer, makerOrder.v, makerOrder.r, makerOrder.s);\n        } else {\n            return _validateERC1271(digest, makerOrder.signer, makerOrder.v, makerOrder.r, makerOrder.s);\n        }\n    }\n\n    /**\n     * @notice Check the validity for currency/strategy whitelists\n     * @param makerOrder Maker order struct\n     * @return validationCode Validation code\n     */\n    function checkValidityWhitelists(OrderTypes.MakerOrder calldata makerOrder)\n        public\n        view\n        returns (uint256 validationCode)\n    {\n        // Verify whether the currency is whitelisted\n        if (!currencyManager.isCurrencyWhitelisted(makerOrder.currency)) return CURRENCY_NOT_WHITELISTED;\n\n        // Verify whether the strategy is whitelisted\n        if (!executionManager.isStrategyWhitelisted(makerOrder.strategy)) return STRATEGY_NOT_WHITELISTED;\n    }\n\n    /**\n     * @notice Check the validity of min percentage to ask\n     * @param makerOrder Maker order struct\n     * @return validationCode Validation code\n     */\n    function checkValidityMinPercentageToAsk(OrderTypes.MakerOrder calldata makerOrder)\n        public\n        view\n        returns (uint256 validationCode)\n    {\n        // Return if order is bid since there is no protection for minPercentageToAsk\n        if (!makerOrder.isOrderAsk) return ORDER_EXPECTED_TO_BE_VALID;\n\n        uint256 minNetPriceToAsk = (makerOrder.minPercentageToAsk * makerOrder.price);\n\n        uint256 finalSellerAmount = makerOrder.price;\n        uint256 protocolFee = (makerOrder.price * IExecutionStrategy(makerOrder.strategy).viewProtocolFee()) / 10000;\n        finalSellerAmount -= protocolFee;\n\n        if ((finalSellerAmount * 10000) < minNetPriceToAsk) return MIN_NET_RATIO_ABOVE_PROTOCOL_FEE;\n\n        (address receiver, uint256 royaltyAmount) = royaltyFeeRegistry.royaltyInfo(\n            makerOrder.collection,\n            makerOrder.price\n        );\n\n        if (receiver != address(0) && royaltyAmount != 0) {\n            // Royalty registry logic\n            finalSellerAmount -= royaltyAmount;\n            if ((finalSellerAmount * 10000) < minNetPriceToAsk)\n                return MIN_NET_RATIO_ABOVE_ROYALTY_FEE_REGISTRY_AND_PROTOCOL_FEE;\n        } else {\n            // ERC2981 logic\n            if (IERC165(makerOrder.collection).supportsInterface(INTERFACE_ID_ERC2981)) {\n                (bool success, bytes memory data) = makerOrder.collection.staticcall(\n                    abi.encodeWithSelector(IERC2981.royaltyInfo.selector, makerOrder.tokenId, makerOrder.price)\n                );\n\n                if (!success) {\n                    return MISSING_ROYALTY_INFO_FUNCTION_ERC2981;\n                } else {\n                    (receiver, royaltyAmount) = abi.decode(data, (address, uint256));\n                }\n\n                if (receiver != address(0)) {\n                    finalSellerAmount -= royaltyAmount;\n                    if ((finalSellerAmount * 10000) < minNetPriceToAsk)\n                        return MIN_NET_RATIO_ABOVE_ROYALTY_FEE_ERC2981_AND_PROTOCOL_FEE;\n                }\n            }\n        }\n    }\n\n    /**\n     * @notice Check the validity of order timestamps\n     * @param makerOrder Maker order struct\n     * @return validationCode Validation code\n     */\n    function checkValidityTimestamps(OrderTypes.MakerOrder calldata makerOrder)\n        public\n        view\n        returns (uint256 validationCode)\n    {\n        if (makerOrder.startTime > block.timestamp) return TOO_EARLY_TO_EXECUTE_ORDER;\n        if (makerOrder.endTime < block.timestamp) return TOO_LATE_TO_EXECUTE_ORDER;\n    }\n\n    /**\n     * @notice Check the validity of approvals and balances\n     * @param makerOrder Maker order struct\n     * @return validationCode Validation code\n     */\n    function checkValidityApprovalsAndBalances(OrderTypes.MakerOrder calldata makerOrder)\n        public\n        view\n        returns (uint256 validationCode)\n    {\n        if (makerOrder.isOrderAsk) {\n            return\n                _validateNFTApprovals(makerOrder.collection, makerOrder.signer, makerOrder.tokenId, makerOrder.amount);\n        } else {\n            return _validateERC20(makerOrder.currency, makerOrder.signer, makerOrder.price);\n        }\n    }\n\n    /**\n     * @notice Check the validity of NFT approvals and balances\n     * @param collection Collection address\n     * @param user User address\n     * @param tokenId TokenId\n     * @param amount Amount\n     */\n    function _validateNFTApprovals(\n        address collection,\n        address user,\n        uint256 tokenId,\n        uint256 amount\n    ) internal view returns (uint256 validationCode) {\n        address transferManager;\n\n        if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721)) {\n            transferManager = TRANSFER_MANAGER_ERC721;\n        } else if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC1155)) {\n            transferManager = TRANSFER_MANAGER_ERC1155;\n        } else {\n            transferManager = transferSelectorNFT.transferManagerSelectorForCollection(collection);\n        }\n\n        if (transferManager == address(0)) return NO_TRANSFER_MANAGER_AVAILABLE_FOR_COLLECTION;\n\n        if (transferManager == TRANSFER_MANAGER_ERC721) {\n            return _validateERC721AndEquivalents(collection, user, transferManager, tokenId);\n        } else if (transferManager == TRANSFER_MANAGER_ERC1155) {\n            return _validateERC1155(collection, user, transferManager, tokenId, amount);\n        } else {\n            return CUSTOM_TRANSFER_MANAGER;\n        }\n    }\n\n    /**\n     * @notice Check the validity of ERC20 approvals and balances that are required to process the maker bid order\n     * @param currency Currency address\n     * @param user User address\n     * @param price Price (defined by the maker order)\n     */\n    function _validateERC20(\n        address currency,\n        address user,\n        uint256 price\n    ) internal view returns (uint256 validationCode) {\n        if (IERC20(currency).balanceOf(user) < price) return ERC20_BALANCE_INFERIOR_TO_PRICE;\n        if (IERC20(currency).allowance(user, address(looksRareExchange)) < price)\n            return ERC20_APPROVAL_INFERIOR_TO_PRICE;\n    }\n\n    /**\n     * @notice Check the validity of ERC721 approvals and balances required to process the maker ask order\n     * @param collection Collection address\n     * @param user User address\n     * @param transferManager Transfer manager address\n     * @param tokenId TokenId\n     */\n    function _validateERC721AndEquivalents(\n        address collection,\n        address user,\n        address transferManager,\n        uint256 tokenId\n    ) internal view returns (uint256 validationCode) {\n        // 1. Verify tokenId is owned by user and catch revertion if ERC721 ownerOf fails\n        (bool success, bytes memory data) = collection.staticcall(\n            abi.encodeWithSelector(IERC721.ownerOf.selector, tokenId)\n        );\n\n        if (!success) return ERC721_TOKEN_ID_DOES_NOT_EXIST;\n        if (abi.decode(data, (address)) != user) return ERC721_TOKEN_ID_NOT_IN_BALANCE;\n\n        // 2. Verify if collection is approved by transfer manager\n        (success, data) = collection.staticcall(\n            abi.encodeWithSelector(IERC721.isApprovedForAll.selector, user, transferManager)\n        );\n\n        bool isApprovedAll;\n        if (success) {\n            isApprovedAll = abi.decode(data, (bool));\n        }\n\n        if (!isApprovedAll) {\n            // 3. If collection is not approved by transfer manager, try to see if it is approved individually\n            (success, data) = collection.staticcall(abi.encodeWithSelector(IERC721.getApproved.selector, tokenId));\n\n            address approvedAddress;\n            if (success) {\n                approvedAddress = abi.decode(data, (address));\n            }\n\n            if (approvedAddress != transferManager) return ERC721_NO_APPROVAL_FOR_ALL_OR_TOKEN_ID;\n        }\n    }\n\n    /**\n     * @notice Check the validity of ERC1155 approvals and balances required to process the maker ask order\n     * @param collection Collection address\n     * @param user User address\n     * @param transferManager Transfer manager address\n     * @param tokenId TokenId\n     * @param amount Amount\n     */\n    function _validateERC1155(\n        address collection,\n        address user,\n        address transferManager,\n        uint256 tokenId,\n        uint256 amount\n    ) internal view returns (uint256 validationCode) {\n        (bool success, bytes memory data) = collection.staticcall(\n            abi.encodeWithSelector(IERC1155.balanceOf.selector, user, tokenId)\n        );\n\n        if (!success) return ERC1155_BALANCE_OF_DOES_NOT_EXIST;\n        if (abi.decode(data, (uint256)) < amount) return ERC1155_BALANCE_OF_TOKEN_ID_INFERIOR_TO_AMOUNT;\n\n        (success, data) = collection.staticcall(\n            abi.encodeWithSelector(IERC1155.isApprovedForAll.selector, user, transferManager)\n        );\n\n        if (!success) return ERC1155_IS_APPROVED_FOR_ALL_DOES_NOT_EXIST;\n        if (!abi.decode(data, (bool))) return ERC1155_NO_APPROVAL_FOR_ALL;\n    }\n\n    /**\n     * @notice Check the validity of EOA maker order\n     * @param digest Digest\n     * @param targetSigner Expected signer address to confirm message validity\n     * @param v V parameter (27 or 28)\n     * @param r R parameter\n     * @param s S parameter\n     */\n    function _validateEOA(\n        bytes32 digest,\n        address targetSigner,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (uint256 validationCode) {\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0)\n            return INVALID_S_PARAMETER_EOA;\n\n        if (v != 27 && v != 28) return INVALID_V_PARAMETER_EOA;\n\n        address signer = ecrecover(digest, v, r, s);\n        if (signer == address(0)) return NULL_SIGNER_EOA;\n        if (signer != targetSigner) return WRONG_SIGNER_EOA;\n    }\n\n    /**\n     * @notice Check the validity for EIP1271 maker order\n     * @param digest Digest\n     * @param targetSigner Expected signer address to confirm message validity\n     * @param v V parameter (27 or 28)\n     * @param r R parameter\n     * @param s S parameter\n     */\n    function _validateERC1271(\n        bytes32 digest,\n        address targetSigner,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal view returns (uint256 validationCode) {\n        (bool success, bytes memory data) = targetSigner.staticcall(\n            abi.encodeWithSelector(IERC1271.isValidSignature.selector, digest, abi.encodePacked(r, s, v))\n        );\n\n        if (!success) return MISSING_IS_VALID_SIGNATURE_FUNCTION_EIP1271;\n        bytes4 magicValue = abi.decode(data, (bytes4));\n\n        if (magicValue != MAGIC_VALUE_EIP1271) return SIGNATURE_INVALID_EIP1271;\n    }\n}\n"
    },
    "contracts/TransferSelectorNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\nimport {ITransferSelectorNFT} from \"./interfaces/ITransferSelectorNFT.sol\";\n\n/**\n * @title TransferSelectorNFT\n * @notice It selects the NFT transfer manager based on a collection address.\n */\ncontract TransferSelectorNFT is ITransferSelectorNFT, Ownable {\n    // ERC721 interfaceID\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\n    // ERC1155 interfaceID\n    bytes4 public constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\n\n    // Address of the transfer manager contract for ERC721 tokens\n    address public immutable TRANSFER_MANAGER_ERC721;\n\n    // Address of the transfer manager contract for ERC1155 tokens\n    address public immutable TRANSFER_MANAGER_ERC1155;\n\n    // Map collection address to transfer manager address\n    mapping(address => address) public transferManagerSelectorForCollection;\n\n    event CollectionTransferManagerAdded(address indexed collection, address indexed transferManager);\n    event CollectionTransferManagerRemoved(address indexed collection);\n\n    /**\n     * @notice Constructor\n     * @param _transferManagerERC721 address of the ERC721 transfer manager\n     * @param _transferManagerERC1155 address of the ERC1155 transfer manager\n     */\n    constructor(address _transferManagerERC721, address _transferManagerERC1155) {\n        TRANSFER_MANAGER_ERC721 = _transferManagerERC721;\n        TRANSFER_MANAGER_ERC1155 = _transferManagerERC1155;\n    }\n\n    /**\n     * @notice Add a transfer manager for a collection\n     * @param collection collection address to add specific transfer rule\n     * @dev It is meant to be used for exceptions only (e.g., CryptoKitties)\n     */\n    function addCollectionTransferManager(address collection, address transferManager) external onlyOwner {\n        require(collection != address(0), \"Owner: Collection cannot be null address\");\n        require(transferManager != address(0), \"Owner: TransferManager cannot be null address\");\n\n        transferManagerSelectorForCollection[collection] = transferManager;\n\n        emit CollectionTransferManagerAdded(collection, transferManager);\n    }\n\n    /**\n     * @notice Remove a transfer manager for a collection\n     * @param collection collection address to remove exception\n     */\n    function removeCollectionTransferManager(address collection) external onlyOwner {\n        require(\n            transferManagerSelectorForCollection[collection] != address(0),\n            \"Owner: Collection has no transfer manager\"\n        );\n\n        // Set it to the address(0)\n        transferManagerSelectorForCollection[collection] = address(0);\n\n        emit CollectionTransferManagerRemoved(collection);\n    }\n\n    /**\n     * @notice Check the transfer manager for a token\n     * @param collection collection address\n     * @dev Support for ERC165 interface is checked AFTER custom implementation\n     */\n    function checkTransferManagerForToken(address collection) external view override returns (address transferManager) {\n        // Assign transfer manager (if any)\n        transferManager = transferManagerSelectorForCollection[collection];\n\n        if (transferManager == address(0)) {\n            if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721)) {\n                transferManager = TRANSFER_MANAGER_ERC721;\n            } else if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC1155)) {\n                transferManager = TRANSFER_MANAGER_ERC1155;\n            }\n        }\n\n        return transferManager;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev _Available since v3.1._\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n        @dev Handles the receipt of a single ERC1155 token type. This function is\n        called at the end of a `safeTransferFrom` after the balance has been updated.\n        To accept the transfer, this must return\n        `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n        (i.e. 0xf23a6e61, or its own function selector).\n        @param operator The address which initiated the transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param id The ID of the token being transferred\n        @param value The amount of tokens being transferred\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n    */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n        @dev Handles the receipt of a multiple ERC1155 token types. This function\n        is called at the end of a `safeBatchTransferFrom` after the balances have\n        been updated. To accept the transfer(s), this must return\n        `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n        (i.e. 0xbc197c81, or its own function selector).\n        @param operator The address which initiated the batch transfer (i.e. msg.sender)\n        @param from The address which previously owned the token\n        @param ids An array containing ids of each token being transferred (order and length must match values array)\n        @param values An array containing amounts of each token being transferred (order and length must match ids array)\n        @param data Additional data with no specified format\n        @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n    */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC1155.sol\";\nimport \"./IERC1155Receiver.sol\";\nimport \"./extensions/IERC1155MetadataURI.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n *\n * _Available since v3.1._\n */\ncontract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI {\n    using Address for address;\n\n    // Mapping from token ID to account balances\n    mapping(uint256 => mapping(address => uint256)) private _balances;\n\n    // Mapping from account to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256) public view virtual override returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) public view virtual override returns (uint256) {\n        require(account != address(0), \"ERC1155: balance query for the zero address\");\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(address[] memory accounts, uint256[] memory ids)\n        public\n        view\n        virtual\n        override\n        returns (uint256[] memory)\n    {\n        require(accounts.length == ids.length, \"ERC1155: accounts and ids length mismatch\");\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts[i], ids[i]);\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: caller is not owner nor approved\"\n        );\n        _safeTransferFrom(from, to, id, amount, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) public virtual override {\n        require(\n            from == _msgSender() || isApprovedForAll(from, _msgSender()),\n            \"ERC1155: transfer caller is not owner nor approved\"\n        );\n        _safeBatchTransferFrom(from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n        _balances[id][to] += amount;\n\n        emit TransferSingle(operator, from, to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, from, to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n        require(to != address(0), \"ERC1155: transfer to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: insufficient balance for transfer\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n            _balances[id][to] += amount;\n        }\n\n        emit TransferBatch(operator, from, to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the amounts in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates `amount` tokens of token type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, _asSingletonArray(id), _asSingletonArray(amount), data);\n\n        _balances[id][to] += amount;\n        emit TransferSingle(operator, address(0), to, id, amount);\n\n        _doSafeTransferAcceptanceCheck(operator, address(0), to, id, amount, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {\n        require(to != address(0), \"ERC1155: mint to the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, address(0), to, ids, amounts, data);\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            _balances[ids[i]][to] += amounts[i];\n        }\n\n        emit TransferBatch(operator, address(0), to, ids, amounts);\n\n        _doSafeBatchTransferAcceptanceCheck(operator, address(0), to, ids, amounts, data);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens of token type `id` from `from`\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `amount` tokens of token type `id`.\n     */\n    function _burn(\n        address from,\n        uint256 id,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), _asSingletonArray(id), _asSingletonArray(amount), \"\");\n\n        uint256 fromBalance = _balances[id][from];\n        require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n        unchecked {\n            _balances[id][from] = fromBalance - amount;\n        }\n\n        emit TransferSingle(operator, from, address(0), id, amount);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Requirements:\n     *\n     * - `ids` and `amounts` must have the same length.\n     */\n    function _burnBatch(\n        address from,\n        uint256[] memory ids,\n        uint256[] memory amounts\n    ) internal virtual {\n        require(from != address(0), \"ERC1155: burn from the zero address\");\n        require(ids.length == amounts.length, \"ERC1155: ids and amounts length mismatch\");\n\n        address operator = _msgSender();\n\n        _beforeTokenTransfer(operator, from, address(0), ids, amounts, \"\");\n\n        for (uint256 i = 0; i < ids.length; i++) {\n            uint256 id = ids[i];\n            uint256 amount = amounts[i];\n\n            uint256 fromBalance = _balances[id][from];\n            require(fromBalance >= amount, \"ERC1155: burn amount exceeds balance\");\n            unchecked {\n                _balances[id][from] = fromBalance - amount;\n            }\n        }\n\n        emit TransferBatch(operator, from, address(0), ids, amounts);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC1155: setting approval status for self\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning, as well as batched variants.\n     *\n     * The same hook is called on both single and batched variants. For single\n     * transfers, the length of the `id` and `amount` arrays will be 1.\n     *\n     * Calling conditions (for each `id` and `amount` pair):\n     *\n     * - When `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * of token type `id` will be  transferred to `to`.\n     * - When `from` is zero, `amount` tokens of token type `id` will be minted\n     * for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens of token type `id`\n     * will be burned.\n     * - `from` and `to` are never both zero.\n     * - `ids` and `amounts` have the same, non-zero length.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) internal virtual {}\n\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, amount, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) private {\n        if (to.isContract()) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, amounts, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    revert(\"ERC1155: ERC1155Receiver rejected tokens\");\n                }\n            } catch Error(string memory reason) {\n                revert(reason);\n            } catch {\n                revert(\"ERC1155: transfer to non ERC1155Receiver implementer\");\n            }\n        }\n    }\n\n    function _asSingletonArray(uint256 element) private pure returns (uint256[] memory) {\n        uint256[] memory array = new uint256[](1);\n        array[0] = element;\n\n        return array;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n *\n * _Available since v3.1._\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: balance query for the zero address\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _owners[tokenId];\n        require(owner != address(0), \"ERC721: owner query for nonexistent token\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        require(_exists(tokenId), \"ERC721Metadata: URI query for nonexistent token\");\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overriden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not owner nor approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        require(_exists(tokenId), \"ERC721: approved query for nonexistent token\");\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: transfer caller is not owner nor approved\");\n        _safeTransfer(from, to, tokenId, _data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, _data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _owners[tokenId] != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        require(_exists(tokenId), \"ERC721: operator query for nonexistent token\");\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, _data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId);\n\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId);\n\n        // Clear approvals\n        _approve(address(0), tokenId);\n\n        _balances[owner] -= 1;\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer of token that is not own\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId);\n\n        // Clear approvals from the previous owner\n        _approve(address(0), tokenId);\n\n        _balances[from] -= 1;\n        _balances[to] += 1;\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits a {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits a {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param _data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory _data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting\n     * and burning.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\n     * transferred to `to`.\n     * - When `from` is zero, `tokenId` will be minted for `to`.\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/test/utils/MockNonCompliantERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract MockNonCompliantERC721 is ERC721, Ownable {\n    uint256 public currentTokenId;\n\n    constructor(string memory _name, string memory _symbol) ERC721(_name, _symbol) {}\n\n    function mint(address to) external {\n        _mint(to, currentTokenId);\n        currentTokenId++;\n    }\n\n    function supportsInterface(bytes4 interfaceId) public pure override returns (bool) {\n        if ((interfaceId == 0x01ffc9a7) || (interfaceId == 0x9a20483d)) {\n            return true;\n        }\n\n        return false;\n    }\n}\n"
    },
    "contracts/test/utils/MockSignerContract.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IERC1271} from \"@openzeppelin/contracts/interfaces/IERC1271.sol\";\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {ERC721Holder} from \"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ncontract MockSignerContract is IERC1271, ERC721Holder, Ownable {\n    // bytes4(keccak256(\"isValidSignature(bytes32,bytes)\")\n    bytes4 internal constant MAGICVALUE = 0x1626ba7e;\n\n    /**\n     * @notice Approve ERC20\n     */\n    function approveERC20ToBeSpent(address token, address target) external onlyOwner {\n        IERC20(token).approve(target, type(uint256).max);\n    }\n\n    /**\n     * @notice Approve all ERC721 tokens\n     */\n    function approveERC721NFT(address collection, address target) external onlyOwner {\n        IERC721(collection).setApprovalForAll(target, true);\n    }\n\n    /**\n     * @notice Withdraw ERC20 balance\n     */\n    function withdrawERC20(address token) external onlyOwner {\n        IERC20(token).transfer(msg.sender, IERC20(token).balanceOf(address(this)));\n    }\n\n    /**\n     * @notice Withdraw ERC721 tokenId\n     */\n    function withdrawERC721NFT(address collection, uint256 tokenId) external onlyOwner {\n        IERC721(collection).transferFrom(address(this), msg.sender, tokenId);\n    }\n\n    /**\n     * @notice Verifies that the signer is the owner of the signing contract.\n     */\n    function isValidSignature(bytes32 hash, bytes memory signature) external view override returns (bytes4) {\n        require(signature.length == 65, \"SignatureValidator: Invalid signature length\");\n\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n\n        assembly {\n            r := mload(add(signature, 32))\n            s := mload(add(signature, 64))\n            v := and(mload(add(signature, 65)), 255)\n        }\n\n        require(\n            uint256(s) <= 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0,\n            \"Signature: Invalid S parameter\"\n        );\n\n        require(v == 27 || v == 28, \"Signature: Invalid V parameter\");\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        require(signer != address(0), \"Signature: Invalid signer\");\n\n        if (signer == owner()) {\n            return MAGICVALUE;\n        } else {\n            return 0xffffffff;\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/utils/ERC721Holder.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721Receiver.sol\";\n\n/**\n * @dev Implementation of the {IERC721Receiver} interface.\n *\n * Accepts all token transfers.\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\n */\ncontract ERC721Holder is IERC721Receiver {\n    /**\n     * @dev See {IERC721Receiver-onERC721Received}.\n     *\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address,\n        address,\n        uint256,\n        bytes memory\n    ) public virtual override returns (bytes4) {\n        return this.onERC721Received.selector;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "contracts/test/utils/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract MockERC20 is ERC20 {\n    constructor(string memory _name, string memory _symbol) ERC20(_name, _symbol) {\n        //\n    }\n\n    function mint(address to, uint256 amount) external {\n        _mint(to, amount);\n    }\n}\n"
    },
    "contracts/transferManagers/TransferManagerNonCompliantERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\nimport {ITransferManagerNFT} from \"../interfaces/ITransferManagerNFT.sol\";\n\n/**\n * @title TransferManagerNonCompliantERC721\n * @notice It allows the transfer of ERC721 tokens without safeTransferFrom.\n */\ncontract TransferManagerNonCompliantERC721 is ITransferManagerNFT {\n    address public immutable LOOKS_RARE_EXCHANGE;\n\n    /**\n     * @notice Constructor\n     * @param _looksRareExchange address of the LooksRare exchange\n     */\n    constructor(address _looksRareExchange) {\n        LOOKS_RARE_EXCHANGE = _looksRareExchange;\n    }\n\n    /**\n     * @notice Transfer ERC721 token\n     * @param collection address of the collection\n     * @param from address of the sender\n     * @param to address of the recipient\n     * @param tokenId tokenId\n     */\n    function transferNonFungibleToken(\n        address collection,\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256\n    ) external override {\n        require(msg.sender == LOOKS_RARE_EXCHANGE, \"Transfer: Only LooksRare Exchange\");\n        IERC721(collection).transferFrom(from, to, tokenId);\n    }\n}\n"
    },
    "contracts/transferManagers/TransferManagerERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC721} from \"@openzeppelin/contracts/token/ERC721/IERC721.sol\";\n\nimport {ITransferManagerNFT} from \"../interfaces/ITransferManagerNFT.sol\";\n\n/**\n * @title TransferManagerERC721\n * @notice It allows the transfer of ERC721 tokens.\n */\ncontract TransferManagerERC721 is ITransferManagerNFT {\n    address public immutable LOOKS_RARE_EXCHANGE;\n\n    /**\n     * @notice Constructor\n     * @param _looksRareExchange address of the LooksRare exchange\n     */\n    constructor(address _looksRareExchange) {\n        LOOKS_RARE_EXCHANGE = _looksRareExchange;\n    }\n\n    /**\n     * @notice Transfer ERC721 token\n     * @param collection address of the collection\n     * @param from address of the sender\n     * @param to address of the recipient\n     * @param tokenId tokenId\n     * @dev For ERC721, amount is not used\n     */\n    function transferNonFungibleToken(\n        address collection,\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256\n    ) external override {\n        require(msg.sender == LOOKS_RARE_EXCHANGE, \"Transfer: Only LooksRare Exchange\");\n        // https://docs.openzeppelin.com/contracts/2.x/api/token/erc721#IERC721-safeTransferFrom\n        IERC721(collection).safeTransferFrom(from, to, tokenId);\n    }\n}\n"
    },
    "contracts/transferManagers/TransferManagerERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC1155} from \"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\";\n\nimport {ITransferManagerNFT} from \"../interfaces/ITransferManagerNFT.sol\";\n\n/**\n * @title TransferManagerERC1155\n * @notice It allows the transfer of ERC1155 tokens.\n */\ncontract TransferManagerERC1155 is ITransferManagerNFT {\n    address public immutable LOOKS_RARE_EXCHANGE;\n\n    /**\n     * @notice Constructor\n     * @param _looksRareExchange address of the LooksRare exchange\n     */\n    constructor(address _looksRareExchange) {\n        LOOKS_RARE_EXCHANGE = _looksRareExchange;\n    }\n\n    /**\n     * @notice Transfer ERC1155 token(s)\n     * @param collection address of the collection\n     * @param from address of the sender\n     * @param to address of the recipient\n     * @param tokenId tokenId\n     * @param amount amount of tokens (1 and more for ERC1155)\n     */\n    function transferNonFungibleToken(\n        address collection,\n        address from,\n        address to,\n        uint256 tokenId,\n        uint256 amount\n    ) external override {\n        require(msg.sender == LOOKS_RARE_EXCHANGE, \"Transfer: Only LooksRare Exchange\");\n        // https://docs.openzeppelin.com/contracts/3.x/api/token/erc1155#IERC1155-safeTransferFrom-address-address-uint256-uint256-bytes-\n        IERC1155(collection).safeTransferFrom(from, to, tokenId, amount, \"\");\n    }\n}\n"
    },
    "contracts/test/utils/MockERC721WithOwner.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract MockERC721WithOwner is ERC721, Ownable {\n    uint256 public currentTokenId;\n\n    constructor(string memory _name, string memory _symbol) ERC721(_name, _symbol) {}\n\n    function mint(address to) external {\n        _mint(to, currentTokenId);\n        currentTokenId++;\n    }\n}\n"
    },
    "contracts/RoyaltyFeeManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IERC165, IERC2981} from \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\n\nimport {IRoyaltyFeeManager} from \"./interfaces/IRoyaltyFeeManager.sol\";\nimport {IRoyaltyFeeRegistry} from \"./interfaces/IRoyaltyFeeRegistry.sol\";\n\n/**\n * @title RoyaltyFeeManager\n * @notice It handles the logic to check and transfer royalty fees (if any).\n */\ncontract RoyaltyFeeManager is IRoyaltyFeeManager, Ownable {\n    // https://eips.ethereum.org/EIPS/eip-2981\n    bytes4 public constant INTERFACE_ID_ERC2981 = 0x2a55205a;\n\n    IRoyaltyFeeRegistry public immutable royaltyFeeRegistry;\n\n    /**\n     * @notice Constructor\n     * @param _royaltyFeeRegistry address of the RoyaltyFeeRegistry\n     */\n    constructor(address _royaltyFeeRegistry) {\n        royaltyFeeRegistry = IRoyaltyFeeRegistry(_royaltyFeeRegistry);\n    }\n\n    /**\n     * @notice Calculate royalty fee and get recipient\n     * @param collection address of the NFT contract\n     * @param tokenId tokenId\n     * @param amount amount to transfer\n     */\n    function calculateRoyaltyFeeAndGetRecipient(\n        address collection,\n        uint256 tokenId,\n        uint256 amount\n    ) external view override returns (address, uint256) {\n        // 1. Check if there is a royalty info in the system\n        (address receiver, uint256 royaltyAmount) = royaltyFeeRegistry.royaltyInfo(collection, amount);\n\n        // 2. If the receiver is address(0), fee is null, check if it supports the ERC2981 interface\n        if ((receiver == address(0)) || (royaltyAmount == 0)) {\n            if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981)) {\n                (receiver, royaltyAmount) = IERC2981(collection).royaltyInfo(tokenId, amount);\n            }\n        }\n        return (receiver, royaltyAmount);\n    }\n}\n"
    },
    "contracts/RoyaltyFeeManagerV1B.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC2981} from \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\n\nimport {IRoyaltyFeeManager} from \"./interfaces/IRoyaltyFeeManager.sol\";\nimport {IRoyaltyFeeRegistry} from \"./interfaces/IRoyaltyFeeRegistry.sol\";\n\n/**\n * @title RoyaltyFeeManagerV1B\n * @notice It handles the logic to check and transfer rebate fees (if any).\n */\ncontract RoyaltyFeeManagerV1B is IRoyaltyFeeManager {\n    // Interface Id ERC2981\n    bytes4 public constant INTERFACE_ID_ERC2981 = 0x2a55205a;\n\n    // Standard royalty fee\n    uint256 public constant STANDARD_ROYALTY_FEE = 50;\n\n    // Royalty fee registry\n    IRoyaltyFeeRegistry public immutable royaltyFeeRegistry;\n\n    /**\n     * @notice Constructor\n     * @param _royaltyFeeRegistry Royalty fee registry address\n     */\n    constructor(address _royaltyFeeRegistry) {\n        royaltyFeeRegistry = IRoyaltyFeeRegistry(_royaltyFeeRegistry);\n    }\n\n    /**\n     * @notice Calculate royalty fee and get recipient\n     * @param collection address of the NFT contract\n     * @param tokenId tokenId\n     * @param amount amount to transfer\n     */\n    function calculateRoyaltyFeeAndGetRecipient(\n        address collection,\n        uint256 tokenId,\n        uint256 amount\n    ) external view override returns (address receiver, uint256 royaltyAmount) {\n        // 1. Check if there is a royalty info in the system\n        (receiver, ) = royaltyFeeRegistry.royaltyInfo(collection, amount);\n\n        // 2. If the receiver is address(0), check if it supports the ERC2981 interface\n        if (receiver == address(0)) {\n            if (IERC2981(collection).supportsInterface(INTERFACE_ID_ERC2981)) {\n                (bool status, bytes memory data) = collection.staticcall(\n                    abi.encodeWithSelector(IERC2981.royaltyInfo.selector, tokenId, amount)\n                );\n                if (status) {\n                    (receiver, ) = abi.decode(data, (address, uint256));\n                }\n            }\n        }\n\n        // A fixed royalty fee is applied\n        if (receiver != address(0)) {\n            royaltyAmount = (STANDARD_ROYALTY_FEE * amount) / 10000;\n        }\n    }\n}\n"
    },
    "contracts/test/utils/MockERC721WithRoyalty.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {IERC165, ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport {IERC2981} from \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\n\ncontract MockERC721WithRoyalty is ERC721, IERC2981 {\n    address public immutable RECEIVER;\n    uint256 public immutable ROYALTY_FEE;\n    uint256 public currentTokenId;\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        uint256 _royaltyFee\n    ) ERC721(_name, _symbol) {\n        ROYALTY_FEE = _royaltyFee;\n        RECEIVER = msg.sender;\n    }\n\n    function mint(address to) external {\n        _mint(to, currentTokenId);\n        currentTokenId++;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\n        return interfaceId == 0x2a55205a || super.supportsInterface(interfaceId);\n    }\n\n    function royaltyInfo(uint256, uint256 salePrice)\n        external\n        view\n        override\n        returns (address receiver, uint256 royaltyAmount)\n    {\n        return (RECEIVER, (ROYALTY_FEE * salePrice) / 10000);\n    }\n}\n"
    },
    "contracts/PlatformNFT.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IERC165, ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport {IERC2981} from \"@openzeppelin/contracts/interfaces/IERC2981.sol\";\n\ncontract PlatformNFT is Ownable, ERC721, IERC2981 {\n    string private uri;\n    uint256 private tokenId;\n    address public feeReceiver;\n    uint256 public royaltyFraction;\n\n    constructor(address _feeReceiver, uint256 _royaltyFraction) ERC721(\"Mimo NFT\", \"MNFT\") {\n        require(_royaltyFraction <= 50, \"invalid royalty fraction\");\n        feeReceiver = _feeReceiver;\n        royaltyFraction = _royaltyFraction;\n    }\n\n    function mint(address receiver) external onlyOwner {\n        _safeMint(receiver, tokenId++);\n    }\n\n    function setTokenURI(string memory _uri) external onlyOwner {\n        uri = _uri;\n    }\n\n    function changeFeeReceiver(address _feeReceiver) external onlyOwner {\n        require(feeReceiver != address(0), \"\");\n        feeReceiver = _feeReceiver;\n    }\n\n    function changeRoyaltyFraction(uint256 _royaltyFraction) external onlyOwner {\n        require(_royaltyFraction <= 50, \"invalid royalty fraction\");\n        royaltyFraction = _royaltyFraction;\n    }\n\n    function tokenURI(uint256 _tokenId) override public view returns (string memory) {\n        require(_exists(_tokenId), \"PlatformNFT: URI query for nonexistent token\");\n        return uri;\n    }\n\n    function royaltyInfo(\n        uint256 /* tokenId */,\n        uint256 salePrice\n    ) external view override returns (address receiver, uint256 royaltyAmount) {\n        return (feeReceiver, salePrice * royaltyFraction / 100);\n    }\n\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC2981).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n}\n"
    },
    "contracts/royaltyFeeHelpers/RoyaltyFeeSetter.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {IERC165} from \"@openzeppelin/contracts/utils/introspection/IERC165.sol\";\n\nimport {IRoyaltyFeeRegistry} from \"../interfaces/IRoyaltyFeeRegistry.sol\";\nimport {IOwnable} from \"../interfaces/IOwnable.sol\";\n\n/**\n * @title RoyaltyFeeSetter\n * @notice It is used to allow creators to set royalty parameters in the RoyaltyFeeRegistry.\n */\ncontract RoyaltyFeeSetter is Ownable {\n    // ERC721 interfaceID\n    bytes4 public constant INTERFACE_ID_ERC721 = 0x80ac58cd;\n\n    // ERC1155 interfaceID\n    bytes4 public constant INTERFACE_ID_ERC1155 = 0xd9b67a26;\n\n    // ERC2981 interfaceID\n    bytes4 public constant INTERFACE_ID_ERC2981 = 0x2a55205a;\n\n    address public immutable royaltyFeeRegistry;\n\n    /**\n     * @notice Constructor\n     * @param _royaltyFeeRegistry address of the royalty fee registry\n     */\n    constructor(address _royaltyFeeRegistry) {\n        royaltyFeeRegistry = _royaltyFeeRegistry;\n    }\n\n    /**\n     * @notice Update royalty info for collection if admin\n     * @dev Only to be called if there is no setter address\n     * @param collection address of the NFT contract\n     * @param setter address that sets the receiver\n     * @param receiver receiver for the royalty fee\n     * @param fee fee (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyInfoForCollectionIfAdmin(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external {\n        require(!IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981), \"Admin: Must not be ERC2981\");\n        require(msg.sender == IOwnable(collection).admin(), \"Admin: Not the admin\");\n\n        _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(collection, setter, receiver, fee);\n    }\n\n    /**\n     * @notice Update royalty info for collection if owner\n     * @dev Only to be called if there is no setter address\n     * @param collection address of the NFT contract\n     * @param setter address that sets the receiver\n     * @param receiver receiver for the royalty fee\n     * @param fee fee (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyInfoForCollectionIfOwner(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external {\n        require(!IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981), \"Owner: Must not be ERC2981\");\n        require(msg.sender == IOwnable(collection).owner(), \"Owner: Not the owner\");\n\n        _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(collection, setter, receiver, fee);\n    }\n\n    /**\n     * @notice Update royalty info for collection\n     * @dev Only to be called if there msg.sender is the setter\n     * @param collection address of the NFT contract\n     * @param setter address that sets the receiver\n     * @param receiver receiver for the royalty fee\n     * @param fee fee (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyInfoForCollectionIfSetter(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external {\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry).royaltyFeeInfoCollection(collection);\n        require(msg.sender == currentSetter, \"Setter: Not the setter\");\n\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(collection, setter, receiver, fee);\n    }\n\n    /**\n     * @notice Update royalty info for collection\n     * @dev Can only be called by contract owner (of this)\n     * @param collection address of the NFT contract\n     * @param setter address that sets the receiver\n     * @param receiver receiver for the royalty fee\n     * @param fee fee (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyInfoForCollection(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external onlyOwner {\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(collection, setter, receiver, fee);\n    }\n\n    /**\n     * @notice Update owner of royalty fee registry\n     * @dev Can be used for migration of this royalty fee setter contract\n     * @param _owner new owner address\n     */\n    function updateOwnerOfRoyaltyFeeRegistry(address _owner) external onlyOwner {\n        IOwnable(royaltyFeeRegistry).transferOwnership(_owner);\n    }\n\n    /**\n     * @notice Update royalty info for collection\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external onlyOwner {\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyFeeLimit(_royaltyFeeLimit);\n    }\n\n    /**\n     * @notice Check royalty info for collection\n     * @param collection collection address\n     * @return (whether there is a setter (address(0 if not)),\n     * Position\n     * 0: Royalty setter is set in the registry\n     * 1: ERC2981 and no setter\n     * 2: setter can be set using owner()\n     * 3: setter can be set using admin()\n     * 4: setter cannot be set, nor support for ERC2981\n     */\n    function checkForCollectionSetter(address collection) external view returns (address, uint8) {\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry).royaltyFeeInfoCollection(collection);\n\n        if (currentSetter != address(0)) {\n            return (currentSetter, 0);\n        }\n\n        try IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981) returns (bool interfaceSupport) {\n            if (interfaceSupport) {\n                return (address(0), 1);\n            }\n        } catch {}\n\n        try IOwnable(collection).owner() returns (address setter) {\n            return (setter, 2);\n        } catch {\n            try IOwnable(collection).admin() returns (address setter) {\n                return (setter, 3);\n            } catch {\n                return (address(0), 4);\n            }\n        }\n    }\n\n    /**\n     * @notice Update information and perform checks before updating royalty fee registry\n     * @param collection address of the NFT contract\n     * @param setter address that sets the receiver\n     * @param receiver receiver for the royalty fee\n     * @param fee fee (500 = 5%, 1,000 = 10%)\n     */\n    function _updateRoyaltyInfoForCollectionIfOwnerOrAdmin(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) internal {\n        (address currentSetter, , ) = IRoyaltyFeeRegistry(royaltyFeeRegistry).royaltyFeeInfoCollection(collection);\n        require(currentSetter == address(0), \"Setter: Already set\");\n\n        require(\n            (IERC165(collection).supportsInterface(INTERFACE_ID_ERC721) ||\n                IERC165(collection).supportsInterface(INTERFACE_ID_ERC1155)),\n            \"Setter: Not ERC721/ERC1155\"\n        );\n\n        IRoyaltyFeeRegistry(royaltyFeeRegistry).updateRoyaltyInfoForCollection(collection, setter, receiver, fee);\n    }\n}\n"
    },
    "contracts/interfaces/IOwnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IOwnable {\n    function transferOwnership(address newOwner) external;\n\n    function owner() external view returns (address);\n\n    function admin() external view returns (address);\n}\n"
    },
    "contracts/royaltyFeeHelpers/RoyaltyFeeRegistry.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\n\nimport {IRoyaltyFeeRegistry} from \"../interfaces/IRoyaltyFeeRegistry.sol\";\n\n/**\n * @title RoyaltyFeeRegistry\n * @notice It is a royalty fee registry for the LooksRare exchange.\n */\ncontract RoyaltyFeeRegistry is IRoyaltyFeeRegistry, Ownable {\n    struct FeeInfo {\n        address setter;\n        address receiver;\n        uint256 fee;\n    }\n\n    // Limit (if enforced for fee royalty in percentage (10,000 = 100%)\n    uint256 public royaltyFeeLimit;\n\n    mapping(address => FeeInfo) private _royaltyFeeInfoCollection;\n\n    event NewRoyaltyFeeLimit(uint256 royaltyFeeLimit);\n    event RoyaltyFeeUpdate(address indexed collection, address indexed setter, address indexed receiver, uint256 fee);\n\n    /**\n     * @notice Constructor\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\n     */\n    constructor(uint256 _royaltyFeeLimit) {\n        require(_royaltyFeeLimit <= 9500, \"Owner: Royalty fee limit too high\");\n        royaltyFeeLimit = _royaltyFeeLimit;\n    }\n\n    /**\n     * @notice Update royalty info for collection\n     * @param _royaltyFeeLimit new royalty fee limit (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external override onlyOwner {\n        require(_royaltyFeeLimit <= 9500, \"Owner: Royalty fee limit too high\");\n        royaltyFeeLimit = _royaltyFeeLimit;\n\n        emit NewRoyaltyFeeLimit(_royaltyFeeLimit);\n    }\n\n    /**\n     * @notice Update royalty info for collection\n     * @param collection address of the NFT contract\n     * @param setter address that sets the receiver\n     * @param receiver receiver for the royalty fee\n     * @param fee fee (500 = 5%, 1,000 = 10%)\n     */\n    function updateRoyaltyInfoForCollection(\n        address collection,\n        address setter,\n        address receiver,\n        uint256 fee\n    ) external override onlyOwner {\n        require(fee <= royaltyFeeLimit, \"Registry: Royalty fee too high\");\n        _royaltyFeeInfoCollection[collection] = FeeInfo({setter: setter, receiver: receiver, fee: fee});\n\n        emit RoyaltyFeeUpdate(collection, setter, receiver, fee);\n    }\n\n    /**\n     * @notice Calculate royalty info for a collection address and a sale gross amount\n     * @param collection collection address\n     * @param amount amount\n     * @return receiver address and amount received by royalty recipient\n     */\n    function royaltyInfo(address collection, uint256 amount) external view override returns (address, uint256) {\n        return (\n            _royaltyFeeInfoCollection[collection].receiver,\n            (amount * _royaltyFeeInfoCollection[collection].fee) / 10000\n        );\n    }\n\n    /**\n     * @notice View royalty info for a collection address\n     * @param collection collection address\n     */\n    function royaltyFeeInfoCollection(address collection)\n        external\n        view\n        override\n        returns (\n            address,\n            address,\n            uint256\n        )\n    {\n        return (\n            _royaltyFeeInfoCollection[collection].setter,\n            _royaltyFeeInfoCollection[collection].receiver,\n            _royaltyFeeInfoCollection[collection].fee\n        );\n    }\n}\n"
    },
    "contracts/executionStrategies/StrategyStandardSaleForFixedPriceV1B.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\nimport {IExecutionStrategy} from \"../interfaces/IExecutionStrategy.sol\";\n\n/**\n * @title StrategyStandardSaleForFixedPriceV1B\n * @notice Strategy that executes an order at a fixed price that\n * can be taken either by a bid or an ask.\n */\ncontract StrategyStandardSaleForFixedPriceV1B is Ownable, IExecutionStrategy {\n    // Event if the protocol fee changes\n    event NewProtocolFee(uint256 protocolFee);\n\n    // Protocol fee\n    uint256 internal _protocolFee = 150;\n\n    /**\n     * @notice Check whether a taker ask order can be executed against a maker bid\n     * @param takerAsk taker ask order\n     * @param makerBid maker bid order\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     */\n    function canExecuteTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\n        external\n        view\n        override\n        returns (\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        return (\n            ((makerBid.price == takerAsk.price) &&\n                (makerBid.tokenId == takerAsk.tokenId) &&\n                (makerBid.startTime <= block.timestamp) &&\n                (makerBid.endTime >= block.timestamp)),\n            makerBid.tokenId,\n            makerBid.amount\n        );\n    }\n\n    /**\n     * @notice Check whether a taker bid order can be executed against a maker ask\n     * @param takerBid taker bid order\n     * @param makerAsk maker ask order\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     */\n    function canExecuteTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\n        external\n        view\n        override\n        returns (\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        return (\n            ((makerAsk.price == takerBid.price) &&\n                (makerAsk.tokenId == takerBid.tokenId) &&\n                (makerAsk.startTime <= block.timestamp) &&\n                (makerAsk.endTime >= block.timestamp)),\n            makerAsk.tokenId,\n            makerAsk.amount\n        );\n    }\n\n    /**\n     * @notice Set new protocol fee for this strategy\n     * @param newProtocolFee protocol fee\n     */\n    function setProtocolFee(uint256 newProtocolFee) external onlyOwner {\n        require(newProtocolFee < _protocolFee, \"Owner: Protocol fee too high\");\n        _protocolFee = newProtocolFee;\n\n        emit NewProtocolFee(newProtocolFee);\n    }\n\n    /**\n     * @notice Return protocol fee for this strategy\n     * @return protocol fee\n     */\n    function viewProtocolFee() external view override returns (uint256) {\n        return _protocolFee;\n    }\n}\n"
    },
    "contracts/executionStrategies/StrategyStandardSaleForFixedPrice.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\nimport {IExecutionStrategy} from \"../interfaces/IExecutionStrategy.sol\";\n\n/**\n * @title StrategyStandardSaleForFixedPrice\n * @notice Strategy that executes an order at a fixed price that\n * can be taken either by a bid or an ask.\n */\ncontract StrategyStandardSaleForFixedPrice is IExecutionStrategy {\n    uint256 public immutable PROTOCOL_FEE;\n\n    /**\n     * @notice Constructor\n     * @param _protocolFee protocol fee (200 --> 2%, 400 --> 4%)\n     */\n    constructor(uint256 _protocolFee) {\n        PROTOCOL_FEE = _protocolFee;\n    }\n\n    /**\n     * @notice Check whether a taker ask order can be executed against a maker bid\n     * @param takerAsk taker ask order\n     * @param makerBid maker bid order\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     */\n    function canExecuteTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\n        external\n        view\n        override\n        returns (\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        return (\n            ((makerBid.price == takerAsk.price) &&\n                (makerBid.tokenId == takerAsk.tokenId) &&\n                (makerBid.startTime <= block.timestamp) &&\n                (makerBid.endTime >= block.timestamp)),\n            makerBid.tokenId,\n            makerBid.amount\n        );\n    }\n\n    /**\n     * @notice Check whether a taker bid order can be executed against a maker ask\n     * @param takerBid taker bid order\n     * @param makerAsk maker ask order\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     */\n    function canExecuteTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\n        external\n        view\n        override\n        returns (\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        return (\n            ((makerAsk.price == takerBid.price) &&\n                (makerAsk.tokenId == takerBid.tokenId) &&\n                (makerAsk.startTime <= block.timestamp) &&\n                (makerAsk.endTime >= block.timestamp)),\n            makerAsk.tokenId,\n            makerAsk.amount\n        );\n    }\n\n    /**\n     * @notice Return protocol fee for this strategy\n     * @return protocol fee\n     */\n    function viewProtocolFee() external view override returns (uint256) {\n        return PROTOCOL_FEE;\n    }\n}\n"
    },
    "contracts/executionStrategies/StrategyPrivateSale.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\nimport {IExecutionStrategy} from \"../interfaces/IExecutionStrategy.sol\";\n\n/**\n * @title StrategyPrivateSale\n * @notice Strategy to set up an order that can only be executed by\n * a specific address.\n */\ncontract StrategyPrivateSale is IExecutionStrategy {\n    uint256 public immutable PROTOCOL_FEE;\n\n    /**\n     * @notice Constructor\n     * @param _protocolFee: protocol fee (200 --> 2%, 400 --> 4%)\n     */\n    constructor(uint256 _protocolFee) {\n        PROTOCOL_FEE = _protocolFee;\n    }\n\n    /**\n     * @notice Check whether a taker ask order can be executed against a maker bid\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     */\n    function canExecuteTakerAsk(OrderTypes.TakerOrder calldata, OrderTypes.MakerOrder calldata)\n        external\n        pure\n        override\n        returns (\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        return (false, 0, 0);\n    }\n\n    /**\n     * @notice Check whether a taker bid order can be executed against a maker ask\n     * @param takerBid taker bid order\n     * @param makerAsk maker ask order\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     */\n    function canExecuteTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\n        external\n        view\n        override\n        returns (\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        // Retrieve target buyer\n        address targetBuyer = abi.decode(makerAsk.params, (address));\n\n        return (\n            ((targetBuyer == takerBid.taker) &&\n                (makerAsk.price == takerBid.price) &&\n                (makerAsk.tokenId == takerBid.tokenId) &&\n                (makerAsk.startTime <= block.timestamp) &&\n                (makerAsk.endTime >= block.timestamp)),\n            makerAsk.tokenId,\n            makerAsk.amount\n        );\n    }\n\n    /**\n     * @notice Return protocol fee for this strategy\n     * @return protocol fee\n     */\n    function viewProtocolFee() external view override returns (uint256) {\n        return PROTOCOL_FEE;\n    }\n}\n"
    },
    "contracts/executionStrategies/StrategyDutchAuction.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\nimport {IExecutionStrategy} from \"../interfaces/IExecutionStrategy.sol\";\n\n/**\n * @title StrategyDutchAuction\n * @notice Strategy to launch a Dutch Auction for a token where the price decreases linearly\n * until a specified timestamp and end price defined by the seller.\n */\ncontract StrategyDutchAuction is IExecutionStrategy, Ownable {\n    uint256 public immutable PROTOCOL_FEE;\n\n    // Minimum auction length in seconds\n    uint256 public minimumAuctionLengthInSeconds;\n\n    event NewMinimumAuctionLengthInSeconds(uint256 minimumAuctionLengthInSeconds);\n\n    /**\n     * @notice Constructor\n     * @param _protocolFee protocol fee (200 --> 2%, 400 --> 4%)\n     * @param _minimumAuctionLengthInSeconds minimum auction length in seconds\n     */\n    constructor(uint256 _protocolFee, uint256 _minimumAuctionLengthInSeconds) {\n        require(_minimumAuctionLengthInSeconds >= 15 minutes, \"Owner: Auction length must be > 15 min\");\n\n        PROTOCOL_FEE = _protocolFee;\n        minimumAuctionLengthInSeconds = _minimumAuctionLengthInSeconds;\n    }\n\n    /**\n     * @notice Check whether a taker bid order can be executed against a maker ask\n     * @param takerBid taker bid order\n     * @param makerAsk maker ask order\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     */\n    function canExecuteTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\n        external\n        view\n        override\n        returns (\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        uint256 startPrice = abi.decode(makerAsk.params, (uint256));\n        uint256 endPrice = makerAsk.price;\n\n        uint256 startTime = makerAsk.startTime;\n        uint256 endTime = makerAsk.endTime;\n\n        // Underflow checks and auction length check\n        require(endTime >= (startTime + minimumAuctionLengthInSeconds), \"Dutch Auction: Length must be longer\");\n        require(startPrice > endPrice, \"Dutch Auction: Start price must be greater than end price\");\n\n        uint256 currentAuctionPrice = startPrice -\n            (((startPrice - endPrice) * (block.timestamp - startTime)) / (endTime - startTime));\n\n        return (\n            (startTime <= block.timestamp) &&\n                (endTime >= block.timestamp) &&\n                (takerBid.price >= currentAuctionPrice) &&\n                (takerBid.tokenId == makerAsk.tokenId),\n            makerAsk.tokenId,\n            makerAsk.amount\n        );\n    }\n\n    /**\n     * @notice Check whether a taker ask order can be executed against a maker bid\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     * @dev It cannot execute but it is left for compatibility purposes with the interface.\n     */\n    function canExecuteTakerAsk(OrderTypes.TakerOrder calldata, OrderTypes.MakerOrder calldata)\n        external\n        pure\n        override\n        returns (\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        return (false, 0, 0);\n    }\n\n    /**\n     * @notice Return protocol fee for this strategy\n     * @return protocol fee\n     */\n    function viewProtocolFee() external view override returns (uint256) {\n        return PROTOCOL_FEE;\n    }\n\n    /**\n     * @notice Update minimum auction length (in seconds)\n     * @param _minimumAuctionLengthInSeconds minimum auction length in seconds\n     * @dev It protects against auctions that would be too short to be executed (e.g., 15 seconds)\n     */\n    function updateMinimumAuctionLength(uint256 _minimumAuctionLengthInSeconds) external onlyOwner {\n        require(_minimumAuctionLengthInSeconds >= 15 minutes, \"Owner: Auction length must be > 15 min\");\n        minimumAuctionLengthInSeconds = _minimumAuctionLengthInSeconds;\n\n        emit NewMinimumAuctionLengthInSeconds(_minimumAuctionLengthInSeconds);\n    }\n}\n"
    },
    "contracts/test/DutchAuction.t.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.7;\n\nimport {OrderTypes, StrategyDutchAuction} from \"../executionStrategies/StrategyDutchAuction.sol\";\nimport {TestHelpers} from \"./TestHelpers.sol\";\n\nabstract contract TestParameters {\n    // All the parameters are dummy & used for compatibility with Maker/Taker but don't impact Dutch Auction\n    address internal _TAKER = address(1);\n    address internal _MAKER = address(2);\n    address internal _STRATEGY = address(3);\n    address internal _COLLECTION = address(4);\n    address internal _CURRENCY = address(5);\n    uint256 internal _AMOUNT = 1;\n    uint256 internal _NONCE = 0;\n    uint256 internal _TOKEN_ID = 1;\n    uint256 internal _MIN_PERCENTAGE_TO_ASK = 8500;\n    bytes internal _TAKER_PARAMS;\n    uint8 internal _V = 27;\n    bytes32 internal _R;\n    bytes32 internal _S;\n\n    // Dutch Auction constructor parameters\n    uint256 internal _PROTOCOL_FEE = 200;\n    uint256 internal _MIN_AUCTION_LENGTH = 15 minutes;\n}\n\ncontract StrategyDutchAuctionTest is TestHelpers, TestParameters {\n    StrategyDutchAuction public strategyDutchAuction;\n\n    function setUp() public {\n        strategyDutchAuction = new StrategyDutchAuction(_PROTOCOL_FEE, _MIN_AUCTION_LENGTH);\n    }\n\n    function testTimeAndPriceUnderOverflow(\n        uint96 auctionLength,\n        uint256 startPrice,\n        uint256 endPrice\n    ) public {\n        cheats.assume(_MIN_AUCTION_LENGTH < uint256(auctionLength));\n        cheats.assume(startPrice > endPrice);\n\n        uint256 startTime = block.timestamp;\n        uint256 endTime = startTime + uint256(auctionLength);\n        bytes memory makerParams = abi.encode(startPrice);\n\n        uint256 takerPrice = startPrice -\n            (((startPrice - endPrice) * (block.timestamp - startTime)) / (endTime - startTime));\n\n        OrderTypes.TakerOrder memory takerBidOrder = OrderTypes.TakerOrder(\n            false,\n            _TAKER,\n            takerPrice,\n            _TOKEN_ID,\n            _MIN_PERCENTAGE_TO_ASK,\n            _TAKER_PARAMS\n        );\n\n        OrderTypes.MakerOrder memory makerAskOrder = OrderTypes.MakerOrder(\n            true,\n            _MAKER,\n            _COLLECTION,\n            endPrice,\n            _TOKEN_ID,\n            _AMOUNT,\n            _STRATEGY,\n            _CURRENCY,\n            _NONCE,\n            startTime,\n            endTime,\n            _MIN_PERCENTAGE_TO_ASK,\n            makerParams,\n            _V,\n            _R,\n            _S\n        );\n\n        (bool canExecute, , ) = strategyDutchAuction.canExecuteTakerBid(takerBidOrder, makerAskOrder);\n        assert(canExecute);\n    }\n}\n"
    },
    "contracts/test/TestHelpers.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ICheatCodes} from \"./ICheatCodes.sol\";\nimport {DSTest} from \"../../lib/ds-test/src/test.sol\";\n\nabstract contract TestHelpers is DSTest {\n    ICheatCodes public cheats = ICheatCodes(0x7109709ECfa91a80626fF3989D68f67F5b1DD12D);\n\n    address public user1 = address(1);\n    address public user2 = address(2);\n    address public user3 = address(3);\n    address public user4 = address(4);\n    address public user5 = address(5);\n    address public user6 = address(6);\n    address public user7 = address(7);\n    address public user8 = address(8);\n    address public user9 = address(9);\n\n    modifier asPrankedUser(address _user) {\n        cheats.startPrank(_user);\n        _;\n        cheats.stopPrank();\n    }\n\n    function assertQuasiEq(uint256 a, uint256 b) public {\n        require(a >= 1e18 || b >= 1e18, \"Error: a & b must be > 1e18\");\n\n        // 0.000001 % precision tolerance\n        uint256 PRECISION_LOSS = 1e9;\n\n        if (a == b) {\n            assertEq(a, b);\n        } else if (a > b) {\n            assertGt(a, b);\n            assertLt(a - PRECISION_LOSS, b);\n        } else if (a < b) {\n            assertGt(a, b - PRECISION_LOSS);\n            assertLt(a, b);\n        }\n    }\n\n    function _parseEther(uint256 value) internal pure returns (uint256) {\n        return value * 1e18;\n    }\n\n    function _parseEtherWithFloating(uint256 value, uint8 floatingDigits) internal pure returns (uint256) {\n        assert(floatingDigits <= 18);\n        return value * (10**(18 - floatingDigits));\n    }\n}\n"
    },
    "contracts/test/ICheatCodes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface ICheatCodes {\n    // Set block.timestamp (newTimestamp)\n    function warp(uint256) external;\n\n    // Set block.height (newHeight)\n    function roll(uint256) external;\n\n    // Set block.basefee (newBasefee)\n    function fee(uint256) external;\n\n    // Loads a storage slot from an address (who, slot)\n    function load(address, bytes32) external returns (bytes32);\n\n    // Stores a value to an address' storage slot, (who, slot, value)\n    function store(\n        address,\n        bytes32,\n        bytes32\n    ) external;\n\n    // Signs data, (privateKey, digest) => (v, r, s)\n    function sign(uint256, bytes32)\n        external\n        returns (\n            uint8,\n            bytes32,\n            bytes32\n        );\n\n    // Gets address for a given private key, (privateKey) => (address)\n    function addr(uint256) external returns (address);\n\n    // Performs a foreign function call via terminal, (stringInputs) => (result)\n    function ffi(string[] calldata) external returns (bytes memory);\n\n    // Sets the *next* call's msg.sender to be the input address\n    function prank(address) external;\n\n    // Sets all subsequent calls' msg.sender to be the input address until `stopPrank` is called\n    function startPrank(address) external;\n\n    // Sets the *next* call's msg.sender to be the input address, and the tx.origin to be the second input\n    function prank(address, address) external;\n\n    // Sets all subsequent calls' msg.sender to be the input address until `stopPrank` is called, and the tx.origin to be the second input\n    function startPrank(address, address) external;\n\n    // Resets subsequent calls' msg.sender to be `address(this)`\n    function stopPrank() external;\n\n    // Sets an address' balance, (who, newBalance)\n    function deal(address, uint256) external;\n\n    // Sets an address' code, (who, newCode)\n    function etch(address, bytes calldata) external;\n\n    // Expects an error on next call\n    function expectRevert(bytes calldata) external;\n\n    function expectRevert(bytes4) external;\n\n    // Record all storage reads and writes\n    function record() external;\n\n    // Gets all accessed reads and write slot from a recording session, for a given address\n    function accesses(address) external returns (bytes32[] memory reads, bytes32[] memory writes);\n\n    // Prepare an expected log with (bool checkTopic1, bool checkTopic2, bool checkTopic3, bool checkData).\n    // Call this function, then emit an event, then call a function. Internally after the call, we check if\n    // logs were emitted in the expected order with the expected topics and data (as specified by the booleans)\n    function expectEmit(\n        bool,\n        bool,\n        bool,\n        bool\n    ) external;\n\n    // Mocks a call to an address, returning specified data.\n    // Calldata can either be strict or a partial match, e.g. if you only\n    // pass a Solidity selector to the expected calldata, then the entire Solidity\n    // function will be mocked.\n    function mockCall(\n        address,\n        bytes calldata,\n        bytes calldata\n    ) external;\n\n    // Clears all mocked calls\n    function clearMockedCalls() external;\n\n    // Expect a call to an address with the specified calldata.\n    // Calldata can either be strict or a partial match\n    function expectCall(address, bytes calldata) external;\n\n    // Fetches the contract bytecode from its artifact file\n    function getCode(string calldata) external returns (bytes memory);\n\n    // Label an address in test traces\n    function label(address addr, string calldata label) external;\n\n    // When fuzzing, generate new inputs if conditional not met\n    function assume(bool) external;\n}\n"
    },
    "lib/ds-test/src/test.sol": {
      "content": "// SPDX-License-Identifier: GPL-3.0-or-later\n\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\npragma solidity >=0.4.23;\n\ncontract DSTest {\n    event log                    (string);\n    event logs                   (bytes);\n\n    event log_address            (address);\n    event log_bytes32            (bytes32);\n    event log_int                (int);\n    event log_uint               (uint);\n    event log_bytes              (bytes);\n    event log_string             (string);\n\n    event log_named_address      (string key, address val);\n    event log_named_bytes32      (string key, bytes32 val);\n    event log_named_decimal_int  (string key, int val, uint decimals);\n    event log_named_decimal_uint (string key, uint val, uint decimals);\n    event log_named_int          (string key, int val);\n    event log_named_uint         (string key, uint val);\n    event log_named_bytes        (string key, bytes val);\n    event log_named_string       (string key, string val);\n\n    bool public IS_TEST = true;\n    bool public failed;\n\n    address constant HEVM_ADDRESS =\n        address(bytes20(uint160(uint256(keccak256('hevm cheat code')))));\n\n    modifier mayRevert() { _; }\n    modifier testopts(string memory) { _; }\n\n    function fail() internal {\n        failed = true;\n    }\n\n    modifier logs_gas() {\n        uint startGas = gasleft();\n        _;\n        uint endGas = gasleft();\n        emit log_named_uint(\"gas\", startGas - endGas);\n    }\n\n    function assertTrue(bool condition) internal {\n        if (!condition) {\n            emit log(\"Error: Assertion Failed\");\n            fail();\n        }\n    }\n\n    function assertTrue(bool condition, string memory err) internal {\n        if (!condition) {\n            emit log_named_string(\"Error\", err);\n            assertTrue(condition);\n        }\n    }\n\n    function assertEq(address a, address b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [address]\");\n            emit log_named_address(\"  Expected\", b);\n            emit log_named_address(\"    Actual\", a);\n            fail();\n        }\n    }\n    function assertEq(address a, address b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string (\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n\n    function assertEq(bytes32 a, bytes32 b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [bytes32]\");\n            emit log_named_bytes32(\"  Expected\", b);\n            emit log_named_bytes32(\"    Actual\", a);\n            fail();\n        }\n    }\n    function assertEq(bytes32 a, bytes32 b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string (\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n    function assertEq32(bytes32 a, bytes32 b) internal {\n        assertEq(a, b);\n    }\n    function assertEq32(bytes32 a, bytes32 b, string memory err) internal {\n        assertEq(a, b, err);\n    }\n\n    function assertEq(int a, int b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [int]\");\n            emit log_named_int(\"  Expected\", b);\n            emit log_named_int(\"    Actual\", a);\n            fail();\n        }\n    }\n    function assertEq(int a, int b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n    function assertEq(uint a, uint b) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [uint]\");\n            emit log_named_uint(\"  Expected\", b);\n            emit log_named_uint(\"    Actual\", a);\n            fail();\n        }\n    }\n    function assertEq(uint a, uint b, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n    function assertEqDecimal(int a, int b, uint decimals) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Expected\", b, decimals);\n            emit log_named_decimal_int(\"    Actual\", a, decimals);\n            fail();\n        }\n    }\n    function assertEqDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEqDecimal(a, b, decimals);\n        }\n    }\n    function assertEqDecimal(uint a, uint b, uint decimals) internal {\n        if (a != b) {\n            emit log(\"Error: a == b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Expected\", b, decimals);\n            emit log_named_decimal_uint(\"    Actual\", a, decimals);\n            fail();\n        }\n    }\n    function assertEqDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a != b) {\n            emit log_named_string(\"Error\", err);\n            assertEqDecimal(a, b, decimals);\n        }\n    }\n\n    function assertGt(uint a, uint b) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGt(uint a, uint b, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGt(a, b);\n        }\n    }\n    function assertGt(int a, int b) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGt(int a, int b, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGt(a, b);\n        }\n    }\n    function assertGtDecimal(int a, int b, uint decimals) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGtDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGtDecimal(a, b, decimals);\n        }\n    }\n    function assertGtDecimal(uint a, uint b, uint decimals) internal {\n        if (a <= b) {\n            emit log(\"Error: a > b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGtDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a <= b) {\n            emit log_named_string(\"Error\", err);\n            assertGtDecimal(a, b, decimals);\n        }\n    }\n\n    function assertGe(uint a, uint b) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGe(uint a, uint b, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGe(a, b);\n        }\n    }\n    function assertGe(int a, int b) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertGe(int a, int b, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGe(a, b);\n        }\n    }\n    function assertGeDecimal(int a, int b, uint decimals) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGeDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGeDecimal(a, b, decimals);\n        }\n    }\n    function assertGeDecimal(uint a, uint b, uint decimals) internal {\n        if (a < b) {\n            emit log(\"Error: a >= b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertGeDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a < b) {\n            emit log_named_string(\"Error\", err);\n            assertGeDecimal(a, b, decimals);\n        }\n    }\n\n    function assertLt(uint a, uint b) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLt(uint a, uint b, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLt(a, b);\n        }\n    }\n    function assertLt(int a, int b) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLt(int a, int b, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLt(a, b);\n        }\n    }\n    function assertLtDecimal(int a, int b, uint decimals) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLtDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLtDecimal(a, b, decimals);\n        }\n    }\n    function assertLtDecimal(uint a, uint b, uint decimals) internal {\n        if (a >= b) {\n            emit log(\"Error: a < b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLtDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a >= b) {\n            emit log_named_string(\"Error\", err);\n            assertLtDecimal(a, b, decimals);\n        }\n    }\n\n    function assertLe(uint a, uint b) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [uint]\");\n            emit log_named_uint(\"  Value a\", a);\n            emit log_named_uint(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLe(uint a, uint b, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLe(a, b);\n        }\n    }\n    function assertLe(int a, int b) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [int]\");\n            emit log_named_int(\"  Value a\", a);\n            emit log_named_int(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertLe(int a, int b, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLe(a, b);\n        }\n    }\n    function assertLeDecimal(int a, int b, uint decimals) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [decimal int]\");\n            emit log_named_decimal_int(\"  Value a\", a, decimals);\n            emit log_named_decimal_int(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLeDecimal(int a, int b, uint decimals, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertLeDecimal(a, b, decimals);\n        }\n    }\n    function assertLeDecimal(uint a, uint b, uint decimals) internal {\n        if (a > b) {\n            emit log(\"Error: a <= b not satisfied [decimal uint]\");\n            emit log_named_decimal_uint(\"  Value a\", a, decimals);\n            emit log_named_decimal_uint(\"  Value b\", b, decimals);\n            fail();\n        }\n    }\n    function assertLeDecimal(uint a, uint b, uint decimals, string memory err) internal {\n        if (a > b) {\n            emit log_named_string(\"Error\", err);\n            assertGeDecimal(a, b, decimals);\n        }\n    }\n\n    function assertEq(string memory a, string memory b) internal {\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\n            emit log(\"Error: a == b not satisfied [string]\");\n            emit log_named_string(\"  Value a\", a);\n            emit log_named_string(\"  Value b\", b);\n            fail();\n        }\n    }\n    function assertEq(string memory a, string memory b, string memory err) internal {\n        if (keccak256(abi.encodePacked(a)) != keccak256(abi.encodePacked(b))) {\n            emit log_named_string(\"Error\", err);\n            assertEq(a, b);\n        }\n    }\n\n    function checkEq0(bytes memory a, bytes memory b) internal pure returns (bool ok) {\n        ok = true;\n        if (a.length == b.length) {\n            for (uint i = 0; i < a.length; i++) {\n                if (a[i] != b[i]) {\n                    ok = false;\n                }\n            }\n        } else {\n            ok = false;\n        }\n    }\n    function assertEq0(bytes memory a, bytes memory b) internal {\n        if (!checkEq0(a, b)) {\n            emit log(\"Error: a == b not satisfied [bytes]\");\n            emit log_named_bytes(\"  Expected\", a);\n            emit log_named_bytes(\"    Actual\", b);\n            fail();\n        }\n    }\n    function assertEq0(bytes memory a, bytes memory b, string memory err) internal {\n        if (!checkEq0(a, b)) {\n            emit log_named_string(\"Error\", err);\n            assertEq0(a, b);\n        }\n    }\n}\n"
    },
    "contracts/executionStrategies/StrategyAnyItemInASetForFixedPrice.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {MerkleProof} from \"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\";\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\nimport {IExecutionStrategy} from \"../interfaces/IExecutionStrategy.sol\";\n\n/**\n * @title StrategyAnyItemInASetForFixedPrice\n * @notice Strategy to send an order at a fixed price that can be\n * matched by any tokenId in a set of tokenIds.\n */\ncontract StrategyAnyItemInASetForFixedPrice is IExecutionStrategy {\n    uint256 public immutable PROTOCOL_FEE;\n\n    /**\n     * @notice Constructor\n     * @param _protocolFee: protocol fee (200 --> 2%, 400 --> 4%)\n     */\n    constructor(uint256 _protocolFee) {\n        PROTOCOL_FEE = _protocolFee;\n    }\n\n    /**\n     * @notice Check whether a taker ask order can be executed against a maker bid\n     * @param takerAsk taker ask order\n     * @param makerBid maker bid order\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     */\n    function canExecuteTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\n        external\n        view\n        override\n        returns (\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        // Precomputed merkleRoot (that contains the tokenIds that match a common characteristic)\n        bytes32 merkleRoot = abi.decode(makerBid.params, (bytes32));\n\n        // MerkleProof + indexInTree + tokenId\n        bytes32[] memory merkleProof = abi.decode(takerAsk.params, (bytes32[]));\n\n        // Compute the node\n        bytes32 node = keccak256(abi.encodePacked(takerAsk.tokenId));\n\n        // Return whether the order can be executed, the tokenId, and the amount to sell\n        return (\n            (MerkleProof.verify(merkleProof, merkleRoot, node) &&\n                (makerBid.price == takerAsk.price) &&\n                (makerBid.endTime >= block.timestamp) &&\n                (makerBid.startTime <= block.timestamp)),\n            takerAsk.tokenId,\n            makerBid.amount\n        );\n    }\n\n    /**\n     * @notice Check whether a taker bid order can be executed against a maker ask\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     * @dev It cannot execute but it is left for compatibility purposes with the interface.\n     */\n    function canExecuteTakerBid(OrderTypes.TakerOrder calldata, OrderTypes.MakerOrder calldata)\n        external\n        pure\n        override\n        returns (\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        return (false, 0, 0);\n    }\n\n    /**\n     * @notice Return protocol fee for this strategy\n     * @return protocol fee\n     */\n    function viewProtocolFee() external view override returns (uint256) {\n        return PROTOCOL_FEE;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/MerkleProof.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/MerkleProof.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev These functions deal with verification of Merkle Trees proofs.\n *\n * The proofs can be generated using the JavaScript library\n * https://github.com/miguelmota/merkletreejs[merkletreejs].\n * Note: the hashing algorithm should be keccak256 and pair sorting should be enabled.\n *\n * See `test/utils/cryptography/MerkleProof.test.js` for some examples.\n */\nlibrary MerkleProof {\n    /**\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\n     * defined by `root`. For this, a `proof` must be provided, containing\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\n     */\n    function verify(\n        bytes32[] memory proof,\n        bytes32 root,\n        bytes32 leaf\n    ) internal pure returns (bool) {\n        return processProof(proof, leaf) == root;\n    }\n\n    /**\n     * @dev Returns the rebuilt hash obtained by traversing a Merklee tree up\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\n     * hash matches the root of the tree. When processing the proof, the pairs\n     * of leafs & pre-images are assumed to be sorted.\n     *\n     * _Available since v4.4._\n     */\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\n        bytes32 computedHash = leaf;\n        for (uint256 i = 0; i < proof.length; i++) {\n            bytes32 proofElement = proof[i];\n            if (computedHash <= proofElement) {\n                // Hash(current computed hash + current element of the proof)\n                computedHash = keccak256(abi.encodePacked(computedHash, proofElement));\n            } else {\n                // Hash(current element of the proof + current computed hash)\n                computedHash = keccak256(abi.encodePacked(proofElement, computedHash));\n            }\n        }\n        return computedHash;\n    }\n}\n"
    },
    "contracts/executionStrategies/StrategyAnyItemFromCollectionForFixedPriceV1B.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\nimport {IExecutionStrategy} from \"../interfaces/IExecutionStrategy.sol\";\n\n/**\n * @title StrategyAnyItemFromCollectionForFixedPriceV1B\n * @notice Strategy to send an order at a fixed price that can be\n * matched by any tokenId for the collection.\n */\ncontract StrategyAnyItemFromCollectionForFixedPriceV1B is Ownable, IExecutionStrategy {\n    // Event if the protocol fee changes\n    event NewProtocolFee(uint256 protocolFee);\n\n    // Protocol fee\n    uint256 internal _protocolFee = 150;\n\n    /**\n     * @notice Check whether a taker ask order can be executed against a maker bid\n     * @param takerAsk taker ask order\n     * @param makerBid maker bid order\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     */\n    function canExecuteTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\n        external\n        view\n        override\n        returns (\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        return (\n            ((makerBid.price == takerAsk.price) &&\n                (makerBid.endTime >= block.timestamp) &&\n                (makerBid.startTime <= block.timestamp)),\n            takerAsk.tokenId,\n            makerBid.amount\n        );\n    }\n\n    /**\n     * @notice Check whether a taker bid order can be executed against a maker ask\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     * @dev It cannot execute but it is left for compatibility purposes with the interface.\n     */\n    function canExecuteTakerBid(OrderTypes.TakerOrder calldata, OrderTypes.MakerOrder calldata)\n        external\n        pure\n        override\n        returns (\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        return (false, 0, 0);\n    }\n\n    /**\n     * @notice Set new protocol fee for this strategy\n     * @param newProtocolFee protocol fee\n     */\n    function setProtocolFee(uint256 newProtocolFee) external onlyOwner {\n        require(newProtocolFee < _protocolFee, \"Owner: Protocol fee too high\");\n        _protocolFee = newProtocolFee;\n\n        emit NewProtocolFee(newProtocolFee);\n    }\n\n    /**\n     * @notice Return protocol fee for this strategy\n     * @return protocol fee\n     */\n    function viewProtocolFee() external view override returns (uint256) {\n        return _protocolFee;\n    }\n}\n"
    },
    "contracts/executionStrategies/StrategyAnyItemFromCollectionForFixedPrice.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {OrderTypes} from \"../libraries/OrderTypes.sol\";\nimport {IExecutionStrategy} from \"../interfaces/IExecutionStrategy.sol\";\n\n/**\n * @title StrategyAnyItemFromCollectionForFixedPrice\n * @notice Strategy to send an order at a fixed price that can be\n * matched by any tokenId for the collection.\n */\ncontract StrategyAnyItemFromCollectionForFixedPrice is IExecutionStrategy {\n    uint256 public immutable PROTOCOL_FEE;\n\n    /**\n     * @notice Constructor\n     * @param _protocolFee protocol fee (200 --> 2%, 400 --> 4%)\n     */\n    constructor(uint256 _protocolFee) {\n        PROTOCOL_FEE = _protocolFee;\n    }\n\n    /**\n     * @notice Check whether a taker ask order can be executed against a maker bid\n     * @param takerAsk taker ask order\n     * @param makerBid maker bid order\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     */\n    function canExecuteTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\n        external\n        view\n        override\n        returns (\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        return (\n            ((makerBid.price == takerAsk.price) &&\n                (makerBid.endTime >= block.timestamp) &&\n                (makerBid.startTime <= block.timestamp)),\n            takerAsk.tokenId,\n            makerBid.amount\n        );\n    }\n\n    /**\n     * @notice Check whether a taker bid order can be executed against a maker ask\n     * @return (whether strategy can be executed, tokenId to execute, amount of tokens to execute)\n     * @dev It cannot execute but it is left for compatibility purposes with the interface.\n     */\n    function canExecuteTakerBid(OrderTypes.TakerOrder calldata, OrderTypes.MakerOrder calldata)\n        external\n        pure\n        override\n        returns (\n            bool,\n            uint256,\n            uint256\n        )\n    {\n        return (false, 0, 0);\n    }\n\n    /**\n     * @notice Return protocol fee for this strategy\n     * @return protocol fee\n     */\n    function viewProtocolFee() external view override returns (uint256) {\n        return PROTOCOL_FEE;\n    }\n}\n"
    },
    "contracts/ExecutionManager.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {Ownable} from \"@openzeppelin/contracts/access/Ownable.sol\";\nimport {EnumerableSet} from \"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\";\n\nimport {IExecutionManager} from \"./interfaces/IExecutionManager.sol\";\n\n/**\n * @title ExecutionManager\n * @notice It allows adding/removing execution strategies for trading on the LooksRare exchange.\n */\ncontract ExecutionManager is IExecutionManager, Ownable {\n    using EnumerableSet for EnumerableSet.AddressSet;\n\n    EnumerableSet.AddressSet private _whitelistedStrategies;\n\n    event StrategyRemoved(address indexed strategy);\n    event StrategyWhitelisted(address indexed strategy);\n\n    /**\n     * @notice Add an execution strategy in the system\n     * @param strategy address of the strategy to add\n     */\n    function addStrategy(address strategy) external override onlyOwner {\n        require(!_whitelistedStrategies.contains(strategy), \"Strategy: Already whitelisted\");\n        _whitelistedStrategies.add(strategy);\n\n        emit StrategyWhitelisted(strategy);\n    }\n\n    /**\n     * @notice Remove an execution strategy from the system\n     * @param strategy address of the strategy to remove\n     */\n    function removeStrategy(address strategy) external override onlyOwner {\n        require(_whitelistedStrategies.contains(strategy), \"Strategy: Not whitelisted\");\n        _whitelistedStrategies.remove(strategy);\n\n        emit StrategyRemoved(strategy);\n    }\n\n    /**\n     * @notice Returns if an execution strategy is in the system\n     * @param strategy address of the strategy\n     */\n    function isStrategyWhitelisted(address strategy) external view override returns (bool) {\n        return _whitelistedStrategies.contains(strategy);\n    }\n\n    /**\n     * @notice View number of whitelisted strategies\n     */\n    function viewCountWhitelistedStrategies() external view override returns (uint256) {\n        return _whitelistedStrategies.length();\n    }\n\n    /**\n     * @notice See whitelisted strategies in the system\n     * @param cursor cursor (should start at 0 for first request)\n     * @param size size of the response (e.g., 50)\n     */\n    function viewWhitelistedStrategies(uint256 cursor, uint256 size)\n        external\n        view\n        override\n        returns (address[] memory, uint256)\n    {\n        uint256 length = size;\n\n        if (length > _whitelistedStrategies.length() - cursor) {\n            length = _whitelistedStrategies.length() - cursor;\n        }\n\n        address[] memory whitelistedStrategies = new address[](length);\n\n        for (uint256 i = 0; i < length; i++) {\n            whitelistedStrategies[i] = _whitelistedStrategies.at(cursor + i);\n        }\n\n        return (whitelistedStrategies, cursor + length);\n    }\n}\n"
    },
    "contracts/test/utils/MockERC721WithAdmin.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract MockERC721WithAdmin is ERC721 {\n    address public immutable admin;\n\n    uint256 public currentTokenId;\n\n    constructor(string memory _name, string memory _symbol) ERC721(_name, _symbol) {\n        admin = msg.sender;\n    }\n\n    function mint(address to) external {\n        _mint(to, currentTokenId);\n        currentTokenId++;\n    }\n}\n"
    },
    "contracts/test/utils/MockERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport {ERC721} from \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\n\ncontract MockERC721 is ERC721 {\n    uint256 public currentTokenId;\n\n    constructor(string memory _name, string memory _symbol) ERC721(_name, _symbol) {}\n\n    function mint(address to) external {\n        _mint(to, currentTokenId);\n        currentTokenId++;\n    }\n}\n"
    },
    "contracts/test/utils/MockERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\n\ncontract MockERC1155 is ERC1155 {\n    constructor(string memory _uri) ERC1155(_uri) {}\n\n    function mint(\n        address account,\n        uint256 id,\n        uint256 amount,\n        bytes memory data\n    ) external {\n        _mint(account, id, amount, data);\n    }\n\n    function mintBatch(\n        address to,\n        uint256[] memory ids,\n        uint256[] memory amounts,\n        bytes memory data\n    ) external {\n        _mintBatch(to, ids, amounts, data);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 888888
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
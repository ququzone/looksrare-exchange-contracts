{
  "address": "0x7b384346Af799093eB1d9e3B6c48E28Ebee5F92d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_marketplace",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidOrderLength",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "SignatureLengthInvalid",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SignatureParameterSInvalid",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        }
      ],
      "name": "SignatureParameterVInvalid",
      "type": "error"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "signer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collection",
              "type": "address"
            },
            {
              "internalType": "enum CollectionType",
              "name": "collectionType",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "tokenIds",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256[]",
              "name": "amounts",
              "type": "uint256[]"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "currency",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "startTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endTime",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "signature",
              "type": "bytes"
            }
          ],
          "internalType": "struct BasicOrder[]",
          "name": "orders",
          "type": "tuple[]"
        },
        {
          "internalType": "bytes[]",
          "name": "ordersExtraData",
          "type": "bytes[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isAtomic",
          "type": "bool"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketplace",
      "outputs": [
        {
          "internalType": "contract ILooksRareExchange",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x698324aea85e6ea8b4fea6156e9aa756c88319f60ede3c9206b0128f46db87cf",
  "receipt": {
    "to": null,
    "from": "0xBD62fB256F6F6a91B6F14716eA538FD2973E5c3b",
    "contractAddress": "0x7b384346Af799093eB1d9e3B6c48E28Ebee5F92d",
    "transactionIndex": 0,
    "gasUsed": "1159653",
    "logsBloom": "0x
    "blockHash": "0x8c6061799aabef83398692ecbcbc4529d7e34a882c65f6c7019a209cfed1ea8c",
    "transactionHash": "0x698324aea85e6ea8b4fea6156e9aa756c88319f60ede3c9206b0128f46db87cf",
    "logs": [],
    "blockNumber": 23970545,
    "cumulativeGasUsed": "1159653",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2FCf6eB6544F991e971f7aA03322FD3fF9b8794e"
  ],
  "numDeployments": 1,
  "solcInputHash": "3cc002f9962911b41fba7573c29b59f3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_marketplace\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidOrderLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"SignatureLengthInvalid\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SignatureParameterSInvalid\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"}],\"name\":\"SignatureParameterVInvalid\",\"type\":\"error\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"enum CollectionType\",\"name\":\"collectionType\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"currency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"internalType\":\"struct BasicOrder[]\",\"name\":\"orders\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes[]\",\"name\":\"ordersExtraData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isAtomic\",\"type\":\"bool\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketplace\",\"outputs\":[{\"internalType\":\"contract ILooksRareExchange\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_marketplace\":\"LooksRareExchange's address\"}},\"execute((address,address,uint8,uint256[],uint256[],uint256,address,uint256,uint256,bytes)[],bytes[],bytes,address,bool)\":{\"details\":\"extraData is not used\",\"params\":{\"isAtomic\":\"Flag to enable atomic trades (all or nothing) or partial trades\",\"orders\":\"Orders to be executed by LooksRare\",\"ordersExtraData\":\"Extra data for each order\",\"recipient\":\"The address to receive the purchased NFTs\"}}},\"title\":\"LooksRareProxy\",\"version\":1},\"userdoc\":{\"errors\":{\"SignatureLengthInvalid(uint256)\":[{\"notice\":\"It is emitted if the signature's length is neither 64 nor 65 bytes.\"}],\"SignatureParameterSInvalid()\":[{\"notice\":\"It is emitted if the signature is invalid due to S parameter.\"}],\"SignatureParameterVInvalid(uint8)\":[{\"notice\":\"It is emitted if the signature is invalid due to V parameter.\"}]},\"kind\":\"user\",\"methods\":{\"execute((address,address,uint8,uint256[],uint256[],uint256,address,uint256,uint256,bytes)[],bytes[],bytes,address,bool)\":{\"notice\":\"Execute LooksRare NFT sweeps in a single transaction\"}},\"notice\":\"This contract allows NFT sweepers to batch buy NFTs from LooksRare         by passing high-level structs + low-level bytes as calldata.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LooksRareBatch.sol\":\"LooksRareBatch\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":888888},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n *\\n * _Available since v3.1._\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` tokens of token type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the amount of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(address[] calldata accounts, uint256[] calldata ids)\\n        external\\n        view\\n        returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers `amount` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must be have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `amount`.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `amounts` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata amounts,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8e93de94c9062ebc94fb7e2e3929b0781ac6a2b7772e2f7a59045861c93e5be9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/LooksRareBatch.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\nimport {ILooksRareExchange} from \\\"./interfaces/ILooksRareExchange.sol\\\";\\nimport {OrderTypes} from \\\"./libraries/OrderTypes.sol\\\";\\nimport {CollectionType} from \\\"./libraries/OrderEnums.sol\\\";\\nimport {BasicOrder} from \\\"./libraries/OrderStructs.sol\\\";\\nimport {IProxy} from \\\"./interfaces/IProxy.sol\\\";\\nimport {InvalidOrderLength} from \\\"./libraries/SharedErrors.sol\\\";\\nimport {SignatureCheckerCalldata} from \\\"./libraries/SignatureCheckerCalldata.sol\\\";\\n\\nabstract contract TokenTransferrer {\\n    function _transferTokenToRecipient(\\n        CollectionType collectionType,\\n        address collection,\\n        address recipient,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) internal {\\n        if (collectionType == CollectionType.ERC721) {\\n            IERC721(collection).transferFrom(address(this), recipient, tokenId);\\n        } else if (collectionType == CollectionType.ERC1155) {\\n            IERC1155(collection).safeTransferFrom(address(this), recipient, tokenId, amount, \\\"\\\");\\n        }\\n    }\\n}\\n\\n/**\\n * @title LooksRareProxy\\n * @notice This contract allows NFT sweepers to batch buy NFTs from LooksRare\\n *         by passing high-level structs + low-level bytes as calldata.\\n */\\ncontract LooksRareBatch is TokenTransferrer {\\n    /**\\n     * @param makerAskPrice Maker ask price, which is not necessarily equal to the\\n     *                      taker bid price\\n     * @param minPercentageToAsk The maker's minimum % to receive from the sale\\n     * @param nonce The maker's nonce\\n     * @param strategy LooksRare execution strategy\\n     */\\n    struct OrderExtraData {\\n        uint256 makerAskPrice;\\n        uint256 minPercentageToAsk;\\n        uint256 nonce;\\n        address strategy;\\n    }\\n\\n    ILooksRareExchange public immutable marketplace;\\n\\n    /**\\n     * @param _marketplace LooksRareExchange's address\\n     */\\n    constructor(address _marketplace) {\\n        marketplace = ILooksRareExchange(_marketplace);\\n    }\\n\\n    /**\\n     * @notice Execute LooksRare NFT sweeps in a single transaction\\n     * @dev extraData is not used\\n     * @param orders Orders to be executed by LooksRare\\n     * @param ordersExtraData Extra data for each order\\n     * @param recipient The address to receive the purchased NFTs\\n     * @param isAtomic Flag to enable atomic trades (all or nothing) or partial trades\\n     */\\n    function execute(\\n        BasicOrder[] calldata orders,\\n        bytes[] calldata ordersExtraData,\\n        bytes memory, /* extraData */\\n        address recipient,\\n        bool isAtomic\\n    ) external payable {\\n        uint256 ordersLength = orders.length;\\n        if (ordersLength == 0 || ordersLength != ordersExtraData.length) {\\n            revert InvalidOrderLength();\\n        }\\n\\n        for (uint256 i; i < ordersLength; ) {\\n            BasicOrder calldata order = orders[i];\\n\\n            OrderExtraData memory orderExtraData = abi.decode(ordersExtraData[i], (OrderExtraData));\\n\\n            OrderTypes.MakerOrder memory makerAsk;\\n            {\\n                makerAsk.isOrderAsk = true;\\n                makerAsk.signer = order.signer;\\n                makerAsk.collection = order.collection;\\n                makerAsk.tokenId = order.tokenIds[0];\\n                makerAsk.price = orderExtraData.makerAskPrice;\\n                makerAsk.amount = order.amounts[0];\\n                makerAsk.strategy = orderExtraData.strategy;\\n                makerAsk.nonce = orderExtraData.nonce;\\n                makerAsk.minPercentageToAsk = orderExtraData.minPercentageToAsk;\\n                makerAsk.currency = order.currency;\\n                makerAsk.startTime = order.startTime;\\n                makerAsk.endTime = order.endTime;\\n\\n                (bytes32 r, bytes32 s, uint8 v) = SignatureCheckerCalldata.splitSignature(order.signature);\\n                makerAsk.v = v;\\n                makerAsk.r = r;\\n                makerAsk.s = s;\\n            }\\n\\n            OrderTypes.TakerOrder memory takerBid;\\n            {\\n                // No need to set isOrderAsk as its default value is false\\n                takerBid.taker = address(this);\\n                takerBid.price = order.price;\\n                takerBid.tokenId = makerAsk.tokenId;\\n                takerBid.minPercentageToAsk = makerAsk.minPercentageToAsk;\\n            }\\n\\n            _executeSingleOrder(takerBid, makerAsk, recipient, order.collectionType, isAtomic);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    function _executeSingleOrder(\\n        OrderTypes.TakerOrder memory takerBid,\\n        OrderTypes.MakerOrder memory makerAsk,\\n        address recipient,\\n        CollectionType collectionType,\\n        bool isAtomic\\n    ) private {\\n        if (isAtomic) {\\n            marketplace.matchAskWithTakerBidUsingETHAndWETH{value: takerBid.price}(takerBid, makerAsk);\\n            _transferTokenToRecipient(\\n                collectionType,\\n                makerAsk.collection,\\n                recipient,\\n                makerAsk.tokenId,\\n                makerAsk.amount\\n            );\\n        } else {\\n            try marketplace.matchAskWithTakerBidUsingETHAndWETH{value: takerBid.price}(takerBid, makerAsk) {\\n                _transferTokenToRecipient(\\n                    collectionType,\\n                    makerAsk.collection,\\n                    recipient,\\n                    makerAsk.tokenId,\\n                    makerAsk.amount\\n                );\\n            } catch {}\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa2fe1d60287766addabddabb802ec93b5380342d99c43651fe6dce6bdb05502c\",\"license\":\"MIT\"},\"contracts/interfaces/ILooksRareExchange.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {OrderTypes} from \\\"../libraries/OrderTypes.sol\\\";\\n\\ninterface ILooksRareExchange {\\n    function matchAskWithTakerBidUsingETHAndWETH(\\n        OrderTypes.TakerOrder calldata takerBid,\\n        OrderTypes.MakerOrder calldata makerAsk\\n    ) external payable;\\n\\n    function matchAskWithTakerBid(OrderTypes.TakerOrder calldata takerBid, OrderTypes.MakerOrder calldata makerAsk)\\n        external;\\n\\n    function matchBidWithTakerAsk(OrderTypes.TakerOrder calldata takerAsk, OrderTypes.MakerOrder calldata makerBid)\\n        external;\\n}\\n\",\"keccak256\":\"0x30782a7bdc524696ee0834a3867474a46f4cc29d266dbd287ad266e48fe0499c\",\"license\":\"MIT\"},\"contracts/interfaces/IProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {BasicOrder} from \\\"../libraries/OrderStructs.sol\\\";\\n\\ninterface IProxy {\\n    error InvalidCaller();\\n\\n    /**\\n     * @notice Execute NFT sweeps in a single transaction\\n     * @param orders Orders to be executed\\n     * @param ordersExtraData Extra data for each order\\n     * @param extraData Extra data for the whole transaction\\n     * @param recipient The address to receive the purchased NFTs\\n     * @param isAtomic Flag to enable atomic trades (all or nothing)\\n     *                 or partial trades\\n     */\\n    function execute(\\n        BasicOrder[] calldata orders,\\n        bytes[] calldata ordersExtraData,\\n        bytes calldata extraData,\\n        address recipient,\\n        bool isAtomic\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xecf47bf881102b5fc997757f6bed579c4f10cad599055d5accab082b791b3a09\",\"license\":\"MIT\"},\"contracts/libraries/OrderEnums.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nenum CollectionType {\\n    ERC721,\\n    ERC1155\\n}\",\"keccak256\":\"0x825f8bcfd6651f704f908974aef5304b0254ff5b4906716bd96bb4887d133c0a\",\"license\":\"MIT\"},\"contracts/libraries/OrderStructs.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CollectionType} from \\\"./OrderEnums.sol\\\";\\n\\n/**\\n * @param signer The order's maker\\n * @param collection The address of the ERC721/ERC1155 token to be purchased\\n * @param collectionType 0 for ERC721, 1 for ERC1155\\n * @param tokenIds The IDs of the tokens to be purchased\\n * @param amounts Always 1 when ERC721, can be > 1 if ERC1155\\n * @param price The *taker bid* price to pay for the order\\n * @param currency The order's currency, address(0) for ETH\\n * @param startTime The timestamp when the order starts becoming valid\\n * @param endTime The timestamp when the order stops becoming valid\\n * @param signature split to v,r,s for LooksRare\\n */\\nstruct BasicOrder {\\n    address signer;\\n    address collection;\\n    CollectionType collectionType;\\n    uint256[] tokenIds;\\n    uint256[] amounts;\\n    uint256 price;\\n    address currency;\\n    uint256 startTime;\\n    uint256 endTime;\\n    bytes signature;\\n}\\n\\n/**\\n * @param amount ERC20 transfer amount\\n * @param currency ERC20 transfer currency\\n */\\nstruct TokenTransfer {\\n    uint256 amount;\\n    address currency;\\n}\\n\",\"keccak256\":\"0x3d874604c8e58ee57f0a789f16c90cb5ded963d0bcf6edaf56387c62450313c4\",\"license\":\"MIT\"},\"contracts/libraries/OrderTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title OrderTypes\\n * @notice This library contains order types for the LooksRare exchange.\\n */\\nlibrary OrderTypes {\\n    // keccak256(\\\"MakerOrder(bool isOrderAsk,address signer,address collection,uint256 price,uint256 tokenId,uint256 amount,address strategy,address currency,uint256 nonce,uint256 startTime,uint256 endTime,uint256 minPercentageToAsk,bytes params)\\\")\\n    bytes32 internal constant MAKER_ORDER_HASH = 0x40261ade532fa1d2c7293df30aaadb9b3c616fae525a0b56d3d411c841a85028;\\n\\n    struct MakerOrder {\\n        bool isOrderAsk; // true --> ask / false --> bid\\n        address signer; // signer of the maker order\\n        address collection; // collection address\\n        uint256 price; // price (used as )\\n        uint256 tokenId; // id of the token\\n        uint256 amount; // amount of tokens to sell/purchase (must be 1 for ERC721, 1+ for ERC1155)\\n        address strategy; // strategy for trade execution (e.g., DutchAuction, StandardSaleForFixedPrice)\\n        address currency; // currency (e.g., WETH)\\n        uint256 nonce; // order nonce (must be unique unless new maker order is meant to override existing one e.g., lower ask price)\\n        uint256 startTime; // startTime in timestamp\\n        uint256 endTime; // endTime in timestamp\\n        uint256 minPercentageToAsk; // slippage protection (9000 --> 90% of the final price must return to ask)\\n        bytes params; // additional parameters\\n        uint8 v; // v: parameter (27 or 28)\\n        bytes32 r; // r: parameter\\n        bytes32 s; // s: parameter\\n    }\\n\\n    struct TakerOrder {\\n        bool isOrderAsk; // true --> ask / false --> bid\\n        address taker; // msg.sender\\n        uint256 price; // final price for the purchase\\n        uint256 tokenId;\\n        uint256 minPercentageToAsk; // // slippage protection (9000 --> 90% of the final price must return to ask)\\n        bytes params; // other params (e.g., tokenId)\\n    }\\n\\n    function hash(MakerOrder memory makerOrder) internal pure returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    MAKER_ORDER_HASH,\\n                    makerOrder.isOrderAsk,\\n                    makerOrder.signer,\\n                    makerOrder.collection,\\n                    makerOrder.price,\\n                    makerOrder.tokenId,\\n                    makerOrder.amount,\\n                    makerOrder.strategy,\\n                    makerOrder.currency,\\n                    makerOrder.nonce,\\n                    makerOrder.startTime,\\n                    makerOrder.endTime,\\n                    makerOrder.minPercentageToAsk,\\n                    keccak256(makerOrder.params)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xc298cc330a3b38fbc02d80d6561ef6245f050a89301190738211bd4d0721dd93\",\"license\":\"MIT\"},\"contracts/libraries/SharedErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nerror InvalidOrderLength();\\nerror TradeExecutionFailed();\\nerror ZeroAddress();\\n\",\"keccak256\":\"0x0afa6aaf02037436d3e9cd3b1526868e87be213247e09cda2365f789a6959f03\",\"license\":\"MIT\"},\"contracts/libraries/SignatureCheckerCalldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Errors\\nimport {SignatureParameterSInvalid, SignatureParameterVInvalid, SignatureLengthInvalid} from \\\"./SignatureCheckerErrors.sol\\\";\\n\\n/**\\n * @title SignatureChecker\\n * @notice This library allows verification of signatures for both EOAs and contracts.\\n */\\nlibrary SignatureCheckerCalldata {\\n    /**\\n     * @notice This function is internal and splits a signature into r, s, v outputs.\\n     * @param signature A 64 or 65 bytes signature\\n     * @return r The r output of the signature\\n     * @return s The s output of the signature\\n     * @return v The recovery identifier, must be 27 or 28\\n     */\\n    function splitSignature(bytes calldata signature) internal pure returns (bytes32 r, bytes32 s, uint8 v) {\\n        uint256 length = signature.length;\\n        if (length == 65) {\\n            assembly {\\n                r := calldataload(signature.offset)\\n                s := calldataload(add(signature.offset, 0x20))\\n                v := byte(0, calldataload(add(signature.offset, 0x40)))\\n            }\\n        } else if (length == 64) {\\n            assembly {\\n                r := calldataload(signature.offset)\\n                let vs := calldataload(add(signature.offset, 0x20))\\n                s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n                v := add(shr(255, vs), 27)\\n            }\\n        } else {\\n            revert SignatureLengthInvalid(length);\\n        }\\n\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            revert SignatureParameterSInvalid();\\n        }\\n\\n        if (v != 27 && v != 28) {\\n            revert SignatureParameterVInvalid(v);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xff182a65be0247750cf68621c942f0ce2c04c74bd9dc36c04e9436a3bb108e12\",\"license\":\"MIT\"},\"contracts/libraries/SignatureCheckerErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice It is emitted if the signer is null.\\n */\\nerror NullSignerAddress();\\n\\n/**\\n * @notice It is emitted if the signature is invalid for an EOA (the address recovered is not the expected one).\\n */\\nerror SignatureEOAInvalid();\\n\\n/**\\n * @notice It is emitted if the signature is invalid for a ERC1271 contract signer.\\n */\\nerror SignatureERC1271Invalid();\\n\\n/**\\n * @notice It is emitted if the signature's length is neither 64 nor 65 bytes.\\n */\\nerror SignatureLengthInvalid(uint256 length);\\n\\n/**\\n * @notice It is emitted if the signature is invalid due to S parameter.\\n */\\nerror SignatureParameterSInvalid();\\n\\n/**\\n * @notice It is emitted if the signature is invalid due to V parameter.\\n */\\nerror SignatureParameterVInvalid(uint8 v);\\n\",\"keccak256\":\"0x913bb67724bc57700aa6995edad5618201ed562caccf807fcc8289cf23ef8237\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b50604051610f54380380610f5483398101604081905261002f91610044565b60601b6001600160601b031916608052610074565b60006020828403121561005657600080fd5b81516001600160a01b038116811461006d57600080fd5b9392505050565b60805160601c610eb561009f6000396000818160550152818161056001526106290152610eb56000f3fe6080604052600436106100295760003560e01c8063a809ce351461002e578063abc8c7af14610043575b600080fd5b61004161003c3660046108c1565b6100a0565b005b34801561004f57600080fd5b506100777f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b858015806100ae5750808514155b156100e5576040517fc588f91000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156103b0573689898381811061010357610103610e21565b90506020028101906101159190610d65565b9050600088888481811061012b5761012b610e21565b905060200281019061013d9190610d00565b81019061014a9190610a07565b60408051610200810182526000602080830182905292820181905260608083018290526080830182905260a0830182905260c0830182905260e0830182905261010083018290526101208301829052610140830182905261016083018290526101808301526101a082018190526101c082018190526101e0820152600181529192506101d89084018461089f565b73ffffffffffffffffffffffffffffffffffffffff16602080830191909152610207906040850190850161089f565b73ffffffffffffffffffffffffffffffffffffffff16604082015261022f6060840184610c98565b600081811061024057610240610e21565b6020029190910135608080840191909152835160608401526102659150840184610c98565b600081811061027657610276610e21565b6020908102929092013560a084015250606083015173ffffffffffffffffffffffffffffffffffffffff1660c0808401919091526040840151610100840152908301516101608301526102cf9060e0850190850161089f565b73ffffffffffffffffffffffffffffffffffffffff1660e08083019190915283013561012080830191909152610100840135610140830152600090819081906103239061031e90880188610d00565b6103bb565b60ff166101a08701526101c08601919091526101e085015250506040805160c08101825260008082526060808301828152608080850193845260a08086018490523060208701528a01358587015287015190526101608601519091529092506103a191839185918c9161039b91908a01908a016109e6565b8b610518565b846001019450505050506100e8565b505050505050505050565b600080808360418114156103e3578535935060208601359250604086013560001a9150610462565b806040141561042857853593507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6020870135908116935060ff1c601b019150610462565b6040517fd42b4bbd000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156104bc576040517fc185125200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160ff16601b141580156104d457508160ff16601c14155b15610510576040517f417893a400000000000000000000000000000000000000000000000000000000815260ff83166004820152602401610459565b509250925092565b80156105e75760408086015190517fb4e4b29600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163b4e4b296916105979089908990600401610adc565b6000604051808303818588803b1580156105b057600080fd5b505af11580156105c4573d6000803e3d6000fd5b50505050506105e28285604001518587608001518860a001516106b4565b6106ad565b60408086015190517fb4e4b29600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163b4e4b296916106609089908990600401610adc565b6000604051808303818588803b15801561067957600080fd5b505af19350505050801561068b575060015b610694576106ad565b6106ad8285604001518587608001518860a001516106b4565b5050505050565b60008560018111156106c8576106c8610df2565b1415610761576040517f23b872dd00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8481166024830152604482018490528516906323b872dd90606401600060405180830381600087803b15801561074457600080fd5b505af1158015610758573d6000803e3d6000fd5b505050506106ad565b600185600181111561077557610775610df2565b14156106ad576040517ff242432a00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8481166024830152604482018490526064820183905260a06084830152600060a483015285169063f242432a9060c401600060405180830381600087803b15801561080657600080fd5b505af11580156103b0573d6000803e3d6000fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461083e57600080fd5b919050565b60008083601f84011261085557600080fd5b50813567ffffffffffffffff81111561086d57600080fd5b6020830191508360208260051b850101111561088857600080fd5b9250929050565b8035801515811461083e57600080fd5b6000602082840312156108b157600080fd5b6108ba8261081a565b9392505050565b600080600080600080600060a0888a0312156108dc57600080fd5b873567ffffffffffffffff808211156108f457600080fd5b6109008b838c01610843565b909950975060209150898201358181111561091a57600080fd5b6109268c828d01610843565b90985096505060408a01358181111561093e57600080fd5b8a01601f81018c1361094f57600080fd5b80358281111561096157610961610e50565b610991847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610da3565b92508083528c848284010111156109a757600080fd5b80848301858501376000848285010152505080945050506109ca6060890161081a565b91506109d86080890161088f565b905092959891949750929550565b6000602082840312156109f857600080fd5b8135600281106108ba57600080fd5b600060808284031215610a1957600080fd5b6040516080810181811067ffffffffffffffff82111715610a3c57610a3c610e50565b8060405250823581526020830135602082015260408301356040820152610a656060840161081a565b60608201529392505050565b6000815180845260005b81811015610a9757602081850181015186830182015201610a7b565b81811115610aa9576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60408152600061010084511515604084015273ffffffffffffffffffffffffffffffffffffffff602086015116606084015260408501516080840152606085015160a0840152608085015160c084015260a085015160c060e0850152610b4482850182610a71565b848103602086015285511515815290506102006020860151610b7e602084018273ffffffffffffffffffffffffffffffffffffffff169052565b506040860151610ba6604084018273ffffffffffffffffffffffffffffffffffffffff169052565b50606086015160608301526080860151608083015260a086015160a083015260c0860151610bec60c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060e0860151610c1460e084018273ffffffffffffffffffffffffffffffffffffffff169052565b50858301519282019290925261012080860151908201526101408086015190820152610160808601519082015261018080860151818301849052909290610c5d82840182610a71565b935050506101a080860151610c768284018260ff169052565b50506101c085810151908201526101e094850151940193909352509092915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610ccd57600080fd5b83018035915067ffffffffffffffff821115610ce857600080fd5b6020019150600581901b360382131561088857600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610d3557600080fd5b83018035915067ffffffffffffffff821115610d5057600080fd5b60200191503681900382131561088857600080fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec1833603018112610d9957600080fd5b9190910192915050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610dea57610dea610e50565b604052919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212205cec482647598135be6d79a9e302eba45c3f274c6c7b4365a45f4f1d1e340d0064736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100295760003560e01c8063a809ce351461002e578063abc8c7af14610043575b600080fd5b61004161003c3660046108c1565b6100a0565b005b34801561004f57600080fd5b506100777f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b858015806100ae5750808514155b156100e5576040517fc588f91000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b818110156103b0573689898381811061010357610103610e21565b90506020028101906101159190610d65565b9050600088888481811061012b5761012b610e21565b905060200281019061013d9190610d00565b81019061014a9190610a07565b60408051610200810182526000602080830182905292820181905260608083018290526080830182905260a0830182905260c0830182905260e0830182905261010083018290526101208301829052610140830182905261016083018290526101808301526101a082018190526101c082018190526101e0820152600181529192506101d89084018461089f565b73ffffffffffffffffffffffffffffffffffffffff16602080830191909152610207906040850190850161089f565b73ffffffffffffffffffffffffffffffffffffffff16604082015261022f6060840184610c98565b600081811061024057610240610e21565b6020029190910135608080840191909152835160608401526102659150840184610c98565b600081811061027657610276610e21565b6020908102929092013560a084015250606083015173ffffffffffffffffffffffffffffffffffffffff1660c0808401919091526040840151610100840152908301516101608301526102cf9060e0850190850161089f565b73ffffffffffffffffffffffffffffffffffffffff1660e08083019190915283013561012080830191909152610100840135610140830152600090819081906103239061031e90880188610d00565b6103bb565b60ff166101a08701526101c08601919091526101e085015250506040805160c08101825260008082526060808301828152608080850193845260a08086018490523060208701528a01358587015287015190526101608601519091529092506103a191839185918c9161039b91908a01908a016109e6565b8b610518565b846001019450505050506100e8565b505050505050505050565b600080808360418114156103e3578535935060208601359250604086013560001a9150610462565b806040141561042857853593507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6020870135908116935060ff1c601b019150610462565b6040517fd42b4bbd000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156104bc576040517fc185125200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8160ff16601b141580156104d457508160ff16601c14155b15610510576040517f417893a400000000000000000000000000000000000000000000000000000000815260ff83166004820152602401610459565b509250925092565b80156105e75760408086015190517fb4e4b29600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163b4e4b296916105979089908990600401610adc565b6000604051808303818588803b1580156105b057600080fd5b505af11580156105c4573d6000803e3d6000fd5b50505050506105e28285604001518587608001518860a001516106b4565b6106ad565b60408086015190517fb4e4b29600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163b4e4b296916106609089908990600401610adc565b6000604051808303818588803b15801561067957600080fd5b505af19350505050801561068b575060015b610694576106ad565b6106ad8285604001518587608001518860a001516106b4565b5050505050565b60008560018111156106c8576106c8610df2565b1415610761576040517f23b872dd00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8481166024830152604482018490528516906323b872dd90606401600060405180830381600087803b15801561074457600080fd5b505af1158015610758573d6000803e3d6000fd5b505050506106ad565b600185600181111561077557610775610df2565b14156106ad576040517ff242432a00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8481166024830152604482018490526064820183905260a06084830152600060a483015285169063f242432a9060c401600060405180830381600087803b15801561080657600080fd5b505af11580156103b0573d6000803e3d6000fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461083e57600080fd5b919050565b60008083601f84011261085557600080fd5b50813567ffffffffffffffff81111561086d57600080fd5b6020830191508360208260051b850101111561088857600080fd5b9250929050565b8035801515811461083e57600080fd5b6000602082840312156108b157600080fd5b6108ba8261081a565b9392505050565b600080600080600080600060a0888a0312156108dc57600080fd5b873567ffffffffffffffff808211156108f457600080fd5b6109008b838c01610843565b909950975060209150898201358181111561091a57600080fd5b6109268c828d01610843565b90985096505060408a01358181111561093e57600080fd5b8a01601f81018c1361094f57600080fd5b80358281111561096157610961610e50565b610991847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610da3565b92508083528c848284010111156109a757600080fd5b80848301858501376000848285010152505080945050506109ca6060890161081a565b91506109d86080890161088f565b905092959891949750929550565b6000602082840312156109f857600080fd5b8135600281106108ba57600080fd5b600060808284031215610a1957600080fd5b6040516080810181811067ffffffffffffffff82111715610a3c57610a3c610e50565b8060405250823581526020830135602082015260408301356040820152610a656060840161081a565b60608201529392505050565b6000815180845260005b81811015610a9757602081850181015186830182015201610a7b565b81811115610aa9576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60408152600061010084511515604084015273ffffffffffffffffffffffffffffffffffffffff602086015116606084015260408501516080840152606085015160a0840152608085015160c084015260a085015160c060e0850152610b4482850182610a71565b848103602086015285511515815290506102006020860151610b7e602084018273ffffffffffffffffffffffffffffffffffffffff169052565b506040860151610ba6604084018273ffffffffffffffffffffffffffffffffffffffff169052565b50606086015160608301526080860151608083015260a086015160a083015260c0860151610bec60c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060e0860151610c1460e084018273ffffffffffffffffffffffffffffffffffffffff169052565b50858301519282019290925261012080860151908201526101408086015190820152610160808601519082015261018080860151818301849052909290610c5d82840182610a71565b935050506101a080860151610c768284018260ff169052565b50506101c085810151908201526101e094850151940193909352509092915050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610ccd57600080fd5b83018035915067ffffffffffffffff821115610ce857600080fd5b6020019150600581901b360382131561088857600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610d3557600080fd5b83018035915067ffffffffffffffff821115610d5057600080fd5b60200191503681900382131561088857600080fd5b600082357ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec1833603018112610d9957600080fd5b9190910192915050565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610dea57610dea610e50565b604052919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212205cec482647598135be6d79a9e302eba45c3f274c6c7b4365a45f4f1d1e340d0064736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_marketplace": "LooksRareExchange's address"
        }
      },
      "execute((address,address,uint8,uint256[],uint256[],uint256,address,uint256,uint256,bytes)[],bytes[],bytes,address,bool)": {
        "details": "extraData is not used",
        "params": {
          "isAtomic": "Flag to enable atomic trades (all or nothing) or partial trades",
          "orders": "Orders to be executed by LooksRare",
          "ordersExtraData": "Extra data for each order",
          "recipient": "The address to receive the purchased NFTs"
        }
      }
    },
    "title": "LooksRareProxy",
    "version": 1
  },
  "userdoc": {
    "errors": {
      "SignatureLengthInvalid(uint256)": [
        {
          "notice": "It is emitted if the signature's length is neither 64 nor 65 bytes."
        }
      ],
      "SignatureParameterSInvalid()": [
        {
          "notice": "It is emitted if the signature is invalid due to S parameter."
        }
      ],
      "SignatureParameterVInvalid(uint8)": [
        {
          "notice": "It is emitted if the signature is invalid due to V parameter."
        }
      ]
    },
    "kind": "user",
    "methods": {
      "execute((address,address,uint8,uint256[],uint256[],uint256,address,uint256,uint256,bytes)[],bytes[],bytes,address,bool)": {
        "notice": "Execute LooksRare NFT sweeps in a single transaction"
      }
    },
    "notice": "This contract allows NFT sweepers to batch buy NFTs from LooksRare         by passing high-level structs + low-level bytes as calldata.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
{
  "address": "0xac7B54F18f0afC7B1227d931475aCC7e0EB96Ed5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_royaltyFeeRegistry",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "INTERFACE_ID_ERC2981",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "calculateRoyaltyFeeAndGetRecipient",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyFeeRegistry",
      "outputs": [
        {
          "internalType": "contract IRoyaltyFeeRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1e7daeed2b287f228cb58c6660aa6fea2d010b77e285bca5a47cd8a1105378d8",
  "receipt": {
    "to": null,
    "from": "0xBD62fB256F6F6a91B6F14716eA538FD2973E5c3b",
    "contractAddress": "0xac7B54F18f0afC7B1227d931475aCC7e0EB96Ed5",
    "transactionIndex": 0,
    "gasUsed": "616986",
    "logsBloom": "0x
    "blockHash": "0x098c2f699a880584e85465bb5ec4b0c82f1b16169b002d76f25a7c53ff20c0bf",
    "transactionHash": "0x1e7daeed2b287f228cb58c6660aa6fea2d010b77e285bca5a47cd8a1105378d8",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 17431276,
        "transactionHash": "0x1e7daeed2b287f228cb58c6660aa6fea2d010b77e285bca5a47cd8a1105378d8",
        "address": "0xac7B54F18f0afC7B1227d931475aCC7e0EB96Ed5",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000bd62fb256f6f6a91b6f14716ea538fd2973e5c3b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x098c2f699a880584e85465bb5ec4b0c82f1b16169b002d76f25a7c53ff20c0bf"
      }
    ],
    "blockNumber": 17431276,
    "cumulativeGasUsed": "616986",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x502EcC2dE21BA2e9ADD883Da4E162e66F85982CB"
  ],
  "numDeployments": 1,
  "solcInputHash": "9b1f25f60f25cdea13c82d221bb53b0c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_royaltyFeeRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"INTERFACE_ID_ERC2981\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"calculateRoyaltyFeeAndGetRecipient\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyFeeRegistry\",\"outputs\":[{\"internalType\":\"contract IRoyaltyFeeRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateRoyaltyFeeAndGetRecipient(address,uint256,uint256)\":{\"params\":{\"amount\":\"amount to transfer\",\"collection\":\"address of the NFT contract\",\"tokenId\":\"tokenId\"}},\"constructor\":{\"params\":{\"_royaltyFeeRegistry\":\"address of the RoyaltyFeeRegistry\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"RoyaltyFeeManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateRoyaltyFeeAndGetRecipient(address,uint256,uint256)\":{\"notice\":\"Calculate royalty fee and get recipient\"},\"constructor\":{\"notice\":\"Constructor\"}},\"notice\":\"It handles the logic to check and transfer royalty fees (if any).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RoyaltyFeeManager.sol\":\"RoyaltyFeeManager\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":888888},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC2981.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x40cc76b7f62d20c90b3a18479ad0b1d20de7b2cc665cb3d7585362403651e62a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/RoyaltyFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC165, IERC2981} from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\n\\nimport {IRoyaltyFeeManager} from \\\"./interfaces/IRoyaltyFeeManager.sol\\\";\\nimport {IRoyaltyFeeRegistry} from \\\"./interfaces/IRoyaltyFeeRegistry.sol\\\";\\n\\n/**\\n * @title RoyaltyFeeManager\\n * @notice It handles the logic to check and transfer royalty fees (if any).\\n */\\ncontract RoyaltyFeeManager is IRoyaltyFeeManager, Ownable {\\n    // https://eips.ethereum.org/EIPS/eip-2981\\n    bytes4 public constant INTERFACE_ID_ERC2981 = 0x2a55205a;\\n\\n    IRoyaltyFeeRegistry public immutable royaltyFeeRegistry;\\n\\n    /**\\n     * @notice Constructor\\n     * @param _royaltyFeeRegistry address of the RoyaltyFeeRegistry\\n     */\\n    constructor(address _royaltyFeeRegistry) {\\n        royaltyFeeRegistry = IRoyaltyFeeRegistry(_royaltyFeeRegistry);\\n    }\\n\\n    /**\\n     * @notice Calculate royalty fee and get recipient\\n     * @param collection address of the NFT contract\\n     * @param tokenId tokenId\\n     * @param amount amount to transfer\\n     */\\n    function calculateRoyaltyFeeAndGetRecipient(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external view override returns (address, uint256) {\\n        // 1. Check if there is a royalty info in the system\\n        (address receiver, uint256 royaltyAmount) = royaltyFeeRegistry.royaltyInfo(collection, amount);\\n\\n        // 2. If the receiver is address(0), fee is null, check if it supports the ERC2981 interface\\n        if ((receiver == address(0)) || (royaltyAmount == 0)) {\\n            if (IERC165(collection).supportsInterface(INTERFACE_ID_ERC2981)) {\\n                (receiver, royaltyAmount) = IERC2981(collection).royaltyInfo(tokenId, amount);\\n            }\\n        }\\n        return (receiver, royaltyAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xdf0684f03aa24c2deacc346b7a4096ac9d9cc5b127d12796066c24e6d2f64d67\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyFeeManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRoyaltyFeeManager {\\n    function calculateRoyaltyFeeAndGetRecipient(\\n        address collection,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external view returns (address, uint256);\\n}\\n\",\"keccak256\":\"0xe91c4fa5c0ae8f35521d0853efcb9e617299909032bce6e98981d11c06088bc6\",\"license\":\"MIT\"},\"contracts/interfaces/IRoyaltyFeeRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IRoyaltyFeeRegistry {\\n    function updateRoyaltyInfoForCollection(\\n        address collection,\\n        address setter,\\n        address receiver,\\n        uint256 fee\\n    ) external;\\n\\n    function updateRoyaltyFeeLimit(uint256 _royaltyFeeLimit) external;\\n\\n    function royaltyInfo(address collection, uint256 amount) external view returns (address, uint256);\\n\\n    function royaltyFeeInfoCollection(address collection)\\n        external\\n        view\\n        returns (\\n            address,\\n            address,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0x08bb49ca883e5d06f5dc90b3d4230d33a2e7d8da449ceb5392d7c4c7671de171\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161083138038061083183398101604081905261002f9161009d565b6100383361004d565b60601b6001600160601b0319166080526100cd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100af57600080fd5b81516001600160a01b03811681146100c657600080fd5b9392505050565b60805160601c61073f6100f26000396000818161012201526103ad015261073f6000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063c16f515611610050578063c16f51561461011d578063f2fde38b14610144578063f4f635fa1461015757600080fd5b8063715018a6146100775780638da5cb5b14610081578063b060dd86146100c5575b600080fd5b61007f610196565b005b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100ec7f2a55205a0000000000000000000000000000000000000000000000000000000081565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016100bc565b61009b7f000000000000000000000000000000000000000000000000000000000000000081565b61007f61015236600461063e565b610228565b61016a610165366004610690565b610358565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526020830191909152016100bc565b60005473ffffffffffffffffffffffffffffffffffffffff16331461021c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61022660006105c9565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610213565b73ffffffffffffffffffffffffffffffffffffffff811661034c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610213565b610355816105c9565b50565b6040517f2782d6c700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018390526000918291829182917f00000000000000000000000000000000000000000000000000000000000000001690632782d6c790604401604080518083038186803b1580156103ee57600080fd5b505afa158015610402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104269190610662565b909250905073ffffffffffffffffffffffffffffffffffffffff8216158061044c575080155b156105bd576040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f2a55205a00000000000000000000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff8816906301ffc9a79060240160206040518083038186803b1580156104d657600080fd5b505afa1580156104ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050e91906106c5565b156105bd576040517f2a55205a000000000000000000000000000000000000000000000000000000008152600481018790526024810186905273ffffffffffffffffffffffffffffffffffffffff881690632a55205a90604401604080518083038186803b15801561057f57600080fd5b505afa158015610593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b79190610662565b90925090505b90969095509350505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561065057600080fd5b813561065b816106e7565b9392505050565b6000806040838503121561067557600080fd5b8251610680816106e7565b6020939093015192949293505050565b6000806000606084860312156106a557600080fd5b83356106b0816106e7565b95602085013595506040909401359392505050565b6000602082840312156106d757600080fd5b8151801515811461065b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461035557600080fdfea2646970667358221220da46a1d5ec7bcd493c2f1c62df27d834b7bcc22d93680af715b2df60313c619f64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063c16f515611610050578063c16f51561461011d578063f2fde38b14610144578063f4f635fa1461015757600080fd5b8063715018a6146100775780638da5cb5b14610081578063b060dd86146100c5575b600080fd5b61007f610196565b005b60005473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100ec7f2a55205a0000000000000000000000000000000000000000000000000000000081565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016100bc565b61009b7f000000000000000000000000000000000000000000000000000000000000000081565b61007f61015236600461063e565b610228565b61016a610165366004610690565b610358565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526020830191909152016100bc565b60005473ffffffffffffffffffffffffffffffffffffffff16331461021c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b61022660006105c9565b565b60005473ffffffffffffffffffffffffffffffffffffffff1633146102a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610213565b73ffffffffffffffffffffffffffffffffffffffff811661034c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610213565b610355816105c9565b50565b6040517f2782d6c700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018390526000918291829182917f00000000000000000000000000000000000000000000000000000000000000001690632782d6c790604401604080518083038186803b1580156103ee57600080fd5b505afa158015610402573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104269190610662565b909250905073ffffffffffffffffffffffffffffffffffffffff8216158061044c575080155b156105bd576040517f01ffc9a70000000000000000000000000000000000000000000000000000000081527f2a55205a00000000000000000000000000000000000000000000000000000000600482015273ffffffffffffffffffffffffffffffffffffffff8816906301ffc9a79060240160206040518083038186803b1580156104d657600080fd5b505afa1580156104ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050e91906106c5565b156105bd576040517f2a55205a000000000000000000000000000000000000000000000000000000008152600481018790526024810186905273ffffffffffffffffffffffffffffffffffffffff881690632a55205a90604401604080518083038186803b15801561057f57600080fd5b505afa158015610593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105b79190610662565b90925090505b90969095509350505050565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60006020828403121561065057600080fd5b813561065b816106e7565b9392505050565b6000806040838503121561067557600080fd5b8251610680816106e7565b6020939093015192949293505050565b6000806000606084860312156106a557600080fd5b83356106b0816106e7565b95602085013595506040909401359392505050565b6000602082840312156106d757600080fd5b8151801515811461065b57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461035557600080fdfea2646970667358221220da46a1d5ec7bcd493c2f1c62df27d834b7bcc22d93680af715b2df60313c619f64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateRoyaltyFeeAndGetRecipient(address,uint256,uint256)": {
        "params": {
          "amount": "amount to transfer",
          "collection": "address of the NFT contract",
          "tokenId": "tokenId"
        }
      },
      "constructor": {
        "params": {
          "_royaltyFeeRegistry": "address of the RoyaltyFeeRegistry"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "RoyaltyFeeManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateRoyaltyFeeAndGetRecipient(address,uint256,uint256)": {
        "notice": "Calculate royalty fee and get recipient"
      },
      "constructor": {
        "notice": "Constructor"
      }
    },
    "notice": "It handles the logic to check and transfer royalty fees (if any).",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/RoyaltyFeeManager.sol:RoyaltyFeeManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      }
    }
  }
}
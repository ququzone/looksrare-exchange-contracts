{
  "address": "0x9b383512F395C71A413e246F2901587630cBC0Ae",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_looksRareExchange",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "LOOKS_RARE_EXCHANGE",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "transferNonFungibleToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x51b50dc6bbf99c5aa32b078270a7ee2186ee326131844704b6b44090236e1d85",
  "receipt": {
    "to": null,
    "from": "0xBD62fB256F6F6a91B6F14716eA538FD2973E5c3b",
    "contractAddress": "0x9b383512F395C71A413e246F2901587630cBC0Ae",
    "transactionIndex": 0,
    "gasUsed": "236335",
    "logsBloom": "0x
    "blockHash": "0xf73e0c1f4d1638c9a899a83e15473c6b4ed51ec70f28db0f7ebd2cdc0d84e7f5",
    "transactionHash": "0x51b50dc6bbf99c5aa32b078270a7ee2186ee326131844704b6b44090236e1d85",
    "logs": [],
    "blockNumber": 23970549,
    "cumulativeGasUsed": "236335",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2FCf6eB6544F991e971f7aA03322FD3fF9b8794e"
  ],
  "numDeployments": 4,
  "solcInputHash": "3cc002f9962911b41fba7573c29b59f3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_looksRareExchange\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"LOOKS_RARE_EXCHANGE\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"transferNonFungibleToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_looksRareExchange\":\"address of the LooksRare exchange\"}},\"transferNonFungibleToken(address,address,address,uint256,uint256)\":{\"params\":{\"collection\":\"address of the collection\",\"from\":\"address of the sender\",\"to\":\"address of the recipient\",\"tokenId\":\"tokenId\"}}},\"title\":\"TransferManagerNonCompliantERC721\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructor\"},\"transferNonFungibleToken(address,address,address,uint256,uint256)\":{\"notice\":\"Transfer ERC721 token\"}},\"notice\":\"It allows the transfer of ERC721 tokens without safeTransferFrom.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/transferManagers/TransferManagerNonCompliantERC721.sol\":\"TransferManagerNonCompliantERC721\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":888888},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x516a22876c1fab47f49b1bc22b4614491cd05338af8bd2e7b382da090a079990\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/interfaces/ITransferManagerNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ITransferManagerNFT {\\n    function transferNonFungibleToken(\\n        address collection,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256 amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x725f4c4a9b85f34b496d26562c0d9c09aeeeb8275e7ceaac5eb411810cc12301\",\"license\":\"MIT\"},\"contracts/transferManagers/TransferManagerNonCompliantERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {ITransferManagerNFT} from \\\"../interfaces/ITransferManagerNFT.sol\\\";\\n\\n/**\\n * @title TransferManagerNonCompliantERC721\\n * @notice It allows the transfer of ERC721 tokens without safeTransferFrom.\\n */\\ncontract TransferManagerNonCompliantERC721 is ITransferManagerNFT {\\n    address public immutable LOOKS_RARE_EXCHANGE;\\n\\n    /**\\n     * @notice Constructor\\n     * @param _looksRareExchange address of the LooksRare exchange\\n     */\\n    constructor(address _looksRareExchange) {\\n        LOOKS_RARE_EXCHANGE = _looksRareExchange;\\n    }\\n\\n    /**\\n     * @notice Transfer ERC721 token\\n     * @param collection address of the collection\\n     * @param from address of the sender\\n     * @param to address of the recipient\\n     * @param tokenId tokenId\\n     */\\n    function transferNonFungibleToken(\\n        address collection,\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        uint256\\n    ) external override {\\n        require(msg.sender == LOOKS_RARE_EXCHANGE, \\\"Transfer: Only LooksRare Exchange\\\");\\n        IERC721(collection).transferFrom(from, to, tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x6a4763e4136c21463e84b2f57621582b51db6ed0b72ac9a0dd446594963b2323\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161034b38038061034b83398101604081905261002f91610044565b60601b6001600160601b031916608052610074565b60006020828403121561005657600080fd5b81516001600160a01b038116811461006d57600080fd5b9392505050565b60805160601c6102b4610097600039600081816055015260b801526102b46000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806333f2fa9f1461003b5780633dd7df5014610050575b600080fd5b61004e610049366004610229565b6100a0565b005b6100777f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610169576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5472616e736665723a204f6e6c79204c6f6f6b73526172652045786368616e6760448201527f6500000000000000000000000000000000000000000000000000000000000000606482015260840160405180910390fd5b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528481166024830152604482018490528616906323b872dd90606401600060405180830381600087803b1580156101e157600080fd5b505af11580156101f5573d6000803e3d6000fd5b505050505050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461022457600080fd5b919050565b600080600080600060a0868803121561024157600080fd5b61024a86610200565b945061025860208701610200565b935061026660408701610200565b9497939650939460608101359450608001359291505056fea26469706673582212206b3b7a39244d70ba5252980c43334901911d3eb90046074de15100576205d33e64736f6c63430008070033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c806333f2fa9f1461003b5780633dd7df5014610050575b600080fd5b61004e610049366004610229565b6100a0565b005b6100777f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610169576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602160248201527f5472616e736665723a204f6e6c79204c6f6f6b73526172652045786368616e6760448201527f6500000000000000000000000000000000000000000000000000000000000000606482015260840160405180910390fd5b6040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85811660048301528481166024830152604482018490528616906323b872dd90606401600060405180830381600087803b1580156101e157600080fd5b505af11580156101f5573d6000803e3d6000fd5b505050505050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461022457600080fd5b919050565b600080600080600060a0868803121561024157600080fd5b61024a86610200565b945061025860208701610200565b935061026660408701610200565b9497939650939460608101359450608001359291505056fea26469706673582212206b3b7a39244d70ba5252980c43334901911d3eb90046074de15100576205d33e64736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_looksRareExchange": "address of the LooksRare exchange"
        }
      },
      "transferNonFungibleToken(address,address,address,uint256,uint256)": {
        "params": {
          "collection": "address of the collection",
          "from": "address of the sender",
          "to": "address of the recipient",
          "tokenId": "tokenId"
        }
      }
    },
    "title": "TransferManagerNonCompliantERC721",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructor"
      },
      "transferNonFungibleToken(address,address,address,uint256,uint256)": {
        "notice": "Transfer ERC721 token"
      }
    },
    "notice": "It allows the transfer of ERC721 tokens without safeTransferFrom.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}